{
  "timestamp": "2025-10-10T21:57:57",
  "compiler": {
    "name": "@arcgis/lumina-compiler",
    "version": "4.34.0-next.158",
    "typescriptVersion": "5.8.3"
  },
  "schemaVersion": "1.0.0",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/components/accordion/accordion.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Accordion",
          "tagName": "calcite-accordion",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteAccordion",
          "importPath": "components/calcite-accordion",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "description": "Specifies the appearance of the component.",
              "type": {
                "text": "\"solid\" | \"transparent\"",
                "values": [
                  {
                    "value": "solid",
                    "type": "string"
                  },
                  {
                    "value": "transparent",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst accordion = document.querySelector(\"calcite-accordion\");\ndocument.body.append(accordion);\nawait accordion.componentOnReady();\nconsole.log(\"calcite-accordion is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "iconPosition",
              "description": "Specifies the placement of the icon in the header.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"end\"",
              "attribute": "icon-position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconType",
              "description": "Specifies the type of the icon in the header.",
              "type": {
                "text": "\"caret\" | \"chevron\" | \"plus-minus\"",
                "values": [
                  {
                    "value": "caret",
                    "type": "string"
                  },
                  {
                    "value": "chevron",
                    "type": "string"
                  },
                  {
                    "value": "plus-minus",
                    "type": "string"
                  }
                ]
              },
              "default": "\"chevron\"",
              "attribute": "icon-type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection, and\n\n`\"single-persist\"` allows one selection and prevents de-selection.",
              "type": {
                "text": "\"multiple\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"multiple\"",
              "attribute": "selection-mode",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "description": "Specifies the appearance of the component.",
              "type": {
                "text": "\"solid\" | \"transparent\"",
                "values": [
                  {
                    "value": "solid",
                    "type": "string"
                  },
                  {
                    "value": "transparent",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "fieldName": "appearance"
            },
            {
              "name": "icon-position",
              "description": "Specifies the placement of the icon in the header.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"end\"",
              "fieldName": "iconPosition"
            },
            {
              "name": "icon-type",
              "description": "Specifies the type of the icon in the header.",
              "type": {
                "text": "\"caret\" | \"chevron\" | \"plus-minus\"",
                "values": [
                  {
                    "value": "caret",
                    "type": "string"
                  },
                  {
                    "value": "chevron",
                    "type": "string"
                  },
                  {
                    "value": "plus-minus",
                    "type": "string"
                  }
                ]
              },
              "default": "\"chevron\"",
              "fieldName": "iconType"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selection-mode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection, and\n\n`\"single-persist\"` allows one selection and prevents de-selection.",
              "type": {
                "text": "\"multiple\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"multiple\"",
              "fieldName": "selectionMode"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-accordion-item`s. `calcite-accordion` cannot be nested, however `calcite-accordion-item`s can."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-accordion-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-accordion-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-accordion-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-accordion-text-color-hover",
              "description": "Specifies the component's main text color on hover."
            },
            {
              "name": "--calcite-accordion-text-color-press",
              "description": "Specifies the component's main text color when pressed."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-accordion",
          "declaration": {
            "name": "Accordion",
            "module": "src/components/accordion/accordion.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/accordion-item/accordion-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "AccordionItem",
          "tagName": "calcite-accordion-item",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteAccordionItem",
          "importPath": "components/calcite-accordion-item",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst accordionItem = document.querySelector(\"calcite-accordion-item\");\ndocument.body.append(accordionItem);\nawait accordionItem.componentOnReady();\nconsole.log(\"calcite-accordion-item is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "Specifies a description for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "Specifies heading text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "description",
              "description": "Specifies a description for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "heading",
              "description": "Specifies heading text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "heading-level",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "icon-end",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconEnd"
            },
            {
              "name": "icon-flip-rtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            }
          ],
          "events": [
            {
              "name": "calciteAccordionItemCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteAccordionItemExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content, including nested `calcite-accordion-item`s."
            },
            {
              "name": "actions-end",
              "description": "A slot for adding `calcite-action`s or content to the end side of the component's header."
            },
            {
              "name": "actions-start",
              "description": "A slot for adding `calcite-action`s or content to the start side of the component's header."
            },
            {
              "name": "content-end",
              "description": "A slot for adding non-actionable elements after the component's header text."
            },
            {
              "name": "content-start",
              "description": "A slot for adding non-actionable elements before the component's header text."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-accordion-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-accordion-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-accordion-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-accordion-text-color-hover",
              "description": "Specifies the component's main text color on hover."
            },
            {
              "name": "--calcite-accordion-text-color-press",
              "description": "Specifies the component's main text color when pressed."
            },
            {
              "name": "--calcite-accordion-item-background-color",
              "description": "[Deprecated] Use `--calcite-accordion-background-color`. Specifies the component's background color."
            },
            {
              "name": "--calcite-accordion-item-border-color",
              "description": "[Deprecated] Use `--calcite-accordion-border-color`. Specifies the component's border color."
            },
            {
              "name": "--calcite-accordion-item-content-space",
              "description": "Specifies the component's padding."
            },
            {
              "name": "--calcite-accordion-item-end-icon-color",
              "description": "Specifies the component's `iconEnd` color. Falls back to `--calcite-accordion-item-icon-color` or current color."
            },
            {
              "name": "--calcite-accordion-item-expand-icon-color",
              "description": "Specifies the component's expand icon color."
            },
            {
              "name": "--calcite-accordion-item-header-background-color",
              "description": "Specifies the component's `heading` background color."
            },
            {
              "name": "--calcite-accordion-item-header-background-color-hover",
              "description": "Specifies the component's `heading` background color when hovered."
            },
            {
              "name": "--calcite-accordion-item-header-background-color-press",
              "description": "Specifies the component's `heading` background color when pressed."
            },
            {
              "name": "--calcite-accordion-item-heading-text-color",
              "description": "Specifies the component's `heading` text color."
            },
            {
              "name": "--calcite-accordion-item-icon-color",
              "description": "[Deprecated] Use `--calcite-icon-color`. Specifies the component's default icon color."
            },
            {
              "name": "--calcite-accordion-item-start-icon-color",
              "description": "Specifies the component's `iconStart` color. Falls back to `--calcite-accordion-item-icon-color` or current color."
            },
            {
              "name": "--calcite-accordion-item-text-color",
              "description": "[Deprecated] Use `--calcite-accordion-text-color`. Specifies the component's text color."
            },
            {
              "name": "--calcite-accordion-item-text-color-hover",
              "description": "[Deprecated] Use `--calcite-accordion-text-color-hover`. Specifies the component's text color on hover."
            },
            {
              "name": "--calcite-accordion-item-text-color-press",
              "description": "[Deprecated] Use `--calcite-accordion-text-color-press`. Specifies the component's text color on press."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-accordion-item",
          "declaration": {
            "name": "AccordionItem",
            "module": "src/components/accordion-item/accordion-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/action/action.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Action",
          "tagName": "calcite-action",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteAction",
          "importPath": "components/calcite-action",
          "members": [
            {
              "kind": "field",
              "name": "active",
              "description": "When `true`, the component is highlighted.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the horizontal alignment of button elements with text content.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "appearance",
              "description": "Specifies the appearance of the component.",
              "type": {
                "text": "\"solid\" | \"transparent\"",
                "values": [
                  {
                    "value": "solid",
                    "type": "string"
                  },
                  {
                    "value": "transparent",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "aria",
              "description": "Use this property to override or extend ARIA properties and attributes on the component's button.",
              "type": {
                "text": "{\n    controlsElements?: Array<Element>;\n    describedByElements?: Array<Element>;\n    expanded?: boolean | \"true\" | \"false\";\n    hasPopup?: boolean | \"grid\" | \"tree\" | \"dialog\" | \"menu\" | \"true\" | \"listbox\" | \"false\";\n    labelledByElements?: Array<Element>;\n    ownsElements?: Array<Element>;\n    pressed?: boolean | \"true\" | \"mixed\" | \"false\";\n}",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 25,
                    "end": 30
                  },
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 67,
                    "end": 72
                  },
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 244,
                    "end": 249
                  },
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 279,
                    "end": 284
                  }
                ]
              },
              "docsTags": [
                {
                  "name": "internal"
                }
              ]
            },
            {
              "kind": "field",
              "name": "compact",
              "description": "When `true`, the side padding of the component is reduced.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "deprecated": "No longer necessary.",
              "attribute": "compact",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst action = document.querySelector(\"calcite-action\");\ndocument.body.append(action);\nawait action.componentOnReady();\nconsole.log(\"calcite-action is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indicator",
              "description": "When `true`, displays a visual indicator.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "indicator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "text",
              "description": "Specifies text that accompanies the icon.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "text",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "textEnabled",
              "description": "When `true`, indicates whether the text is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "text-enabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Specifies the default behavior of the component.",
              "type": {
                "text": "\"button\" | \"reset\" | \"submit\"",
                "values": [
                  {
                    "value": "button",
                    "type": "string"
                  },
                  {
                    "value": "reset",
                    "type": "string"
                  },
                  {
                    "value": "submit",
                    "type": "string"
                  }
                ]
              },
              "default": "\"button\"",
              "attribute": "type",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "When `true`, the component is highlighted.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "alignment",
              "description": "Specifies the horizontal alignment of button elements with text content.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "alignment"
            },
            {
              "name": "appearance",
              "description": "Specifies the appearance of the component.",
              "type": {
                "text": "\"solid\" | \"transparent\"",
                "values": [
                  {
                    "value": "solid",
                    "type": "string"
                  },
                  {
                    "value": "transparent",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "fieldName": "appearance"
            },
            {
              "name": "compact",
              "description": "When `true`, the side padding of the component is reduced.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "compact",
              "deprecated": "No longer necessary."
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "indicator",
              "description": "When `true`, displays a visual indicator.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "indicator"
            },
            {
              "name": "label",
              "description": "Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "text",
              "description": "Specifies text that accompanies the icon.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "text"
            },
            {
              "name": "text-enabled",
              "description": "When `true`, indicates whether the text is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "textEnabled"
            },
            {
              "name": "type",
              "description": "Specifies the default behavior of the component.",
              "type": {
                "text": "\"button\" | \"reset\" | \"submit\"",
                "values": [
                  {
                    "value": "button",
                    "type": "string"
                  },
                  {
                    "value": "reset",
                    "type": "string"
                  },
                  {
                    "value": "submit",
                    "type": "string"
                  }
                ]
              },
              "default": "\"button\"",
              "fieldName": "type"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding non-interactive content, such as a `calcite-icon`."
            },
            {
              "name": "tooltip",
              "description": "[Deprecated] Use the `calcite-tooltip` component instead."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-action-background-color-hover",
              "description": "Specifies the component's background color when hovered or focused."
            },
            {
              "name": "--calcite-action-background-color-press",
              "description": "Specifies the component's background color when active."
            },
            {
              "name": "--calcite-action-background-color-pressed",
              "description": "[Deprecated] Use --calcite-action-background-color-press. Specifies the component's background color when active."
            },
            {
              "name": "--calcite-action-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-action-corner-radius-end-end",
              "description": "[Deprecated] Use --calcite-action-corner-radius. Specifies the component's corner radius end end."
            },
            {
              "name": "--calcite-action-corner-radius-end-start",
              "description": "[Deprecated] Use --calcite-action-corner-radius. Specifies the component's corner radius end start."
            },
            {
              "name": "--calcite-action-corner-radius-start-end",
              "description": "[Deprecated] Use --calcite-action-corner-radius. Specifies the component's corner radius start end."
            },
            {
              "name": "--calcite-action-corner-radius-start-start",
              "description": "[Deprecated] Use --calcite-action-corner-radius. Specifies the component's corner radius start start."
            },
            {
              "name": "--calcite-action-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-action-indicator-color",
              "description": "Specifies the component's indicator color."
            },
            {
              "name": "--calcite-action-text-color-press",
              "description": "Specifies the component's text color when pressed or hovered."
            },
            {
              "name": "--calcite-action-text-color-pressed",
              "description": "[Deprecated] Use --calcite-action-text-color-press. Specifies the component's text color when hovered."
            },
            {
              "name": "--calcite-action-text-color",
              "description": "Specifies the component's text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-action",
          "declaration": {
            "name": "Action",
            "module": "src/components/action/action.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/action-bar/action-bar.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ActionBar",
          "tagName": "calcite-action-bar",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteActionBar",
          "importPath": "components/calcite-action-bar",
          "members": [
            {
              "kind": "field",
              "name": "actionsEndGroupLabel",
              "description": "Specifies the accessible label for the last `calcite-action-group`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "actions-end-group-label"
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst actionBar = document.querySelector(\"calcite-action-bar\");\ndocument.body.append(actionBar);\nawait actionBar.componentOnReady();\nconsole.log(\"calcite-action-bar is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "expandDisabled",
              "description": "When `true`, the expand-toggling behavior is disabled.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "expand-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "floating",
              "description": "When `true`, the component is in a floating state.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "floating",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Specifies the layout direction of the actions.",
              "type": {
                "text": "\"grid\" | \"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "grid",
                    "type": "string"
                  },
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "overflowActionsDisabled",
              "description": "When `true`, disables automatically overflowing `calcite-action`s that won't fit into menus.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "overflow-actions-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Arranges the component depending on the element's `dir` property.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the expand `calcite-action`.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectionAppearance",
              "description": "Specifies the selection appearance of the component",
              "type": {
                "text": "\"highlight\" | \"neutral\"",
                "values": [
                  {
                    "value": "highlight",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"neutral\"",
              "attribute": "selection-appearance",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "actions-end-group-label",
              "description": "Specifies the accessible label for the last `calcite-action-group`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "actionsEndGroupLabel"
            },
            {
              "name": "expand-disabled",
              "description": "When `true`, the expand-toggling behavior is disabled.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "expandDisabled"
            },
            {
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "floating",
              "description": "When `true`, the component is in a floating state.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "floating"
            },
            {
              "name": "layout",
              "description": "Specifies the layout direction of the actions.",
              "type": {
                "text": "\"grid\" | \"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "grid",
                    "type": "string"
                  },
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "fieldName": "layout"
            },
            {
              "name": "overflow-actions-disabled",
              "description": "When `true`, disables automatically overflowing `calcite-action`s that won't fit into menus.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "overflowActionsDisabled"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "position",
              "description": "Arranges the component depending on the element's `dir` property.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "position"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the expand `calcite-action`.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selection-appearance",
              "description": "Specifies the selection appearance of the component",
              "type": {
                "text": "\"highlight\" | \"neutral\"",
                "values": [
                  {
                    "value": "highlight",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"neutral\"",
              "fieldName": "selectionAppearance"
            }
          ],
          "events": [
            {
              "name": "calciteActionBarCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteActionBarExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteActionBarToggle",
              "description": "Fires when the `expanded` property is toggled.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-action`s that will appear at the top of the component."
            },
            {
              "name": "bottom-actions",
              "description": "[Deprecated] Use the `\"actions-end\"` slot instead. A slot for adding `calcite-action`s that will appear at the bottom of the component, above the collapse/expand button."
            },
            {
              "name": "actions-end",
              "description": "A slot for adding `calcite-action`s that will appear at the end of the component, prior to the collapse/expand button."
            },
            {
              "name": "expand-tooltip",
              "description": "A slot to set the `calcite-tooltip` for the expand toggle."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-action-bar-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-action-bar-corner-radius",
              "description": "Specifies the component's border radius when `floating` is `true`."
            },
            {
              "name": "--calcite-action-bar-expanded-max-width",
              "description": "When `layout` is `\"vertical\"`, specifies the component's maximum width."
            },
            {
              "name": "--calcite-action-bar-items-space",
              "description": "Specifies the space between slotted components in the component."
            },
            {
              "name": "--calcite-action-bar-shadow",
              "description": "Specifies the component's shadow when `floating` is `true`."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-action-bar",
          "declaration": {
            "name": "ActionBar",
            "module": "src/components/action-bar/action-bar.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/action-group/action-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ActionGroup",
          "tagName": "calcite-action-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteActionGroup",
          "importPath": "components/calcite-action-group",
          "members": [
            {
              "kind": "field",
              "name": "columns",
              "description": "Indicates number of columns.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "columns",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst actionGroup = document.querySelector(\"calcite-action-group\");\ndocument.body.append(actionGroup);\nawait actionGroup.componentOnReady();\nconsole.log(\"calcite-action-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Indicates the layout of the component.",
              "type": {
                "text": "\"grid\" | \"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "grid",
                    "type": "string"
                  },
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "attribute": "layout",
              "reflects": true,
              "docsTags": [
                {
                  "name": "internal"
                }
              ]
            },
            {
              "kind": "field",
              "name": "menuFlipPlacements",
              "description": "Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.",
              "type": {
                "text": "Array<\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\">",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "menuOpen",
              "description": "When `true`, the `calcite-action-menu` is open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "menu-open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuPlacement",
              "description": "Determines where the action menu will be positioned.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "menu-placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the `calcite-action-menu`.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "columns",
              "description": "Indicates number of columns.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "columns"
            },
            {
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "layout",
              "description": "Indicates the layout of the component.",
              "type": {
                "text": "\"grid\" | \"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "grid",
                    "type": "string"
                  },
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "fieldName": "layout"
            },
            {
              "name": "menu-open",
              "description": "When `true`, the `calcite-action-menu` is open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "menuOpen"
            },
            {
              "name": "menu-placement",
              "description": "Determines where the action menu will be positioned.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "menuPlacement"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the `calcite-action-menu`.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            }
          ],
          "events": [
            {
              "name": "calciteActionGroupCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteActionGroupExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding a group of `calcite-action`s."
            },
            {
              "name": "menu-actions",
              "description": "A slot for adding an overflow menu with `calcite-action`s inside a `calcite-dropdown`."
            },
            {
              "name": "menu-tooltip",
              "description": "A slot for adding a `calcite-tooltip` for the menu."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-action-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-action-group-border-color",
              "description": "Specifies the component's border color when used in a `calcite-action-bar` or `calcite-action-menu`."
            },
            {
              "name": "--calcite-action-group-columns",
              "description": "When `layout` is `\"grid\"`, specifies the component's grid-template-columns."
            },
            {
              "name": "--calcite-action-group-gap",
              "description": "When `layout` is `\"grid\"`, specifies the component's gap."
            },
            {
              "name": "--calcite-action-group-padding",
              "description": "[Deprecated] Use `--calcite-action-group-gap`. Specifies the component's padding."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-action-group",
          "declaration": {
            "name": "ActionGroup",
            "module": "src/components/action-group/action-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/action-menu/action-menu.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ActionMenu",
          "tagName": "calcite-action-menu",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteActionMenu",
          "importPath": "components/calcite-action-menu",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "description": "Specifies the appearance of the component.",
              "type": {
                "text": "\"solid\" | \"transparent\"",
                "values": [
                  {
                    "value": "solid",
                    "type": "string"
                  },
                  {
                    "value": "transparent",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst actionMenu = document.querySelector(\"calcite-action-menu\");\ndocument.body.append(actionMenu);\nawait actionMenu.componentOnReady();\nconsole.log(\"calcite-action-menu is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flipPlacements",
              "description": "Specifies the component's fallback slotted content `placement` when it's initial or specified `placement` has insufficient space available.",
              "type": {
                "text": "Array<\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\">",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Specifies the text string for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, the component is open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the `referenceElement`.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component's trigger `calcite-action`.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "description": "Specifies the appearance of the component.",
              "type": {
                "text": "\"solid\" | \"transparent\"",
                "values": [
                  {
                    "value": "solid",
                    "type": "string"
                  },
                  {
                    "value": "transparent",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "fieldName": "appearance"
            },
            {
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "label",
              "description": "Specifies the text string for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "open",
              "description": "When `true`, the component is open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the `referenceElement`.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "placement"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component's trigger `calcite-action`.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            }
          ],
          "events": [
            {
              "name": "calciteActionMenuCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteActionMenuExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteActionMenuOpen",
              "description": "Fires when the `open` property is toggled.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-action`s."
            },
            {
              "name": "trigger",
              "description": "A slot for adding a `calcite-action` to trigger opening the menu."
            },
            {
              "name": "tooltip",
              "description": "A slot for adding a tooltip for the menu."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-action-menu-items-space",
              "description": "Specifies the space between actions in the menu."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-action-menu",
          "declaration": {
            "name": "ActionMenu",
            "module": "src/components/action-menu/action-menu.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/action-pad/action-pad.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ActionPad",
          "tagName": "calcite-action-pad",
          "deprecated": "Use the `calcite-action-bar` component instead.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteActionPad",
          "importPath": "components/calcite-action-pad",
          "members": [
            {
              "kind": "field",
              "name": "actionsEndGroupLabel",
              "description": "Specifies the accessible label for the last `calcite-action-group`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "actions-end-group-label"
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst actionPad = document.querySelector(\"calcite-action-pad\");\ndocument.body.append(actionPad);\nawait actionPad.componentOnReady();\nconsole.log(\"calcite-action-pad is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "expandDisabled",
              "description": "When `true`, the expand-toggling behavior is disabled.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "expand-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Indicates the layout of the component.",
              "type": {
                "text": "\"grid\" | \"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "grid",
                    "type": "string"
                  },
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Arranges the component depending on the element's `dir` property.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the expand `calcite-action`.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectionAppearance",
              "description": "Specifies the selection appearance of the component",
              "type": {
                "text": "\"highlight\" | \"neutral\"",
                "values": [
                  {
                    "value": "highlight",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"neutral\"",
              "attribute": "selection-appearance",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "actions-end-group-label",
              "description": "Specifies the accessible label for the last `calcite-action-group`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "actionsEndGroupLabel"
            },
            {
              "name": "expand-disabled",
              "description": "When `true`, the expand-toggling behavior is disabled.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "expandDisabled"
            },
            {
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "layout",
              "description": "Indicates the layout of the component.",
              "type": {
                "text": "\"grid\" | \"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "grid",
                    "type": "string"
                  },
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "fieldName": "layout"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "position",
              "description": "Arranges the component depending on the element's `dir` property.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "position"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the expand `calcite-action`.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selection-appearance",
              "description": "Specifies the selection appearance of the component",
              "type": {
                "text": "\"highlight\" | \"neutral\"",
                "values": [
                  {
                    "value": "highlight",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"neutral\"",
              "fieldName": "selectionAppearance"
            }
          ],
          "events": [
            {
              "name": "calciteActionPadCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteActionPadExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteActionPadToggle",
              "description": "Fires when the `expanded` property is toggled.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-action`s to the component."
            },
            {
              "name": "expand-tooltip",
              "description": "A slot to set the `calcite-tooltip` for the expand toggle."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-action-pad-corner-radius",
              "description": "Specifies the component's border radius."
            },
            {
              "name": "--calcite-action-pad-expanded-max-width",
              "description": "When `layout` is `\"vertical\"`, specifies the component's maximum width when `expanded`."
            },
            {
              "name": "--calcite-action-pad-items-space",
              "description": "Specifies the component's space between slotted components."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-action-pad",
          "declaration": {
            "name": "ActionPad",
            "module": "src/components/action-pad/action-pad.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/alert/alert.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Alert",
          "tagName": "calcite-alert",
          "description": "Alerts are meant to provide a way to communicate urgent or important information to users, frequently as a result of an action they took in your app. Alerts are positioned\nat the bottom of the page. Multiple opened alerts will be added to a queue, allowing users to dismiss them in the order they are provided.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteAlert",
          "importPath": "components/calcite-alert",
          "members": [
            {
              "kind": "field",
              "name": "autoClose",
              "description": "When `true`, the component closes automatically. Recommended for passive, non-blocking alerts.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "auto-close",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autoCloseDuration",
              "description": "Specifies the duration before the component automatically closes - only use with `autoClose`.",
              "type": {
                "text": "\"fast\" | \"medium\" | \"slow\"",
                "values": [
                  {
                    "value": "fast",
                    "type": "string"
                  },
                  {
                    "value": "medium",
                    "type": "string"
                  },
                  {
                    "value": "slow",
                    "type": "string"
                  }
                ]
              },
              "default": "\"medium\"",
              "attribute": "auto-close-duration",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst alert = document.querySelector(\"calcite-alert\");\ndocument.body.append(alert);\nawait alert.componentOnReady();\nconsole.log(\"calcite-alert is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "When `true`, shows a default recommended icon. Alternatively,\npass a Calcite UI Icon name to display a specific icon.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to top border and icon.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "info",
                    "type": "string"
                  },
                  {
                    "value": "success",
                    "type": "string"
                  },
                  {
                    "value": "warning",
                    "type": "string"
                  }
                ]
              },
              "default": "\"brand\"",
              "attribute": "kind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Specifies an accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Specifies the placement of the component.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "queue",
              "description": "Specifies the ordering priority of the component when opened.",
              "type": {
                "text": "\"immediate\" | \"last\" | \"next\"",
                "values": [
                  {
                    "value": "immediate",
                    "type": "string"
                  },
                  {
                    "value": "last",
                    "type": "string"
                  },
                  {
                    "value": "next",
                    "type": "string"
                  }
                ]
              },
              "default": "\"last\"",
              "attribute": "queue",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's \"close\" button, the first focusable item.\n\n`@returns` {Promise<void>}",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "auto-close",
              "description": "When `true`, the component closes automatically. Recommended for passive, non-blocking alerts.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "autoClose"
            },
            {
              "name": "auto-close-duration",
              "description": "Specifies the duration before the component automatically closes - only use with `autoClose`.",
              "type": {
                "text": "\"fast\" | \"medium\" | \"slow\"",
                "values": [
                  {
                    "value": "fast",
                    "type": "string"
                  },
                  {
                    "value": "medium",
                    "type": "string"
                  },
                  {
                    "value": "slow",
                    "type": "string"
                  }
                ]
              },
              "default": "\"medium\"",
              "fieldName": "autoCloseDuration"
            },
            {
              "name": "icon",
              "description": "When `true`, shows a default recommended icon. Alternatively,\npass a Calcite UI Icon name to display a specific icon.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to top border and icon.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "info",
                    "type": "string"
                  },
                  {
                    "value": "success",
                    "type": "string"
                  },
                  {
                    "value": "warning",
                    "type": "string"
                  }
                ]
              },
              "default": "\"brand\"",
              "fieldName": "kind"
            },
            {
              "name": "label",
              "description": "Specifies an accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "placement",
              "description": "Specifies the placement of the component.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom\"",
              "fieldName": "placement"
            },
            {
              "name": "queue",
              "description": "Specifies the ordering priority of the component when opened.",
              "type": {
                "text": "\"immediate\" | \"last\" | \"next\"",
                "values": [
                  {
                    "value": "immediate",
                    "type": "string"
                  },
                  {
                    "value": "last",
                    "type": "string"
                  },
                  {
                    "value": "next",
                    "type": "string"
                  }
                ]
              },
              "default": "\"last\"",
              "fieldName": "queue"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            }
          ],
          "events": [
            {
              "name": "calciteAlertBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteAlertBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteAlertClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteAlertOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "title",
              "description": "A slot for adding a title to the component."
            },
            {
              "name": "message",
              "description": "A slot for adding main text to the component."
            },
            {
              "name": "link",
              "description": "A slot for adding a `calcite-action` to take from the component such as: \"undo\", \"try again\", \"link to page\", etc."
            },
            {
              "name": "actions-end",
              "description": "A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or fewer actions."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-alert-width",
              "description": "Specifies the width of the component."
            },
            {
              "name": "--calcite-alert-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-alert-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-alert-shadow",
              "description": "Specifies the component's shadow."
            },
            {
              "name": "--calcite-alert-offset-size",
              "description": "Specifies the component's `placement` offset."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-alert",
          "declaration": {
            "name": "Alert",
            "module": "src/components/alert/alert.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/autocomplete/autocomplete.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Autocomplete",
          "tagName": "calcite-autocomplete",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteAutocomplete",
          "importPath": "components/calcite-autocomplete",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the text alignment of the component's value.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "description": "Specifies the type of content to autocomplete, for use in forms.\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "AutoFill",
                "references": [
                  {
                    "name": "AutoFill",
                    "package": "typescript",
                    "module": "lib/lib.dom.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)"
                }
              ]
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst autocomplete = document.querySelector(\"calcite-autocomplete\");\ndocument.body.append(autocomplete);\nawait autocomplete.componentOnReady();\nconsole.log(\"calcite-autocomplete is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flipPlacements",
              "description": "Specifies the component's fallback `placement` when it's initial or specified `placement` has insufficient space available.",
              "type": {
                "text": "Array<\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\">",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inputValue",
              "description": "The component's input value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "input-value"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxLength",
              "description": "When the component resides in a form,\nspecifies the maximum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "max-length",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "minLength",
              "description": "When the component resides in a form,\nspecifies the minimum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "min-length",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pattern",
              "description": "When the component resides in a form,\nspecifies a regular expression (regex) pattern the component's `value` must match for validation.\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "pattern",
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Specifies placeholder text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "placeholder",
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the container element.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-start\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "prefixText",
              "description": "Adds text to the start of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "prefix-text"
            },
            {
              "kind": "field",
              "name": "readOnly",
              "description": "When `true`, the component's value can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "read-only",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
                }
              ]
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Updates the position of the component.",
              "parameters": [
                {
                  "name": "delayed",
                  "default": "false",
                  "type": {
                    "text": "boolean",
                    "values": [
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "delayed - `true` if the placement should be updated after the component is finished rendering."
                },
                {
                  "name": "returns"
                }
              ],
              "signature": "(delayed?: boolean): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "scrollContentTo",
              "description": "Scrolls the component's content to a specified set of coordinates.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "ScrollToOptions",
                    "references": [
                      {
                        "name": "ScrollToOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 15
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "myAutocomplete.scrollContentTo({\n  left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.\n  top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element\n  behavior: \"auto\" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).\n});"
                },
                {
                  "name": "param",
                  "text": "options - allows specific coordinates to be defined."
                },
                {
                  "name": "returns",
                  "text": "- promise that resolves once the content is scrolled to."
                }
              ],
              "signature": "(options?: ScrollToOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "selectText",
              "description": "Selects the text of the component's `value`.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "returns"
                }
              ],
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                },
                {
                  "name": "returns"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "suffixText",
              "description": "Adds text to the end of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "suffix-text"
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"\"",
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "description": "Specifies the text alignment of the component's value.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "alignment"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "icon",
              "description": "When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "input-value",
              "description": "The component's input value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "inputValue"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "max-length",
              "description": "When the component resides in a form,\nspecifies the maximum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "maxLength"
            },
            {
              "name": "min-length",
              "description": "When the component resides in a form,\nspecifies the minimum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "minLength"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "pattern",
              "description": "When the component resides in a form,\nspecifies a regular expression (regex) pattern the component's `value` must match for validation.\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "pattern"
            },
            {
              "name": "placeholder",
              "description": "Specifies placeholder text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "placeholder"
            },
            {
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the container element.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-start\"",
              "fieldName": "placement"
            },
            {
              "name": "prefix-text",
              "description": "Adds text to the start of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "prefixText"
            },
            {
              "name": "read-only",
              "description": "When `true`, the component's value can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "readOnly"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "suffix-text",
              "description": "Adds text to the end of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "suffixText"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"\"",
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteAutocompleteBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteAutocompleteBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteAutocompleteChange",
              "description": "Fires each time a new `value` is typed and committed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteAutocompleteClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteAutocompleteOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteAutocompleteTextChange",
              "description": "Fires each time a new `inputValue` is typed and committed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteAutocompleteTextInput",
              "description": "Fires each time a new `inputValue` is typed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-autocomplete-item` elements."
            },
            {
              "name": "content-bottom",
              "description": "A slot for adding content below `calcite-autocomplete-item` elements."
            },
            {
              "name": "content-top",
              "description": "A slot for adding content above `calcite-autocomplete-item` elements."
            },
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-autocomplete-background-color",
              "description": "Specifies the background color of the component."
            },
            {
              "name": "--calcite-autocomplete-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-autocomplete-text-color",
              "description": "Specifies the text color of the component."
            },
            {
              "name": "--calcite-autocomplete-input-prefix-size",
              "description": "Specifies the Input's prefix width, when present."
            },
            {
              "name": "--calcite-autocomplete-input-suffix-size",
              "description": "Specifies the Input's suffix width, when present."
            },
            {
              "name": "--calcite-autocomplete-input-background-color",
              "description": "Specifies the background color of the Input."
            },
            {
              "name": "--calcite-autocomplete-input-border-color",
              "description": "Specifies the border color of the Input."
            },
            {
              "name": "--calcite-autocomplete-input-corner-radius",
              "description": "Specifies the corner radius of the Input."
            },
            {
              "name": "--calcite-autocomplete-input-shadow",
              "description": "Specifies the shadow of the Input."
            },
            {
              "name": "--calcite-autocomplete-input-icon-color",
              "description": "Specifies the icon color of the Input."
            },
            {
              "name": "--calcite-autocomplete-input-text-color",
              "description": "Specifies the text color of the Input."
            },
            {
              "name": "--calcite-autocomplete-input-placeholder-text-color",
              "description": "Specifies the color of placeholder text in the Input."
            },
            {
              "name": "--calcite-autocomplete-input-actions-background-color",
              "description": "Specifies the background color of Input's `clearable` element."
            },
            {
              "name": "--calcite-autocomplete-input-actions-background-color-hover",
              "description": "Specifies the background color of Input's `clearable` element when hovered."
            },
            {
              "name": "--calcite-autocomplete-input-actions-background-color-press",
              "description": "Specifies the background color of Input's `clearable` element when pressed."
            },
            {
              "name": "--calcite-autocomplete-input-actions-icon-color",
              "description": "Specifies the icon color of Input's `clearable` element."
            },
            {
              "name": "--calcite-autocomplete-input-actions-icon-color-hover",
              "description": "Specifies the icon color of Input's `clearable` element when hovered."
            },
            {
              "name": "--calcite-autocomplete-input-actions-icon-color-press",
              "description": "Specifies the icon color of Input's `clearable` element when pressed."
            },
            {
              "name": "--calcite-autocomplete-input-loading-background-color",
              "description": "Specifies the background color of the Input's `loading` element, when present."
            },
            {
              "name": "--calcite-autocomplete-input-loading-fill-color",
              "description": "Specifies the fill color of the Input's `loading` element, when present."
            },
            {
              "name": "--calcite-autocomplete-input-prefix-background-color",
              "description": "Specifies the background color of the Input's prefix, when present."
            },
            {
              "name": "--calcite-autocomplete-input-prefix-text-color",
              "description": "Specifies the text color of the Input's prefix, when present."
            },
            {
              "name": "--calcite-autocomplete-input-suffix-background-color",
              "description": "Specifies the background color of the Input's suffix, when present."
            },
            {
              "name": "--calcite-autocomplete-input-suffix-text-color",
              "description": "Specifies the text color of the Input's suffix, when present."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-autocomplete",
          "declaration": {
            "name": "Autocomplete",
            "module": "src/components/autocomplete/autocomplete.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/autocomplete-item/autocomplete-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "AutocompleteItem",
          "tagName": "calcite-autocomplete-item",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteAutocompleteItem",
          "importPath": "components/calcite-autocomplete-item",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst autocompleteItem = document.querySelector(\"calcite-autocomplete-item\");\ndocument.body.append(autocompleteItem);\nawait autocompleteItem.componentOnReady();\nconsole.log(\"calcite-autocomplete-item is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description for the component. Displays below the label text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "Specifies heading text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "description",
              "description": "A description for the component. Displays below the label text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "heading",
              "description": "Specifies heading text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "icon-end",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconEnd"
            },
            {
              "name": "icon-flip-rtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteAutocompleteItemSelect",
              "description": "Fires when the item has been selected.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "content-end",
              "description": "A slot for adding non-actionable elements after content of the component."
            },
            {
              "name": "content-start",
              "description": "A slot for adding non-actionable elements before content of the component."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-autocomplete-background-color",
              "description": "Specifies the background color of the component."
            },
            {
              "name": "--calcite-autocomplete-description-text-color",
              "description": "Specifies the text color of the component's description."
            },
            {
              "name": "--calcite-autocomplete-heading-text-color",
              "description": "Specifies the text color of the component's heading."
            },
            {
              "name": "--calcite-autocomplete-text-color",
              "description": "Specifies the text color of the component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-autocomplete-item",
          "declaration": {
            "name": "AutocompleteItem",
            "module": "src/components/autocomplete-item/autocomplete-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/autocomplete-item-group/autocomplete-item-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "AutocompleteItemGroup",
          "tagName": "calcite-autocomplete-item-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteAutocompleteItemGroup",
          "importPath": "components/calcite-autocomplete-item-group",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst autocompleteItemGroup = document.querySelector(\"calcite-autocomplete-item-group\");\ndocument.body.append(autocompleteItemGroup);\nawait autocompleteItemGroup.componentOnReady();\nconsole.log(\"calcite-autocomplete-item-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "Specifies heading text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Specifies the position of the group in the autocomplete menu.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "position",
              "docsTags": [
                {
                  "name": "internal"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "heading",
              "description": "Specifies heading text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "position",
              "description": "Specifies the position of the group in the autocomplete menu.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "position"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-autocomplete-item`s."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-autocomplete-background-color",
              "description": "Specifies the background color of the component."
            },
            {
              "name": "--calcite-autocomplete-border-color",
              "description": "Specifies the border color of the component."
            },
            {
              "name": "--calcite-autocomplete-text-color",
              "description": "Specifies the text color of the component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-autocomplete-item-group",
          "declaration": {
            "name": "AutocompleteItemGroup",
            "module": "src/components/autocomplete-item-group/autocomplete-item-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/avatar/avatar.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Avatar",
          "tagName": "calcite-avatar",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteAvatar",
          "importPath": "components/calcite-avatar",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst avatar = document.querySelector(\"calcite-avatar\");\ndocument.body.append(avatar);\nawait avatar.componentOnReady();\nconsole.log(\"calcite-avatar is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "fullName",
              "description": "Specifies the full name of the user. When `label` and `thumbnail` are not defined, specifies the accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "full-name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Specifies alternative text when `thumbnail` is defined, otherwise specifies an accessible label.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "thumbnail",
              "description": "Specifies the `src` to an image (remember to add a token if the user is private).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "thumbnail",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "userId",
              "description": "Specifies the unique id of the user.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "user-id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "username",
              "description": "Specifies the username of the user.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "username",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "full-name",
              "description": "Specifies the full name of the user. When `label` and `thumbnail` are not defined, specifies the accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "fullName"
            },
            {
              "name": "label",
              "description": "Specifies alternative text when `thumbnail` is defined, otherwise specifies an accessible label.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "thumbnail",
              "description": "Specifies the `src` to an image (remember to add a token if the user is private).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "thumbnail"
            },
            {
              "name": "user-id",
              "description": "Specifies the unique id of the user.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "userId"
            },
            {
              "name": "username",
              "description": "Specifies the username of the user.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "username"
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-avatar-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-avatar-color",
              "description": "Specifies the component's icon or initial color."
            },
            {
              "name": "--calcite-avatar-background-color",
              "description": "Specifies the component's background color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-avatar",
          "declaration": {
            "name": "Avatar",
            "module": "src/components/avatar/avatar.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/block/block.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Block",
          "tagName": "calcite-block",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteBlock",
          "importPath": "components/calcite-block",
          "members": [
            {
              "kind": "field",
              "name": "collapsible",
              "description": "When `true`, the component is collapsible.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "collapsible",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst block = document.querySelector(\"calcite-block\");\ndocument.body.append(block);\nawait block.componentOnReady();\nconsole.log(\"calcite-block is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description for the component, which displays below the heading.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dragDisabled",
              "description": "When `true`, and a parent Block Group is `dragEnabled`, the component is not draggable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "drag-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dragHandle",
              "description": "When `true`, the component displays a draggable button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "deprecated": "No longer necessary. Use Block Group for draggable functionality.",
              "attribute": "drag-handle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Specifies an accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuFlipPlacements",
              "description": "Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.",
              "type": {
                "text": "Array<\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\">",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "menuPlacement",
              "description": "Determines where the action menu will be positioned.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-end\"",
              "attribute": "menu-placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "deprecated": "Use `expanded` prop instead.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first tabbable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "sortHandleOpen",
              "description": "When `true`, displays and positions the sort handle.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "sort-handle-open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Displays a status-related indicator icon.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "deprecated": "Use `icon-start` instead.",
              "attribute": "status",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "collapsible",
              "description": "When `true`, the component is collapsible.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "collapsible"
            },
            {
              "name": "description",
              "description": "A description for the component, which displays below the heading.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "drag-disabled",
              "description": "When `true`, and a parent Block Group is `dragEnabled`, the component is not draggable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "dragDisabled"
            },
            {
              "name": "drag-handle",
              "description": "When `true`, the component displays a draggable button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "dragHandle",
              "deprecated": "No longer necessary. Use Block Group for draggable functionality."
            },
            {
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "heading-level",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "icon-end",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconEnd"
            },
            {
              "name": "icon-flip-rtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            },
            {
              "name": "label",
              "description": "Specifies an accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "menu-placement",
              "description": "Determines where the action menu will be positioned.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-end\"",
              "fieldName": "menuPlacement"
            },
            {
              "name": "open",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open",
              "deprecated": "Use `expanded` prop instead."
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "sort-handle-open",
              "description": "When `true`, displays and positions the sort handle.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "sortHandleOpen"
            },
            {
              "name": "status",
              "description": "Displays a status-related indicator icon.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "status",
              "deprecated": "Use `icon-start` instead."
            }
          ],
          "events": [
            {
              "name": "calciteBlockBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockSortHandleBeforeClose",
              "description": "Fires when the sort handle is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockSortHandleBeforeOpen",
              "description": "Fires when the sort handle is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockSortHandleClose",
              "description": "Fires when the sort handle is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockSortHandleOpen",
              "description": "Fires when the sort handle is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockToggle",
              "description": "Fires when the component's header is clicked.",
              "type": {
                "text": "void"
              },
              "deprecated": "Use `openClose` events such as `calciteBlockOpen`, `calciteBlockClose`, `calciteBlockBeforeOpen`, and `calciteBlockBeforeClose` instead.",
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content."
            },
            {
              "name": "actions-end",
              "description": "A slot for adding actionable `calcite-action` elements after the content of the component. It is recommended to use two or fewer actions."
            },
            {
              "name": "icon",
              "description": "[Deprecated] A slot for adding a leading header icon with `calcite-icon`. Use `icon-start` instead."
            },
            {
              "name": "content-start",
              "description": "A slot for adding non-actionable elements before content of the component."
            },
            {
              "name": "control",
              "description": "[Deprecated] A slot for adding a single HTML input element in a header. Use `actions-end` instead."
            },
            {
              "name": "header-menu-actions",
              "description": "A slot for adding an overflow menu with `calcite-action`s inside a dropdown menu."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-block-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-block-content-space",
              "description": "Specifies the space of the component's `default` slot."
            },
            {
              "name": "--calcite-block-header-background-color",
              "description": "Specifies the component's `heading` background color."
            },
            {
              "name": "--calcite-block-header-background-color-hover",
              "description": "Specifies the component's `heading` background color when hovered."
            },
            {
              "name": "--calcite-block-header-background-color-press",
              "description": "Specifies the component's `heading` background color when pressed."
            },
            {
              "name": "--calcite-block-heading-text-color",
              "description": "Specifies the component's `heading` text color."
            },
            {
              "name": "--calcite-block-heading-text-color-press",
              "description": "[Deprecated]  use `--calcite-block-heading-text-color` instead - When the component is `expanded`, specifies the `heading` text color."
            },
            {
              "name": "--calcite-block-padding",
              "description": "[Deprecated] use `--calcite-block-content-space` instead - Specifies the padding of the component's `default` slot."
            },
            {
              "name": "--calcite-block-text-color",
              "description": "[Deprecated] Specifies the component's text color."
            },
            {
              "name": "--calcite-block-description-text-color",
              "description": "Specifies the component's `description` text color."
            },
            {
              "name": "--calcite-block-icon-color",
              "description": "Specifies the component's `collapsible` icon, `iconStart` and `iconEnd` color."
            },
            {
              "name": "--calcite-block-icon-color-hover",
              "description": "Specifies the component's `collapsible` icon color when hovered."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-block",
          "declaration": {
            "name": "Block",
            "module": "src/components/block/block.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/block-group/block-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "BlockGroup",
          "tagName": "calcite-block-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteBlockGroup",
          "importPath": "components/calcite-block-group",
          "members": [
            {
              "kind": "field",
              "name": "canPull",
              "description": "When provided, the method will be called to determine whether the element can move from the component.",
              "type": {
                "text": "(detail: BlockDragDetail) => boolean | \"clone\"",
                "references": [
                  {
                    "name": "BlockDragDetail",
                    "module": "docs/components/block-group/interfaces.d.ts",
                    "start": 9,
                    "end": 24
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "canPut",
              "description": "When provided, the method will be called to determine whether the element can be added from another component.",
              "type": {
                "text": "(detail: BlockDragDetail) => boolean",
                "references": [
                  {
                    "name": "BlockDragDetail",
                    "module": "docs/components/block-group/interfaces.d.ts",
                    "start": 9,
                    "end": 24
                  }
                ]
              }
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst blockGroup = document.querySelector(\"calcite-block-group\");\ndocument.body.append(blockGroup);\nawait blockGroup.componentOnReady();\nconsole.log(\"calcite-block-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dragEnabled",
              "description": "When `true`, `calcite-block`s are sortable via a draggable button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "drag-enabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "group",
              "description": "The block-group's group identifier.\n\nTo drag elements from one group into another, both groups must have the same group value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "group",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Specifies an accessible name for the component.\n\nWhen `dragEnabled` is `true` and multiple group sorting is enabled with `group`, specifies the component's name for dragging between groups.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                },
                {
                  "name": "returns"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "sortDisabled",
              "description": "When `true`, and a `group` is defined, `calcite-block`s are no longer sortable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "sort-disabled",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "drag-enabled",
              "description": "When `true`, `calcite-block`s are sortable via a draggable button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "dragEnabled"
            },
            {
              "name": "group",
              "description": "The block-group's group identifier.\n\nTo drag elements from one group into another, both groups must have the same group value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "group"
            },
            {
              "name": "label",
              "description": "Specifies an accessible name for the component.\n\nWhen `dragEnabled` is `true` and multiple group sorting is enabled with `group`, specifies the component's name for dragging between groups.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "sort-disabled",
              "description": "When `true`, and a `group` is defined, `calcite-block`s are no longer sortable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "sortDisabled"
            }
          ],
          "events": [
            {
              "name": "calciteBlockGroupDragEnd",
              "description": "Fires when the component's dragging has ended.",
              "type": {
                "text": "BlockDragDetail",
                "references": [
                  {
                    "name": "BlockDragDetail",
                    "module": "docs/components/block-group/interfaces.d.ts",
                    "start": 0,
                    "end": 15
                  }
                ]
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockGroupDragStart",
              "description": "Fires when the component's dragging has started.",
              "type": {
                "text": "BlockDragDetail",
                "references": [
                  {
                    "name": "BlockDragDetail",
                    "module": "docs/components/block-group/interfaces.d.ts",
                    "start": 0,
                    "end": 15
                  }
                ]
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockGroupMoveHalt",
              "description": "Fires when a user attempts to move an element using the sort menu and 'canPut' or 'canPull' returns falsy.",
              "type": {
                "text": "BlockDragDetail",
                "references": [
                  {
                    "name": "BlockDragDetail",
                    "module": "docs/components/block-group/interfaces.d.ts",
                    "start": 0,
                    "end": 15
                  }
                ]
              },
              "deprecated": "No longer necessary.",
              "cancelable": false
            },
            {
              "name": "calciteBlockGroupOrderChange",
              "description": "Fires when the component's item order changes.",
              "type": {
                "text": "BlockDragDetail",
                "references": [
                  {
                    "name": "BlockDragDetail",
                    "module": "docs/components/block-group/interfaces.d.ts",
                    "start": 0,
                    "end": 15
                  }
                ]
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-block` elements."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-block-group",
          "declaration": {
            "name": "BlockGroup",
            "module": "src/components/block-group/block-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/block-section/block-section.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "BlockSection",
          "tagName": "calcite-block-section",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteBlockSection",
          "importPath": "components/calcite-block-section",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst blockSection = document.querySelector(\"calcite-block-section\");\ndocument.body.append(blockSection);\nawait blockSection.componentOnReady();\nconsole.log(\"calcite-block-section is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "deprecated": "Use `expanded` prop instead.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first tabbable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Displays a status-related indicator icon.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "deprecated": "Use `icon-start` instead.",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "toggleDisplay",
              "description": "Specifies how the component's toggle is displayed, where:\n\n`\"button\"` sets the toggle to a selectable header, and\n\n`\"switch\"` sets the toggle to a switch.",
              "type": {
                "text": "\"button\" | \"switch\"",
                "values": [
                  {
                    "value": "button",
                    "type": "string"
                  },
                  {
                    "value": "switch",
                    "type": "string"
                  }
                ]
              },
              "default": "\"button\"",
              "attribute": "toggle-display",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "icon-end",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconEnd"
            },
            {
              "name": "icon-flip-rtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            },
            {
              "name": "open",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open",
              "deprecated": "Use `expanded` prop instead."
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Displays a status-related indicator icon.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "status",
              "deprecated": "Use `icon-start` instead."
            },
            {
              "name": "text",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "text"
            },
            {
              "name": "toggle-display",
              "description": "Specifies how the component's toggle is displayed, where:\n\n`\"button\"` sets the toggle to a selectable header, and\n\n`\"switch\"` sets the toggle to a switch.",
              "type": {
                "text": "\"button\" | \"switch\"",
                "values": [
                  {
                    "value": "button",
                    "type": "string"
                  },
                  {
                    "value": "switch",
                    "type": "string"
                  }
                ]
              },
              "default": "\"button\"",
              "fieldName": "toggleDisplay"
            }
          ],
          "events": [
            {
              "name": "calciteBlockSectionCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockSectionExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteBlockSectionToggle",
              "description": "Fires when the header has been clicked.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-block-section-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-block-section-border-color",
              "description": "Specifies the component's border color. When `expanded`, applies to the component's bottom border."
            },
            {
              "name": "--calcite-block-section-header-text-color",
              "description": "Specifies the component's header text color."
            },
            {
              "name": "--calcite-block-section-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-block-section-text-color-hover",
              "description": "Specifies the component's text color on hover."
            },
            {
              "name": "--calcite-block-section-content-space",
              "description": "Specifies the padding of the component's content in `default` slot."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-block-section",
          "declaration": {
            "name": "BlockSection",
            "module": "src/components/block-section/block-section.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/button/button.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Button",
          "tagName": "calcite-button",
          "description": "Passing a 'href' will render an anchor link, instead of a button. Role will be set to link, or button, depending on this.\n\nIt is the consumers responsibility to add aria information, rel, target, for links, and any button attributes for form submission",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteButton",
          "importPath": "components/calcite-button",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the alignment of the component's elements.",
              "type": {
                "text": "\"center\" | \"end\" | \"icon-end-space-between\" | \"icon-start-space-between\" | \"space-between\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "icon-end-space-between",
                    "type": "string"
                  },
                  {
                    "value": "icon-start-space-between",
                    "type": "string"
                  },
                  {
                    "value": "space-between",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"center\"",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline\" | \"outline-fill\" | \"solid\" | \"transparent\"",
                "values": [
                  {
                    "value": "outline",
                    "type": "string"
                  },
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  },
                  {
                    "value": "transparent",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst button = document.querySelector(\"calcite-button\");\ndocument.body.append(button);\nawait button.componentOnReady();\nconsole.log(\"calcite-button is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "download",
              "description": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value:\nWithout a value, the browser will suggest a filename/extension.",
              "type": {
                "text": "boolean | string",
                "values": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "false",
              "attribute": "download",
              "reflects": true,
              "docsTags": [
                {
                  "name": "see",
                  "text": "[Global download attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download)."
                }
              ]
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "description": "Specifies the URL of the linked resource, which can be set as an absolute or relative path.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to the border and background if applicable.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "inverse",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"brand\"",
              "attribute": "kind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rel",
              "description": "Defines the relationship between the `href` value and the current document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "rel",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "round",
              "description": "When `true`, adds a round style to the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "round",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "splitChild",
              "description": "Specifies if the component is a child of a `calcite-split-button`.",
              "type": {
                "text": "\"primary\" | \"secondary\" | boolean",
                "values": [
                  {
                    "value": "primary",
                    "type": "string"
                  },
                  {
                    "value": "secondary",
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "split-child",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "target",
              "description": "Specifies where to open the linked document defined in the `href` property.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "target",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Specifies the default behavior of the component.",
              "type": {
                "text": "\"button\" | \"reset\" | \"submit\"",
                "values": [
                  {
                    "value": "button",
                    "type": "string"
                  },
                  {
                    "value": "reset",
                    "type": "string"
                  },
                  {
                    "value": "submit",
                    "type": "string"
                  }
                ]
              },
              "default": "\"button\"",
              "attribute": "type",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Specifies the width of the component. [Deprecated] The `\"half\"` value is deprecated, use `\"full\"` instead.",
              "type": {
                "text": "\"auto\" | \"full\" | \"half\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  },
                  {
                    "value": "half",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "width",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "description": "Specifies the alignment of the component's elements.",
              "type": {
                "text": "\"center\" | \"end\" | \"icon-end-space-between\" | \"icon-start-space-between\" | \"space-between\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "icon-end-space-between",
                    "type": "string"
                  },
                  {
                    "value": "icon-start-space-between",
                    "type": "string"
                  },
                  {
                    "value": "space-between",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"center\"",
              "fieldName": "alignment"
            },
            {
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline\" | \"outline-fill\" | \"solid\" | \"transparent\"",
                "values": [
                  {
                    "value": "outline",
                    "type": "string"
                  },
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  },
                  {
                    "value": "transparent",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "fieldName": "appearance"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "download",
              "description": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value:\nWithout a value, the browser will suggest a filename/extension.",
              "type": {
                "text": "boolean | string",
                "values": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "false",
              "fieldName": "download"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "href",
              "description": "Specifies the URL of the linked resource, which can be set as an absolute or relative path.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "href"
            },
            {
              "name": "icon-end",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconEnd"
            },
            {
              "name": "icon-flip-rtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            },
            {
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to the border and background if applicable.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "inverse",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"brand\"",
              "fieldName": "kind"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "rel",
              "description": "Defines the relationship between the `href` value and the current document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "rel"
            },
            {
              "name": "round",
              "description": "When `true`, adds a round style to the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "round"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "split-child",
              "description": "Specifies if the component is a child of a `calcite-split-button`.",
              "type": {
                "text": "\"primary\" | \"secondary\" | boolean",
                "values": [
                  {
                    "value": "primary",
                    "type": "string"
                  },
                  {
                    "value": "secondary",
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "splitChild"
            },
            {
              "name": "target",
              "description": "Specifies where to open the linked document defined in the `href` property.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "target"
            },
            {
              "name": "type",
              "description": "Specifies the default behavior of the component.",
              "type": {
                "text": "\"button\" | \"reset\" | \"submit\"",
                "values": [
                  {
                    "value": "button",
                    "type": "string"
                  },
                  {
                    "value": "reset",
                    "type": "string"
                  },
                  {
                    "value": "submit",
                    "type": "string"
                  }
                ]
              },
              "default": "\"button\"",
              "fieldName": "type"
            },
            {
              "name": "width",
              "description": "Specifies the width of the component. [Deprecated] The `\"half\"` value is deprecated, use `\"full\"` instead.",
              "type": {
                "text": "\"auto\" | \"full\" | \"half\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  },
                  {
                    "value": "half",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "width"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding text."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-button-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-button-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-button-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-button-icon-color",
              "description": "Specifies the component's `iconStart` and `iconEnd` color."
            },
            {
              "name": "--calcite-button-loader-color",
              "description": "Specifies the component's loader color."
            },
            {
              "name": "--calcite-button-shadow-color",
              "description": "[Deprecated] Use `--calcite-button-shadow`. Specifies the component's box-shadow color."
            },
            {
              "name": "--calcite-button-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-button-shadow",
              "description": "Specifies the component's shadow."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-button",
          "declaration": {
            "name": "Button",
            "module": "src/components/button/button.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card/card.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Card",
          "tagName": "calcite-card",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteCard",
          "importPath": "components/calcite-card",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst card = document.querySelector(\"calcite-card\");\ndocument.body.append(card);\nawait card.componentOnReady();\nconsole.log(\"calcite-card is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "selectable",
              "description": "When `true`, the component is selectable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "deprecated": "use `selectionMode` property on a parent `calcite-card-group` instead.",
              "attribute": "selectable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "thumbnailPosition",
              "description": "Sets the placement of the thumbnail defined in the `thumbnail` slot.",
              "type": {
                "text": "\"block-end\" | \"block-start\" | \"inline-end\" | \"inline-start\"",
                "values": [
                  {
                    "value": "block-end",
                    "type": "string"
                  },
                  {
                    "value": "block-start",
                    "type": "string"
                  },
                  {
                    "value": "inline-end",
                    "type": "string"
                  },
                  {
                    "value": "inline-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"block-start\"",
              "attribute": "thumbnail-position",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "selectable",
              "description": "When `true`, the component is selectable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selectable",
              "deprecated": "use `selectionMode` property on a parent `calcite-card-group` instead."
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "thumbnail-position",
              "description": "Sets the placement of the thumbnail defined in the `thumbnail` slot.",
              "type": {
                "text": "\"block-end\" | \"block-start\" | \"inline-end\" | \"inline-start\"",
                "values": [
                  {
                    "value": "block-end",
                    "type": "string"
                  },
                  {
                    "value": "block-start",
                    "type": "string"
                  },
                  {
                    "value": "inline-end",
                    "type": "string"
                  },
                  {
                    "value": "inline-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"block-start\"",
              "fieldName": "thumbnailPosition"
            }
          ],
          "events": [
            {
              "name": "calciteCardSelect",
              "description": "Fires when the deprecated `selectable` is true, or `selectionMode` set on parent `calcite-card-group` is not `none` and the component is selected.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding content."
            },
            {
              "name": "title",
              "description": "[Deprecated] use `heading` instead. A slot for adding a heading."
            },
            {
              "name": "subtitle",
              "description": "[Deprecated] use `description` instead. A slot for adding a description."
            },
            {
              "name": "thumbnail",
              "description": "A slot for adding a thumbnail."
            },
            {
              "name": "heading",
              "description": "A slot for adding a heading."
            },
            {
              "name": "description",
              "description": "A slot for adding a description."
            },
            {
              "name": "footer-start",
              "description": "A slot for adding a leading footer."
            },
            {
              "name": "footer-end",
              "description": "A slot for adding a trailing footer."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-card-accent-color-selected",
              "description": "Specifies the component's accent color when `selected`."
            },
            {
              "name": "--calcite-card-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-card-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-card-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-card-selection-background-color-active",
              "description": "[Deprecated] Use `--calcite-card-selection-background-color-press`. Specifies the component's selection element background color when active."
            },
            {
              "name": "--calcite-card-selection-background-color-hover",
              "description": "Specifies the component's selection element background color when hovered."
            },
            {
              "name": "--calcite-card-selection-background-color-press",
              "description": "Specifies the component's selection element background color when active."
            },
            {
              "name": "--calcite-card-selection-background-color-selected",
              "description": "[Deprecated] Use `--calcite-card-background-color`. Specifies the component's selection element icon color when `selected`."
            },
            {
              "name": "--calcite-card-selection-background-color",
              "description": "[Deprecated] Use `--calcite-card-background-color`. Specifies the component's selection element background color."
            },
            {
              "name": "--calcite-card-selection-color-hover",
              "description": "Specifies the component's selection element color when hovered or focused."
            },
            {
              "name": "--calcite-card-selection-color",
              "description": "Specifies the component's selection element color."
            },
            {
              "name": "--calcite-card-selection-icon-color-hover",
              "description": "[Deprecated] Use `--calcite-card-selection-color-hover`. Specifies the component's selection element icon color when hovered."
            },
            {
              "name": "--calcite-card-selection-icon-color-selected",
              "description": "[Deprecated] Use `--calcite-card-accent-color-selected`. Specifies the component's selection element icon color when `selected`."
            },
            {
              "name": "--calcite-card-selection-icon-color",
              "description": "[Deprecated] Use `--calcite-card-selection-color`. Specifies the component's selection element icon color."
            },
            {
              "name": "--calcite-card-shadow",
              "description": "Specifies the component's shadow."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-card",
          "declaration": {
            "name": "Card",
            "module": "src/components/card/card.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/card-group/card-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "CardGroup",
          "tagName": "calcite-card-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteCardGroup",
          "importPath": "components/calcite-card-group",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst cardGroup = document.querySelector(\"calcite-card-group\");\ndocument.body.append(cardGroup);\nawait cardGroup.componentOnReady();\nconsole.log(\"calcite-card-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "description": "Specifies the component's selected items.",
              "type": {
                "text": "Array<HTMLCalciteCardElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteCardElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 28
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "description": "Specifies the selection mode of the component.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "attribute": "selection-mode",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "selection-mode",
              "description": "Specifies the selection mode of the component.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "fieldName": "selectionMode"
            }
          ],
          "events": [
            {
              "name": "calciteCardGroupSelect",
              "description": "Emits when the component's selection changes and the `selectionMode` is not `none`.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding one or more `calcite-card`s."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-card-group-gap",
              "description": "[Deprecated] Use `--calcite-card-group-space`. Specifies the gap between slotted elements."
            },
            {
              "name": "--calcite-card-group-space",
              "description": "Specifies the space between slotted elements."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-card-group",
          "declaration": {
            "name": "CardGroup",
            "module": "src/components/card-group/card-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel/carousel.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Carousel",
          "tagName": "calcite-carousel",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteCarousel",
          "importPath": "components/calcite-carousel",
          "members": [
            {
              "kind": "field",
              "name": "arrowType",
              "description": "Specifies how and if the \"previous\" and \"next\" arrows are displayed.",
              "type": {
                "text": "\"edge\" | \"inline\" | \"none\"",
                "values": [
                  {
                    "value": "edge",
                    "type": "string"
                  },
                  {
                    "value": "inline",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  }
                ]
              },
              "default": "\"inline\"",
              "attribute": "arrow-type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autoplay",
              "description": "When `true`, the carousel will autoplay and controls will be displayed. When \"paused\" at time of initialization, the carousel will not autoplay, but controls will be displayed.",
              "type": {
                "text": "\"\" | \"paused\" | boolean",
                "values": [
                  {
                    "value": "",
                    "type": "string"
                  },
                  {
                    "value": "paused",
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "autoplay",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autoplayDuration",
              "description": "When `autoplay` is `true`, specifies in milliseconds the length of time to display each Carousel Item.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "6000",
              "attribute": "autoplay-duration",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst carousel = document.querySelector(\"calcite-carousel\");\ndocument.body.append(carousel);\nawait carousel.componentOnReady();\nconsole.log(\"calcite-carousel is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "controlOverlay",
              "description": "Specifies if the component's controls are positioned absolutely on top of slotted Carousel Items.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "control-overlay",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "method",
              "name": "play",
              "description": "Play the carousel. If `autoplay` is not enabled (initialized either to `true` or `\"paused\"`), these methods will have no effect.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "selectedItem",
              "description": "The component's selected `calcite-carousel-item`.",
              "type": {
                "text": "HTMLCalciteCarouselItemElement",
                "references": [
                  {
                    "name": "HTMLCalciteCarouselItemElement",
                    "module": "index.js",
                    "start": 0,
                    "end": 30
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "stop",
              "description": "Stop the carousel. If `autoplay` is not enabled (initialized either to `true` or `\"paused\"`), these methods will have no effect.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "arrow-type",
              "description": "Specifies how and if the \"previous\" and \"next\" arrows are displayed.",
              "type": {
                "text": "\"edge\" | \"inline\" | \"none\"",
                "values": [
                  {
                    "value": "edge",
                    "type": "string"
                  },
                  {
                    "value": "inline",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  }
                ]
              },
              "default": "\"inline\"",
              "fieldName": "arrowType"
            },
            {
              "name": "autoplay",
              "description": "When `true`, the carousel will autoplay and controls will be displayed. When \"paused\" at time of initialization, the carousel will not autoplay, but controls will be displayed.",
              "type": {
                "text": "\"\" | \"paused\" | boolean",
                "values": [
                  {
                    "value": "",
                    "type": "string"
                  },
                  {
                    "value": "paused",
                    "type": "string"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "autoplay"
            },
            {
              "name": "autoplay-duration",
              "description": "When `autoplay` is `true`, specifies in milliseconds the length of time to display each Carousel Item.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "6000",
              "fieldName": "autoplayDuration"
            },
            {
              "name": "control-overlay",
              "description": "Specifies if the component's controls are positioned absolutely on top of slotted Carousel Items.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "controlOverlay"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            }
          ],
          "events": [
            {
              "name": "calciteCarouselChange",
              "description": "Fires when the selected `calcite-carousel-item` changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteCarouselPause",
              "description": "Fires when the carousel autoplay state pauses due to a user hovering over the component or focusing on the component or slotted content",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteCarouselPlay",
              "description": "Fires when the carousel autoplay is invoked by the user.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteCarouselResume",
              "description": "Fires when the carousel autoplay state resumes due to a user no longer hovering over the component or focusing on the component or slotted content",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteCarouselStop",
              "description": "Fires when the carousel autoplay state is stopped by a user.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-carousel-item`s."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-carousel",
          "declaration": {
            "name": "Carousel",
            "module": "src/components/carousel/carousel.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/carousel-item/carousel-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "CarouselItem",
          "tagName": "calcite-carousel-item",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteCarouselItem",
          "importPath": "components/calcite-carousel-item",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst carouselItem = document.querySelector(\"calcite-carousel-item\");\ndocument.body.append(carouselItem);\nawait carouselItem.componentOnReady();\nconsole.log(\"calcite-carousel-item is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-carousel-item",
          "declaration": {
            "name": "CarouselItem",
            "module": "src/components/carousel-item/carousel-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/checkbox/checkbox.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Checkbox",
          "tagName": "calcite-checkbox",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteCheckbox",
          "importPath": "components/calcite-checkbox",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "description": "When `true`, the component is checked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst checkbox = document.querySelector(\"calcite-checkbox\");\ndocument.body.append(checkbox);\nawait checkbox.componentOnReady();\nconsole.log(\"calcite-checkbox is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "description": "When `true`, the component is initially indeterminate, which is independent from its `checked` value.\n\nThe state is visual only, and can look different across browsers.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "indeterminate",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[indeterminate](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "description": "When `true`, the component is checked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "indeterminate",
              "description": "When `true`, the component is initially indeterminate, which is independent from its `checked` value.\n\nThe state is visual only, and can look different across browsers.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "indeterminate"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteCheckboxChange",
              "description": "Fires when the component's `checked` status changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-checkbox-size",
              "description": "Specifies the component's height and width."
            },
            {
              "name": "--calcite-checkbox-border-color",
              "description": "Specifies the component's color."
            },
            {
              "name": "--calcite-checkbox-border-color-hover",
              "description": "Specifies the component's color when hovered."
            },
            {
              "name": "--calcite-checkbox-border-color-press",
              "description": "Specifies the component's color when pressed."
            },
            {
              "name": "--calcite-checkbox-icon-color",
              "description": "Specifies the component's icon color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "src/components/checkbox/checkbox.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chip/chip.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Chip",
          "tagName": "calcite-chip",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteChip",
          "importPath": "components/calcite-chip",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline\" | \"outline-fill\" | \"solid\"",
                "values": [
                  {
                    "value": "outline",
                    "type": "string"
                  },
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "description": "When `true`, a close button is added to the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closed",
              "description": "When `true`, hides the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closeOnDelete",
              "description": "When `true`, the component closes when the Delete or Backspace key is pressed while focused.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "close-on-delete",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst chip = document.querySelector(\"calcite-chip\");\ndocument.body.append(chip);\nawait chip.componentOnReady();\nconsole.log(\"calcite-chip is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to border and background if applicable.",
              "type": {
                "text": "\"brand\" | \"inverse\" | \"neutral\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "inverse",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"neutral\"",
              "attribute": "kind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component. When contained in a parent `calcite-chip-group` inherits the parent's `scale` value.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline\" | \"outline-fill\" | \"solid\"",
                "values": [
                  {
                    "value": "outline",
                    "type": "string"
                  },
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "fieldName": "appearance"
            },
            {
              "name": "closable",
              "description": "When `true`, a close button is added to the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closable"
            },
            {
              "name": "close-on-delete",
              "description": "When `true`, the component closes when the Delete or Backspace key is pressed while focused.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closeOnDelete"
            },
            {
              "name": "closed",
              "description": "When `true`, hides the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closed"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to border and background if applicable.",
              "type": {
                "text": "\"brand\" | \"inverse\" | \"neutral\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "inverse",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"neutral\"",
              "fieldName": "kind"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component. When contained in a parent `calcite-chip-group` inherits the parent's `scale` value.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteChipClose",
              "description": "Fires when the component's close button is selected.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteChipSelect",
              "description": "Fires when the selected state of the component changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding text."
            },
            {
              "name": "image",
              "description": "A slot for adding an image."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-chip-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-chip-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-chip-close-icon-color",
              "description": "Specifies the component's close element icon color."
            },
            {
              "name": "--calcite-chip-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-chip-icon-color",
              "description": "Specifies the component's icon color."
            },
            {
              "name": "--calcite-chip-select-icon-color-press",
              "description": "Specifies the component's selection element icon color when active."
            },
            {
              "name": "--calcite-chip-select-icon-color-pressed",
              "description": "[Deprecated] Use `--calcite-chip-select-icon-color-press`. Specifies the component's selection element icon color when active."
            },
            {
              "name": "--calcite-chip-select-icon-color",
              "description": "Specifies the component's selection element icon color."
            },
            {
              "name": "--calcite-chip-text-color",
              "description": "Specifies the component's text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-chip",
          "declaration": {
            "name": "Chip",
            "module": "src/components/chip/chip.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/chip-group/chip-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ChipGroup",
          "tagName": "calcite-chip-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteChipGroup",
          "importPath": "components/calcite-chip-group",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst chipGroup = document.querySelector(\"calcite-chip-group\");\ndocument.body.append(chipGroup);\nawait chipGroup.componentOnReady();\nconsole.log(\"calcite-chip-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component. Child `calcite-chip`s inherit the component's value.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "description": "Specifies the component's selected items.",
              "type": {
                "text": "Array<HTMLCalciteChipElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteChipElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 28
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection,\n\n`\"single-persist\"` allows one selection and prevents de-selection, and\n\n`\"none\"` does not allow any selections.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "attribute": "selection-mode",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component. Child `calcite-chip`s inherit the component's value.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selection-mode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection,\n\n`\"single-persist\"` allows one selection and prevents de-selection, and\n\n`\"none\"` does not allow any selections.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "fieldName": "selectionMode"
            }
          ],
          "events": [
            {
              "name": "calciteChipGroupSelect",
              "description": "Fires when the component's selection changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding one or more `calcite-chip`s."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-chip-group",
          "declaration": {
            "name": "ChipGroup",
            "module": "src/components/chip-group/chip-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/color-picker/color-picker.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ColorPicker",
          "tagName": "calcite-color-picker",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteColorPicker",
          "importPath": "components/calcite-color-picker",
          "members": [
            {
              "kind": "field",
              "name": "allowEmpty",
              "description": "When `true`, an empty color (`null`) will be allowed as a `value`.\n\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "deprecated": "Use `clearable` instead",
              "attribute": "allow-empty",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alphaChannel",
              "description": "When `true`, the component will allow updates to the color's alpha value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "alpha-channel"
            },
            {
              "kind": "field",
              "name": "channelsDisabled",
              "description": "When `true`, hides the RGB/HSV channel inputs.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "channels-disabled"
            },
            {
              "kind": "field",
              "name": "clearable",
              "description": "When `true`, an empty color (`null`) will be allowed as a `value`.\n\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "clearable",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst colorPicker = document.querySelector(\"calcite-color-picker\");\ndocument.body.append(colorPicker);\nawait colorPicker.componentOnReady();\nconsole.log(\"calcite-color-picker is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fieldDisabled",
              "description": "When `true`, hides the color field.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "field-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "format",
              "description": "The format of `value`.\n\nWhen `\"auto\"`, the format will be inferred from `value` when set.",
              "type": {
                "text": "\"auto\" | \"hex\" | \"hexa\" | \"hsl\" | \"hsl-css\" | \"hsla\" | \"hsla-css\" | \"hsv\" | \"hsva\" | \"rgb\" | \"rgb-css\" | \"rgba\" | \"rgba-css\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "hex",
                    "type": "string"
                  },
                  {
                    "value": "hexa",
                    "type": "string"
                  },
                  {
                    "value": "hsl",
                    "type": "string"
                  },
                  {
                    "value": "hsl-css",
                    "type": "string"
                  },
                  {
                    "value": "hsla",
                    "type": "string"
                  },
                  {
                    "value": "hsla-css",
                    "type": "string"
                  },
                  {
                    "value": "hsv",
                    "type": "string"
                  },
                  {
                    "value": "hsva",
                    "type": "string"
                  },
                  {
                    "value": "rgb",
                    "type": "string"
                  },
                  {
                    "value": "rgb-css",
                    "type": "string"
                  },
                  {
                    "value": "rgba",
                    "type": "string"
                  },
                  {
                    "value": "rgba-css",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "format",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hexDisabled",
              "description": "When `true`, hides the hex input.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "hex-disabled"
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "savedDisabled",
              "description": "When `true`, hides the saved colors section.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "saved-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "storageId",
              "description": "Specifies the storage ID for colors.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "storage-id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.\n\nThe type will be preserved as the color is updated.",
              "type": {
                "text": "(HSL & ObjectWithAlpha) | (HSV & ObjectWithAlpha) | (RGB & ObjectWithAlpha) | HSL | HSV | RGB | string",
                "references": [
                  {
                    "name": "HSL",
                    "module": "docs/components/color-picker/interfaces.d.ts",
                    "start": 1,
                    "end": 4
                  },
                  {
                    "name": "ObjectWithAlpha",
                    "module": "docs/components/color-picker/interfaces.d.ts",
                    "start": 7,
                    "end": 22
                  },
                  {
                    "name": "HSV",
                    "module": "docs/components/color-picker/interfaces.d.ts",
                    "start": 27,
                    "end": 30
                  },
                  {
                    "name": "ObjectWithAlpha",
                    "module": "docs/components/color-picker/interfaces.d.ts",
                    "start": 33,
                    "end": 48
                  },
                  {
                    "name": "RGB",
                    "module": "docs/components/color-picker/interfaces.d.ts",
                    "start": 53,
                    "end": 56
                  },
                  {
                    "name": "ObjectWithAlpha",
                    "module": "docs/components/color-picker/interfaces.d.ts",
                    "start": 59,
                    "end": 74
                  },
                  {
                    "name": "HSL",
                    "module": "docs/components/color-picker/interfaces.d.ts",
                    "start": 78,
                    "end": 81
                  },
                  {
                    "name": "HSV",
                    "module": "docs/components/color-picker/interfaces.d.ts",
                    "start": 84,
                    "end": 87
                  },
                  {
                    "name": "RGB",
                    "module": "docs/components/color-picker/interfaces.d.ts",
                    "start": 90,
                    "end": 93
                  }
                ],
                "values": [
                  {
                    "type": "(HSL & ObjectWithAlpha)"
                  },
                  {
                    "type": "(HSV & ObjectWithAlpha)"
                  },
                  {
                    "type": "(RGB & ObjectWithAlpha)"
                  },
                  {
                    "type": "HSL"
                  },
                  {
                    "type": "HSV"
                  },
                  {
                    "type": "RGB"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value",
              "docsTags": [
                {
                  "name": "see",
                  "text": "[CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color),"
                },
                {
                  "name": "see",
                  "text": "[ColorValue](https://github.com/Esri/calcite-design-system/blob/dev/packages/calcite-components/src/components/color-picker/interfaces.ts#L10)."
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "allow-empty",
              "description": "When `true`, an empty color (`null`) will be allowed as a `value`.\n\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "allowEmpty",
              "deprecated": "Use `clearable` instead"
            },
            {
              "name": "alpha-channel",
              "description": "When `true`, the component will allow updates to the color's alpha value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "alphaChannel"
            },
            {
              "name": "channels-disabled",
              "description": "When `true`, hides the RGB/HSV channel inputs.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "channelsDisabled"
            },
            {
              "name": "clearable",
              "description": "When `true`, an empty color (`null`) will be allowed as a `value`.\n\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "clearable"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "field-disabled",
              "description": "When `true`, hides the color field.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "fieldDisabled"
            },
            {
              "name": "format",
              "description": "The format of `value`.\n\nWhen `\"auto\"`, the format will be inferred from `value` when set.",
              "type": {
                "text": "\"auto\" | \"hex\" | \"hexa\" | \"hsl\" | \"hsl-css\" | \"hsla\" | \"hsla-css\" | \"hsv\" | \"hsva\" | \"rgb\" | \"rgb-css\" | \"rgba\" | \"rgba-css\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "hex",
                    "type": "string"
                  },
                  {
                    "value": "hexa",
                    "type": "string"
                  },
                  {
                    "value": "hsl",
                    "type": "string"
                  },
                  {
                    "value": "hsl-css",
                    "type": "string"
                  },
                  {
                    "value": "hsla",
                    "type": "string"
                  },
                  {
                    "value": "hsla-css",
                    "type": "string"
                  },
                  {
                    "value": "hsv",
                    "type": "string"
                  },
                  {
                    "value": "hsva",
                    "type": "string"
                  },
                  {
                    "value": "rgb",
                    "type": "string"
                  },
                  {
                    "value": "rgb-css",
                    "type": "string"
                  },
                  {
                    "value": "rgba",
                    "type": "string"
                  },
                  {
                    "value": "rgba-css",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "format"
            },
            {
              "name": "hex-disabled",
              "description": "When `true`, hides the hex input.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "hexDisabled"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "saved-disabled",
              "description": "When `true`, hides the saved colors section.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "savedDisabled"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "storage-id",
              "description": "Specifies the storage ID for colors.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "storageId"
            },
            {
              "name": "value",
              "description": "The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.\n\nThe type will be preserved as the color is updated.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteColorPickerChange",
              "description": "Fires when the color value has changed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteColorPickerInput",
              "description": "Fires as the color value changes.\n\nSimilar to the `calciteColorPickerChange` event with the exception of dragging. When dragging the color field or hue slider thumb, this event fires as the thumb is moved.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-color-picker-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-color-picker-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-color-picker-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-color-picker-shadow",
              "description": "Specifies the component's shadow."
            },
            {
              "name": "--calcite-color-picker-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-color-picker-input-background-color",
              "description": "Specifies the component's input background color."
            },
            {
              "name": "--calcite-color-picker-input-border-color",
              "description": "Specifies the component's input border color."
            },
            {
              "name": "--calcite-color-picker-input-text-color",
              "description": "Specifies the component's input text color."
            },
            {
              "name": "--calcite-color-picker-input-prefix-background-color",
              "description": "When `hexDisabled` is not `true`, specifies the component's input prefix background color."
            },
            {
              "name": "--calcite-color-picker-input-prefix-text-color",
              "description": "When `hexDisabled` is not `true`, specifies the component's input prefix text color."
            },
            {
              "name": "--calcite-color-picker-input-suffix-background-color",
              "description": "When `alphaChannel` is `true`, specifies the component's input suffix background color."
            },
            {
              "name": "--calcite-color-picker-input-suffix-text-color",
              "description": "When `alphaChannel` is `true`, specifies the component's input suffix text color."
            },
            {
              "name": "--calcite-color-picker-tab-border-color",
              "description": "Specifies the component's tab border color."
            },
            {
              "name": "--calcite-color-picker-tab-text-color",
              "description": "Specifies the component's tab text color."
            },
            {
              "name": "--calcite-color-picker-tab-accent-color-press",
              "description": "Specifies the component's tab accent color when selected or active."
            },
            {
              "name": "--calcite-color-picker-swatch-corner-radius",
              "description": "Specifies the component's swatch corner radius."
            },
            {
              "name": "--calcite-color-picker-action-text-color-press",
              "description": "Specifies the component's `savedColors` action text color when pressed."
            },
            {
              "name": "--calcite-color-picker-action-text-color-hover",
              "description": "Specifies the component's `savedColors` action text color when hovered."
            },
            {
              "name": "--calcite-color-picker-action-text-color",
              "description": "Specifies the component's `savedColors` action text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-color-picker",
          "declaration": {
            "name": "ColorPicker",
            "module": "src/components/color-picker/color-picker.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/color-picker-hex-input/color-picker-hex-input.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ColorPickerHexInput",
          "tagName": "calcite-color-picker-hex-input",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteColorPickerHexInput",
          "importPath": "components/calcite-color-picker-hex-input",
          "members": [
            {
              "kind": "field",
              "name": "allowEmpty",
              "description": "When `true`, an empty color (`undefined`) will be allowed as a `value`.\n\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "allow-empty"
            },
            {
              "kind": "field",
              "name": "alphaChannel",
              "description": "When `true`, the component will allow updates to the color's alpha value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "alpha-channel"
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst colorPickerHexInput = document.querySelector(\"calcite-color-picker-hex-input\");\ndocument.body.append(colorPickerHexInput);\nawait colorPickerHexInput.componentOnReady();\nconsole.log(\"calcite-color-picker-hex-input is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "hexLabel",
              "description": "Specifies accessible label for the input field.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"Hex\"",
              "deprecated": "use `messages` instead",
              "attribute": "hex-label"
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system"
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The hex value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "allow-empty",
              "description": "When `true`, an empty color (`undefined`) will be allowed as a `value`.\n\nWhen `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "allowEmpty"
            },
            {
              "name": "alpha-channel",
              "description": "When `true`, the component will allow updates to the color's alpha value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "alphaChannel"
            },
            {
              "name": "hex-label",
              "description": "Specifies accessible label for the input field.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"Hex\"",
              "fieldName": "hexLabel",
              "deprecated": "use `messages` instead"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "value",
              "description": "The hex value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteColorPickerHexInputChange",
              "description": "Emitted when the hex value changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-color-picker-hex-input",
          "declaration": {
            "name": "ColorPickerHexInput",
            "module": "src/components/color-picker-hex-input/color-picker-hex-input.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/color-picker-swatch/color-picker-swatch.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ColorPickerSwatch",
          "tagName": "calcite-color-picker-swatch",
          "deprecated": "Use the `calcite-swatch-group` and `calcite-swatch` components instead.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteColorPickerSwatch",
          "importPath": "components/calcite-color-picker-swatch",
          "members": [
            {
              "kind": "field",
              "name": "active",
              "description": "When `true`, the component is active.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "color",
              "description": "The color value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "color",
              "docsTags": [
                {
                  "name": "see",
                  "text": "[Color CSS data type](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value)."
                }
              ]
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst colorPickerSwatch = document.querySelector(\"calcite-color-picker-swatch\");\ndocument.body.append(colorPickerSwatch);\nawait colorPickerSwatch.componentOnReady();\nconsole.log(\"calcite-color-picker-swatch is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "When `true`, the component is active.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "color",
              "description": "The color value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "color"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-color-picker-swatch",
          "declaration": {
            "name": "ColorPickerSwatch",
            "module": "src/components/color-picker-swatch/color-picker-swatch.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combobox/combobox.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Combobox",
          "tagName": "calcite-combobox",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteCombobox",
          "importPath": "components/calcite-combobox",
          "members": [
            {
              "kind": "field",
              "name": "allowCustomValues",
              "description": "When `true`, allows entry of custom values, which are not in the original set of items.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "allow-custom-values",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clearDisabled",
              "description": "When `true`, the value-clearing will be disabled.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "clear-disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst combobox = document.querySelector(\"calcite-combobox\");\ndocument.body.append(combobox);\nawait combobox.componentOnReady();\nconsole.log(\"calcite-combobox is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "description": "Specifies the component's filtered items.",
              "type": {
                "text": "Array<HTMLCalciteComboboxItemElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteComboboxItemElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 36
                  }
                ]
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "filterProps",
              "description": "Specifies the properties to match against when filtering. If not set, all properties will be matched (`description`, `label`, `metadata`, `shortHeading`).",
              "type": {
                "text": "Array<string>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "filterText",
              "description": "Text for the component's filter input field.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "filter-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flipPlacements",
              "description": "Specifies the component's fallback slotted content placement when it's initial placement has insufficient space available.",
              "type": {
                "text": "Array<\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\">",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "maxItems",
              "description": "Specifies the maximum number of `calcite-combobox-item`s (including nested children) to display before displaying a scrollbar.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "max-items",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Specifies the placeholder text for the input.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "placeholderIcon",
              "description": "Specifies the placeholder icon for the input.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "placeholder-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholderIconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "placeholder-icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "description": "When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "read-only",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Updates the position of the component.",
              "parameters": [
                {
                  "name": "delayed",
                  "default": "false",
                  "type": {
                    "text": "boolean",
                    "values": [
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "delayed Reposition the component after a delay"
                },
                {
                  "name": "returns",
                  "text": "Promise"
                }
              ],
              "signature": "(delayed?: boolean): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectAllEnabled",
              "description": "When `true` and `selectionMode` is `\"multiple\"` or `\"ancestors\"`, provides a checkbox for selecting all `calcite-combobox-item`s.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "select-all-enabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "description": "Specifies the component's selected items.",
              "type": {
                "text": "Array<HTMLCalciteComboboxItemElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteComboboxItemElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 36
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "selectionDisplay",
              "description": "When `selectionMode` is `\"ancestors\"` or `\"multiple\"`, specifies the display of multiple `calcite-combobox-item` selections, where:\n\n`\"all\"` displays all selections with individual `calcite-chip`s,\n\n`\"fit\"` displays individual `calcite-chip`s that scale to the component's size, including a non-closable `calcite-chip`, which provides the number of additional `calcite-combobox-item` selections not visually displayed, and\n\n`\"single\"` displays one `calcite-chip` with the total number of selections.",
              "type": {
                "text": "\"all\" | \"fit\" | \"single\"",
                "values": [
                  {
                    "value": "all",
                    "type": "string"
                  },
                  {
                    "value": "fit",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  }
                ]
              },
              "default": "\"all\"",
              "attribute": "selection-display",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection,\n\n`\"single-persist\"` allows one selection and prevents de-selection, and\n\n`\"ancestors\"` allows multiple selections, but shows ancestors of selected items as selected, with only deepest children shown in chips.",
              "type": {
                "text": "\"ancestors\" | \"multiple\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "ancestors",
                    "type": "string"
                  },
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"multiple\"",
              "attribute": "selection-mode",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value(s) from the selected `calcite-combobox-item`(s).",
              "type": {
                "text": "Array<string> | string",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ],
                "values": [
                  {
                    "type": "Array<string>"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "allow-custom-values",
              "description": "When `true`, allows entry of custom values, which are not in the original set of items.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "allowCustomValues"
            },
            {
              "name": "clear-disabled",
              "description": "When `true`, the value-clearing will be disabled.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "clearDisabled"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "filter-text",
              "description": "Text for the component's filter input field.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "filterText"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "max-items",
              "description": "Specifies the maximum number of `calcite-combobox-item`s (including nested children) to display before displaying a scrollbar.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "maxItems"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "placeholder",
              "description": "Specifies the placeholder text for the input.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "placeholder"
            },
            {
              "name": "placeholder-icon",
              "description": "Specifies the placeholder icon for the input.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "placeholderIcon"
            },
            {
              "name": "placeholder-icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "placeholderIconFlipRtl"
            },
            {
              "name": "read-only",
              "description": "When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "readOnly"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "select-all-enabled",
              "description": "When `true` and `selectionMode` is `\"multiple\"` or `\"ancestors\"`, provides a checkbox for selecting all `calcite-combobox-item`s.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selectAllEnabled"
            },
            {
              "name": "selection-display",
              "description": "When `selectionMode` is `\"ancestors\"` or `\"multiple\"`, specifies the display of multiple `calcite-combobox-item` selections, where:\n\n`\"all\"` displays all selections with individual `calcite-chip`s,\n\n`\"fit\"` displays individual `calcite-chip`s that scale to the component's size, including a non-closable `calcite-chip`, which provides the number of additional `calcite-combobox-item` selections not visually displayed, and\n\n`\"single\"` displays one `calcite-chip` with the total number of selections.",
              "type": {
                "text": "\"all\" | \"fit\" | \"single\"",
                "values": [
                  {
                    "value": "all",
                    "type": "string"
                  },
                  {
                    "value": "fit",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  }
                ]
              },
              "default": "\"all\"",
              "fieldName": "selectionDisplay"
            },
            {
              "name": "selection-mode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection,\n\n`\"single-persist\"` allows one selection and prevents de-selection, and\n\n`\"ancestors\"` allows multiple selections, but shows ancestors of selected items as selected, with only deepest children shown in chips.",
              "type": {
                "text": "\"ancestors\" | \"multiple\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "ancestors",
                    "type": "string"
                  },
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"multiple\"",
              "fieldName": "selectionMode"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The component's value(s) from the selected `calcite-combobox-item`(s).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteComboboxBeforeClose",
              "description": "Fires when the component is requested to be closed, and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteComboboxBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteComboboxChange",
              "description": "Fires when the selected item(s) changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteComboboxChipClose",
              "description": "Fires when a selected item in the component is closed via its `calcite-chip`.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteComboboxClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteComboboxFilterChange",
              "description": "Fires when text is added to filter the options list.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteComboboxOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-combobox-item`s."
            },
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-combobox-divider-color",
              "description": "Specifies the component's divider color."
            },
            {
              "name": "--calcite-combobox-icon-color",
              "description": "Specifies the component's icon color."
            },
            {
              "name": "--calcite-combobox-icon-color-hover",
              "description": "Specifies the component's icon color when hovered."
            },
            {
              "name": "--calcite-combobox-background-color",
              "description": "Specifies the background color of the component's listbox."
            },
            {
              "name": "--calcite-combobox-input-border-color",
              "description": "Specifies the border color of the component's input."
            },
            {
              "name": "--calcite-combobox-input-background-color",
              "description": "Specifies the background color of the component's input."
            },
            {
              "name": "--calcite-combobox-input-height",
              "description": "Specifies the height of the component's input."
            },
            {
              "name": "--calcite-combobox-input-text-color",
              "description": "When `selectionDisplay` is `\"single\"`, specifies the text color of the component's input."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-combobox",
          "declaration": {
            "name": "Combobox",
            "module": "src/components/combobox/combobox.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combobox-item/combobox-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ComboboxItem",
          "tagName": "calcite-combobox-item",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteComboboxItem",
          "importPath": "components/calcite-combobox-item",
          "members": [
            {
              "kind": "field",
              "name": "active",
              "description": "When `true`, the component is active.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "ancestors",
              "description": "Specifies the parent and grandparent items, which are set on `calcite-combobox`.",
              "type": {
                "text": "Array<HTMLCalciteComboboxItemElement | HTMLCalciteComboboxItemGroupElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteComboboxItemElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 36
                  },
                  {
                    "name": "HTMLCalciteComboboxItemGroupElement",
                    "module": "index.js",
                    "start": 39,
                    "end": 74
                  }
                ]
              }
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst comboboxItem = document.querySelector(\"calcite-combobox-item\");\ndocument.body.append(comboboxItem);\nawait comboboxItem.componentOnReady();\nconsole.log(\"calcite-combobox-item is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description for the component, which displays below the heading.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filterDisabled",
              "description": "When `true`, omits the component from the `calcite-combobox` filtered search results.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "filter-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "guid",
              "description": "The `id` attribute of the component. When omitted, a globally unique identifier is used.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "guid",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "The component's text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The component's label.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "metadata",
              "description": "Provides additional metadata to the component used in filtering.",
              "type": {
                "text": "{\n    [x: string]: unknown;\n}"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shortHeading",
              "description": "The component's short heading.\n\nWhen provided, the short heading will be displayed in the component's selection.\n\nIt is recommended to use 5 characters or fewer.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "short-heading"
            },
            {
              "kind": "field",
              "name": "textLabel",
              "description": "The component's text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "deprecated": "Use `heading` instead.",
              "attribute": "text-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "value",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "When `true`, the component is active.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "description",
              "description": "A description for the component, which displays below the heading.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "filter-disabled",
              "description": "When `true`, omits the component from the `calcite-combobox` filtered search results.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "filterDisabled"
            },
            {
              "name": "guid",
              "description": "The `id` attribute of the component. When omitted, a globally unique identifier is used.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "guid"
            },
            {
              "name": "heading",
              "description": "The component's text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "label",
              "description": "The component's label.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "short-heading",
              "description": "The component's short heading.\n\nWhen provided, the short heading will be displayed in the component's selection.\n\nIt is recommended to use 5 characters or fewer.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "shortHeading"
            },
            {
              "name": "text-label",
              "description": "The component's text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "textLabel",
              "deprecated": "Use `heading` instead."
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteComboboxItemChange",
              "description": "Fires whenever the component is selected or unselected.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding nested `calcite-combobox-item`s."
            },
            {
              "name": "content-end",
              "description": "A slot for adding non-actionable elements after the component's content."
            },
            {
              "name": "content-start",
              "description": "A slot for adding non-actionable elements before the component's content."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-combobox-item-border-color",
              "description": "[Deprecated] Specifies the component's border color."
            },
            {
              "name": "--calcite-combobox-text-color",
              "description": "Specifies the component's text and `icon` color."
            },
            {
              "name": "--calcite-combobox-text-color-hover",
              "description": "Specifies the component's text and `icon` color when hovered."
            },
            {
              "name": "--calcite-combobox-item-background-color-active",
              "description": "Specifies the component's background color when active."
            },
            {
              "name": "--calcite-combobox-item-background-color-hover",
              "description": "Specifies the component's background color when hovered."
            },
            {
              "name": "--calcite-combobox-item-shadow",
              "description": "Specifies the component's shadow."
            },
            {
              "name": "--calcite-combobox-selected-icon-color",
              "description": "Specifies the component's selected indicator icon color."
            },
            {
              "name": "--calcite-combobox-description-text-color",
              "description": "Specifies the component's `description` and `shortHeading` text color."
            },
            {
              "name": "--calcite-combobox-description-text-color-press",
              "description": "Specifies the component's `description` and `shortHeading` text color when hovered."
            },
            {
              "name": "--calcite-combobox-heading-text-color",
              "description": "Specifies the component's `heading` text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-combobox-item",
          "declaration": {
            "name": "ComboboxItem",
            "module": "src/components/combobox-item/combobox-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/combobox-item-group/combobox-item-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ComboboxItemGroup",
          "tagName": "calcite-combobox-item-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteComboboxItemGroup",
          "importPath": "components/calcite-combobox-item-group",
          "members": [
            {
              "kind": "field",
              "name": "ancestors",
              "description": "Specifies the parent and grandparent `calcite-combobox-item`s, which are set on `calcite-combobox`.",
              "type": {
                "text": "Array<HTMLCalciteComboboxItemElement | HTMLCalciteComboboxItemGroupElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteComboboxItemElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 36
                  },
                  {
                    "name": "HTMLCalciteComboboxItemGroupElement",
                    "module": "index.js",
                    "start": 39,
                    "end": 74
                  }
                ]
              }
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst comboboxItemGroup = document.querySelector(\"calcite-combobox-item-group\");\ndocument.body.append(comboboxItemGroup);\nawait comboboxItemGroup.componentOnReady();\nconsole.log(\"calcite-combobox-item-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Specifies the title of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Specifies the position of the group in the combobox menu.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "position",
              "docsTags": [
                {
                  "name": "internal"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "label",
              "description": "Specifies the title of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "position",
              "description": "Specifies the position of the group in the combobox menu.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "position"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-combobox-item`s."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-combobox-item-group-text-color",
              "description": "Specifies the text color of the component."
            },
            {
              "name": "--calcite-combobox-item-group-border-color",
              "description": "Specifies the border color of the component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-combobox-item-group",
          "declaration": {
            "name": "ComboboxItemGroup",
            "module": "src/components/combobox-item-group/combobox-item-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker/date-picker.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "DatePicker",
          "tagName": "calcite-date-picker",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteDatePicker",
          "importPath": "components/calcite-date-picker",
          "members": [
            {
              "kind": "field",
              "name": "activeDate",
              "description": "Specifies the component's active date.",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "activeRange",
              "description": "When `range` is true, specifies the active `range`. Where `\"start\"` specifies the starting range date and `\"end\"` the ending range date.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "active-range",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "calendars",
              "description": "Specifies the number of calendars displayed when `range` is `true`.",
              "type": {
                "text": "1 | 2",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  }
                ]
              },
              "default": "2",
              "attribute": "calendars",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst datePicker = document.querySelector(\"calcite-date-picker\");\ndocument.body.append(datePicker);\nawait datePicker.componentOnReady();\nconsole.log(\"calcite-date-picker is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Defines the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "description": "When the component resides in a form,\nspecifies the latest allowed date (`\"yyyy-mm-dd\"`).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxAsDate",
              "description": "Specifies the latest allowed date as a full date object (`new Date(\"yyyy-mm-dd\")`).",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "description": "When the component resides in a form,\nspecifies the earliest allowed date (`\"yyyy-mm-dd\"`).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minAsDate",
              "description": "Specifies the earliest allowed date as a full date object (`new Date(\"yyyy-mm-dd\")`).",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "monthStyle",
              "description": "Specifies the monthStyle used by the component.",
              "type": {
                "text": "\"abbreviated\" | \"wide\"",
                "values": [
                  {
                    "value": "abbreviated",
                    "type": "string"
                  },
                  {
                    "value": "wide",
                    "type": "string"
                  }
                ]
              },
              "default": "\"wide\"",
              "attribute": "month-style"
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "proximitySelectionDisabled",
              "description": "When `true`, disables the default behavior on the third click of narrowing or extending the range and instead starts a new range.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "proximity-selection-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "range",
              "description": "When `true`, activates the component's range mode to allow a start and end date.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "range",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Specifies the selected date as a string (`\"yyyy-mm-dd\"`), or an array of strings for `range` values (`[\"yyyy-mm-dd\", \"yyyy-mm-dd\"]`).",
              "type": {
                "text": "Array<string> | string",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ],
                "values": [
                  {
                    "type": "Array<string>"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "description": "Specifies the selected date as a full date object (`new Date(\"yyyy-mm-dd\")`), or an array containing full date objects (`[new Date(\"yyyy-mm-dd\"), new Date(\"yyyy-mm-dd\")]`).",
              "type": {
                "text": "Array<Date> | Date",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 6,
                    "end": 10
                  },
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 14,
                    "end": 18
                  }
                ],
                "values": [
                  {
                    "type": "Array<Date>"
                  },
                  {
                    "type": "Date"
                  }
                ]
              }
            }
          ],
          "attributes": [
            {
              "name": "active-range",
              "description": "When `range` is true, specifies the active `range`. Where `\"start\"` specifies the starting range date and `\"end\"` the ending range date.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "activeRange"
            },
            {
              "name": "calendars",
              "description": "Specifies the number of calendars displayed when `range` is `true`.",
              "type": {
                "text": "1 | 2",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  }
                ]
              },
              "default": "2",
              "fieldName": "calendars"
            },
            {
              "name": "heading-level",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "layout",
              "description": "Defines the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "fieldName": "layout"
            },
            {
              "name": "max",
              "description": "When the component resides in a form,\nspecifies the latest allowed date (`\"yyyy-mm-dd\"`).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "max"
            },
            {
              "name": "min",
              "description": "When the component resides in a form,\nspecifies the earliest allowed date (`\"yyyy-mm-dd\"`).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "min"
            },
            {
              "name": "month-style",
              "description": "Specifies the monthStyle used by the component.",
              "type": {
                "text": "\"abbreviated\" | \"wide\"",
                "values": [
                  {
                    "value": "abbreviated",
                    "type": "string"
                  },
                  {
                    "value": "wide",
                    "type": "string"
                  }
                ]
              },
              "default": "\"wide\"",
              "fieldName": "monthStyle"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "proximity-selection-disabled",
              "description": "When `true`, disables the default behavior on the third click of narrowing or extending the range and instead starts a new range.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "proximitySelectionDisabled"
            },
            {
              "name": "range",
              "description": "When `true`, activates the component's range mode to allow a start and end date.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "range"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "value",
              "description": "Specifies the selected date as a string (`\"yyyy-mm-dd\"`), or an array of strings for `range` values (`[\"yyyy-mm-dd\", \"yyyy-mm-dd\"]`).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteDatePickerChange",
              "description": "Fires when a user changes the component's date. For `range` events, use `calciteDatePickerRangeChange`.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteDatePickerRangeChange",
              "description": "Fires when a user changes the component's date `range`. For components without `range` use `calciteDatePickerChange`.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-date-picker-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-date-picker-corner-radius",
              "description": "Specifies the component's border radius."
            },
            {
              "name": "--calcite-date-picker-range-calendar-divider-color",
              "description": "Specifies the divider color between calendar's when `range=\"true\"`."
            },
            {
              "name": "--calcite-date-picker-week-header-text-color",
              "description": "Specifies the week header text color."
            },
            {
              "name": "--calcite-date-picker-header-action-background-color",
              "description": "Specifies the background color of header action's of the component."
            },
            {
              "name": "--calcite-date-picker-header-action-background-color-hover",
              "description": "Specifies the background color of header action's of the component when hovered."
            },
            {
              "name": "--calcite-date-picker-header-action-background-color-press",
              "description": "Specifies the background color of header action's of the component when pressed."
            },
            {
              "name": "--calcite-date-picker-header-action-text-color",
              "description": "Specifies the text color of header action's of the component."
            },
            {
              "name": "--calcite-date-picker-header-action-text-color-press",
              "description": "Specifies the text color of header action's of the component when pressed."
            },
            {
              "name": "--calcite-date-picker-year-text-color",
              "description": "Specifies the text color of year & suffix of the component."
            },
            {
              "name": "--calcite-date-picker-month-select-font-size",
              "description": "Specifies the font size of month select of the component."
            },
            {
              "name": "--calcite-date-picker-month-select-text-color",
              "description": "Specifies the text color of month select of the component."
            },
            {
              "name": "--calcite-date-picker-month-select-icon-color",
              "description": "Specifies the icon color of month select of the component."
            },
            {
              "name": "--calcite-date-picker-month-select-icon-color-hover",
              "description": "Specifies the icon color of month select of the component when hovered."
            },
            {
              "name": "--calcite-date-picker-day-background-color",
              "description": "Specifies the background color of day of the component."
            },
            {
              "name": "--calcite-date-picker-day-background-color-hover",
              "description": "Specifies the background color of day of the component when hovered."
            },
            {
              "name": "--calcite-date-picker-day-text-color",
              "description": "Specifies the text color of day of the component."
            },
            {
              "name": "--calcite-date-picker-day-text-color-hover",
              "description": "Specifies the text color of day of the component when hovered."
            },
            {
              "name": "--calcite-date-picker-current-day-text-color",
              "description": "Specifies the text color of current day of the component."
            },
            {
              "name": "--calcite-date-picker-day-background-color-selected",
              "description": "Specifies the background color of selected day of the component."
            },
            {
              "name": "--calcite-date-picker-day-text-color-selected",
              "description": "Specifies the text color of selected day of the component."
            },
            {
              "name": "--calcite-date-picker-day-range-text-color",
              "description": "Specifies the text color of select day range of the component."
            },
            {
              "name": "--calcite-date-picker-day-range-background-color",
              "description": "Specifies the background color of select day range of the component."
            },
            {
              "name": "--calcite-date-picker-day-outside-range-background-color-hover",
              "description": "Specifies the background color of day's outside current range when hovered."
            },
            {
              "name": "--calcite-date-picker-day-outside-range-text-color-hover",
              "description": "Specifies the text color of day's outside current range when hovered."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-date-picker",
          "declaration": {
            "name": "DatePicker",
            "module": "src/components/date-picker/date-picker.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker-day/date-picker-day.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "DatePickerDay",
          "tagName": "calcite-date-picker-day",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteDatePickerDay",
          "importPath": "components/calcite-date-picker-day",
          "members": [
            {
              "kind": "field",
              "name": "active",
              "description": "When `true`, the component is active.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst datePickerDay = document.querySelector(\"calcite-date-picker-day\");\ndocument.body.append(datePickerDay);\nawait datePickerDay.componentOnReady();\nconsole.log(\"calcite-date-picker-day is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentMonth",
              "description": "Date is in the current month.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "current-month",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "day",
              "description": "Day of the month to be shown.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "day",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "endOfRange",
              "description": "Date is the end of date range.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "end-of-range",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "highlighted",
              "description": "Date is currently highlighted as part of the range,",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "highlighted",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "range",
              "description": "When `true`, activates the component's range mode to allow a start and end date.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "range",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rangeHover",
              "description": "Date is being hovered and within the set range.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "range-hover",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "startOfRange",
              "description": "Date is the start of date range.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "start-of-range",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "When `true`, the component is active.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "current-month",
              "description": "Date is in the current month.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "currentMonth"
            },
            {
              "name": "day",
              "description": "Day of the month to be shown.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "day"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "end-of-range",
              "description": "Date is the end of date range.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "endOfRange"
            },
            {
              "name": "highlighted",
              "description": "Date is currently highlighted as part of the range,",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "highlighted"
            },
            {
              "name": "range",
              "description": "When `true`, activates the component's range mode to allow a start and end date.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "range"
            },
            {
              "name": "range-hover",
              "description": "Date is being hovered and within the set range.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "rangeHover"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "scale"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "start-of-range",
              "description": "Date is the start of date range.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "startOfRange"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-date-picker-day",
          "declaration": {
            "name": "DatePickerDay",
            "module": "src/components/date-picker-day/date-picker-day.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker-month/date-picker-month.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "DatePickerMonth",
          "tagName": "calcite-date-picker-month",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteDatePickerMonth",
          "importPath": "components/calcite-date-picker-month",
          "members": [
            {
              "kind": "field",
              "name": "activeDate",
              "description": "The currently active Date.",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "calendars",
              "description": "Specifies the number of calendars displayed when `range` is `true`.",
              "type": {
                "text": "1 | 2",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  }
                ]
              },
              "default": "2",
              "attribute": "calendars",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst datePickerMonth = document.querySelector(\"calcite-date-picker-month\");\ndocument.body.append(datePickerMonth);\nawait datePickerMonth.componentOnReady();\nconsole.log(\"calcite-date-picker-month is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "endDate",
              "description": "End date currently active.",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the number at which section headings should start.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hoverRange",
              "description": "The range of dates currently being hovered.",
              "type": {
                "text": "HoverRange",
                "references": [
                  {
                    "name": "HoverRange",
                    "module": "docs/utils/date.d.ts",
                    "start": 0,
                    "end": 10
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "max",
              "description": "Specifies the latest allowed date (`\"yyyy-mm-dd\"`).",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "min",
              "description": "Specifies the earliest allowed date (`\"yyyy-mm-dd\"`).",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "monthStyle",
              "description": "Specifies the monthStyle used by the component.",
              "type": {
                "text": "\"abbreviated\" | \"wide\"",
                "values": [
                  {
                    "value": "abbreviated",
                    "type": "string"
                  },
                  {
                    "value": "wide",
                    "type": "string"
                  }
                ]
              },
              "attribute": "month-style"
            },
            {
              "kind": "field",
              "name": "range",
              "description": "When `true`, activates the component's range mode which renders two calendars for selecting ranges of dates.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "range",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedDate",
              "description": "Already selected date.",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "startDate",
              "description": "Start date currently active.",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            }
          ],
          "attributes": [
            {
              "name": "calendars",
              "description": "Specifies the number of calendars displayed when `range` is `true`.",
              "type": {
                "text": "1 | 2",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  }
                ]
              },
              "default": "2",
              "fieldName": "calendars"
            },
            {
              "name": "heading-level",
              "description": "Specifies the number at which section headings should start.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "month-style",
              "description": "Specifies the monthStyle used by the component.",
              "type": {
                "text": "\"abbreviated\" | \"wide\"",
                "values": [
                  {
                    "value": "abbreviated",
                    "type": "string"
                  },
                  {
                    "value": "wide",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "monthStyle"
            },
            {
              "name": "range",
              "description": "When `true`, activates the component's range mode which renders two calendars for selecting ranges of dates.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "range"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "scale"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-date-picker-month",
          "declaration": {
            "name": "DatePickerMonth",
            "module": "src/components/date-picker-month/date-picker-month.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/date-picker-month-header/date-picker-month-header.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "DatePickerMonthHeader",
          "tagName": "calcite-date-picker-month-header",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteDatePickerMonthHeader",
          "importPath": "components/calcite-date-picker-month-header",
          "members": [
            {
              "kind": "field",
              "name": "activeDate",
              "description": "The focused date is indicated and will become the selected date if the user proceeds.",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst datePickerMonthHeader = document.querySelector(\"calcite-date-picker-month-header\");\ndocument.body.append(datePickerMonthHeader);\nawait datePickerMonthHeader.componentOnReady();\nconsole.log(\"calcite-date-picker-month-header is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the number at which section headings should start.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level"
            },
            {
              "kind": "field",
              "name": "localeData",
              "description": "CLDR locale data for translated calendar info.",
              "type": {
                "text": "DateLocaleData",
                "references": [
                  {
                    "name": "DateLocaleData",
                    "module": "docs/components/date-picker/utils.d.ts",
                    "start": 0,
                    "end": 14
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "max",
              "description": "Specifies the latest allowed date (`\"yyyy-mm-dd\"`).",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "min",
              "description": "Specifies the earliest allowed date (`\"yyyy-mm-dd\"`).",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "monthStyle",
              "description": "Specifies the monthStyle used by the component.",
              "type": {
                "text": "\"abbreviated\" | \"wide\"",
                "values": [
                  {
                    "value": "abbreviated",
                    "type": "string"
                  },
                  {
                    "value": "wide",
                    "type": "string"
                  }
                ]
              },
              "attribute": "month-style"
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedDate",
              "description": "Already selected date.",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            }
          ],
          "attributes": [
            {
              "name": "heading-level",
              "description": "Specifies the number at which section headings should start.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "month-style",
              "description": "Specifies the monthStyle used by the component.",
              "type": {
                "text": "\"abbreviated\" | \"wide\"",
                "values": [
                  {
                    "value": "abbreviated",
                    "type": "string"
                  },
                  {
                    "value": "wide",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "monthStyle"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "scale"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-date-picker-month-header",
          "declaration": {
            "name": "DatePickerMonthHeader",
            "module": "src/components/date-picker-month-header/date-picker-month-header.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dialog/dialog.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Dialog",
          "tagName": "calcite-dialog",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteDialog",
          "importPath": "components/calcite-dialog",
          "members": [
            {
              "kind": "field",
              "name": "beforeClose",
              "description": "Passes a function to run before the component closes.",
              "type": {
                "text": "() => Promise<void>",
                "references": [
                  {
                    "name": "Promise",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 6,
                    "end": 13
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "closeDisabled",
              "description": "When `true`, disables the component's close button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "close-disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst dialog = document.querySelector(\"calcite-dialog\");\ndocument.body.append(dialog);\nawait dialog.componentOnReady();\nconsole.log(\"calcite-dialog is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "dragEnabled",
              "description": "When `true`, the component is draggable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "drag-enabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "escapeDisabled",
              "description": "When `true`, disables the default close on escape behavior.\n\nBy default, an open dialog can be dismissed by pressing the Esc key.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "escape-disabled",
              "reflects": true,
              "docsTags": [
                {
                  "name": "see",
                  "text": "[Dialog Accessibility](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#accessibility)."
                }
              ]
            },
            {
              "kind": "field",
              "name": "focusTrapDisabled",
              "description": "When `true` and `modal` is `false`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "focus-trap-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focusTrapOptions",
              "description": "Specifies custom focus trap configuration on the component, where\n\n`\"allowOutsideClick`\" allows outside clicks,\n`\"initialFocus\"` enables initial focus,\n`\"returnFocusOnDeactivate\"` returns focus when not active, and\n`\"extraContainers\"` specifies additional focusable elements external to the trap (e.g., 3rd-party components appending elements to the document body).\n`\"setReturnFocus\"` customizes the element to which focus is returned when the trap is deactivated. Return `false` to prevent focus return, or `undefined` to use the default behavior (returning focus to the element focused before activation).",
              "type": {
                "text": "{\n    initialFocus?: FocusTargetOrFalse | (() => void);\n    returnFocusOnDeactivate?: boolean;\n    allowOutsideClick?: boolean | MouseEventToBoolean;\n    extraContainers?: string | HTMLElement | SVGElement | Array<string | HTMLElement | SVGElement>;\n    setReturnFocus?: FocusTargetValueOrFalse | ((nodeFocusedBeforeActivation: HTMLElement | SVGElement) => FocusTargetValueOrFalse) | ((nodeFocusedBeforeActivation: HTMLElement | SVGElement) => undefined);\n}"
              }
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Specifies the kind of the component, which will style the top border.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "info",
                    "type": "string"
                  },
                  {
                    "value": "success",
                    "type": "string"
                  },
                  {
                    "value": "warning",
                    "type": "string"
                  }
                ]
              },
              "attribute": "kind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuOpen",
              "description": "When `true`, the action menu items in the `header-menu-actions` slot are open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "menu-open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "modal",
              "description": "When `true`, displays a scrim blocking interaction underneath the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "modal",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "outsideCloseDisabled",
              "description": "When `true`, disables the closing of the component when clicked outside.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "outside-close-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Specifies the placement of the dialog.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"center\" | \"cover\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "cover",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"center\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "resizable",
              "description": "When `true`, the component is resizable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "resizable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "scrollContentTo",
              "description": "Scrolls the component's content to a specified set of coordinates.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "ScrollToOptions",
                    "references": [
                      {
                        "name": "ScrollToOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 15
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "myCalciteFlowItem.scrollContentTo({\n  left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.\n  top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element\n  behavior: \"auto\" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).\n});"
                },
                {
                  "name": "param",
                  "text": "options - allows specific coordinates to be defined."
                },
                {
                  "name": "returns",
                  "text": "- promise that resolves once the content is scrolled to."
                }
              ],
              "signature": "(options?: ScrollToOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's \"close\" button (the first focusable item).",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                },
                {
                  "name": "returns",
                  "text": "- A promise that is resolved when the operation has completed."
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "updateFocusTrapElements",
              "description": "Updates the element(s) that are included in the focus-trap of the component.",
              "parameters": [
                {
                  "name": "extraContainers",
                  "optional": true,
                  "type": {
                    "text": "Array<string | HTMLElement | SVGElement> | HTMLElement | SVGElement | string",
                    "references": [
                      {
                        "name": "Array",
                        "package": "typescript",
                        "module": "lib/lib.es5.d.ts",
                        "start": 0,
                        "end": 5
                      },
                      {
                        "name": "HTMLElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/HTMLElement",
                        "start": 15,
                        "end": 26
                      },
                      {
                        "name": "SVGElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/SVGElement",
                        "start": 29,
                        "end": 39
                      },
                      {
                        "name": "HTMLElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/HTMLElement",
                        "start": 43,
                        "end": 54
                      },
                      {
                        "name": "SVGElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/SVGElement",
                        "start": 57,
                        "end": 67
                      }
                    ],
                    "values": [
                      {
                        "type": "Array<string | HTMLElement | SVGElement>"
                      },
                      {
                        "type": "HTMLElement"
                      },
                      {
                        "type": "SVGElement"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "extraContainers - Additional elements to include in the focus trap. This is useful for including elements that may have related parts rendered outside the main focus trapping element."
                }
              ],
              "signature": "(extraContainers?: FocusTrapOptions[\"extraContainers\"]): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "attribute": "width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "widthScale",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "deprecated": "Use the `width` property instead.",
              "attribute": "width-scale",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "close-disabled",
              "description": "When `true`, disables the component's close button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closeDisabled"
            },
            {
              "name": "description",
              "description": "A description for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "drag-enabled",
              "description": "When `true`, the component is draggable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "dragEnabled"
            },
            {
              "name": "escape-disabled",
              "description": "When `true`, disables the default close on escape behavior.\n\nBy default, an open dialog can be dismissed by pressing the Esc key.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "escapeDisabled"
            },
            {
              "name": "focus-trap-disabled",
              "description": "When `true` and `modal` is `false`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "focusTrapDisabled"
            },
            {
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "heading-level",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "kind",
              "description": "Specifies the kind of the component, which will style the top border.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "info",
                    "type": "string"
                  },
                  {
                    "value": "success",
                    "type": "string"
                  },
                  {
                    "value": "warning",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "kind"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "menu-open",
              "description": "When `true`, the action menu items in the `header-menu-actions` slot are open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "menuOpen"
            },
            {
              "name": "modal",
              "description": "When `true`, displays a scrim blocking interaction underneath the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "modal"
            },
            {
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "outside-close-disabled",
              "description": "When `true`, disables the closing of the component when clicked outside.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "outsideCloseDisabled"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "placement",
              "description": "Specifies the placement of the dialog.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"center\" | \"cover\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "cover",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"center\"",
              "fieldName": "placement"
            },
            {
              "name": "resizable",
              "description": "When `true`, the component is resizable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "resizable"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "width",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "width"
            },
            {
              "name": "width-scale",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "widthScale",
              "deprecated": "Use the `width` property instead."
            }
          ],
          "events": [
            {
              "name": "calciteDialogBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteDialogBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteDialogClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteDialogOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteDialogScroll",
              "description": "Fires when the content is scrolled.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding content."
            },
            {
              "name": "content",
              "description": "[Deprecated] Use `custom-content` slot instead."
            },
            {
              "name": "custom-content",
              "description": "A slot for displaying custom content. Will prevent the rendering of any default Dialog UI, except for `box-shadow` and `corner-radius`."
            },
            {
              "name": "action-bar",
              "description": "A slot for adding a `calcite-action-bar` to the component."
            },
            {
              "name": "alerts",
              "description": "A slot for adding `calcite-alert`s to the component."
            },
            {
              "name": "content-bottom",
              "description": "A slot for adding content below the unnamed (default) slot and - if populated - the `footer` slot."
            },
            {
              "name": "content-top",
              "description": "A slot for adding content above the unnamed (default) slot and - if populated - below the `action-bar` slot."
            },
            {
              "name": "header-actions-start",
              "description": "A slot for adding actions or content to the starting side of the component's header."
            },
            {
              "name": "header-actions-end",
              "description": "A slot for adding actions or content to the ending side of the component's header."
            },
            {
              "name": "header-content",
              "description": "A slot for adding custom content to the component's header."
            },
            {
              "name": "header-menu-actions",
              "description": "A slot for adding an overflow menu with actions inside a `calcite-dropdown`."
            },
            {
              "name": "fab",
              "description": "A slot for adding a `calcite-fab` (floating action button) to perform an action."
            },
            {
              "name": "footer",
              "description": "A slot for adding custom content to the component's footer. Should not be used with the `\"footer-start\"` or `\"footer-end\"` slots."
            },
            {
              "name": "footer-end",
              "description": "A slot for adding a trailing footer custom content. Should not be used with the `\"footer\"` slot."
            },
            {
              "name": "footer-start",
              "description": "A slot for adding a leading footer custom content. Should not be used with the `\"footer\"` slot."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-dialog-scrim-background-color",
              "description": "Specifies the background color of the component's scrim."
            },
            {
              "name": "--calcite-dialog-size-x",
              "description": "Specifies the width of the component, using `px`, `em`, `rem`, `vw`, or `%`. Does not exceed the viewport's width - applies when `placement=\"cover\"` is set."
            },
            {
              "name": "--calcite-dialog-min-size-x",
              "description": "Specifies the minimum width of the component, using `px`, `em`, `rem`, `vw`, or `%`."
            },
            {
              "name": "--calcite-dialog-max-size-x",
              "description": "Specifies the maximum width of the component, using `px`, `em`, `rem`, `vw`, or `%`."
            },
            {
              "name": "--calcite-dialog-size-y",
              "description": "Specifies the height of the component, using `px`, `em`, `rem`, `vh`, or `%`. Does not exceed the viewport's height - applies when `placement=\"cover\"` is set."
            },
            {
              "name": "--calcite-dialog-min-size-y",
              "description": "Specifies the minimum height of the component, using `px`, `em`, `rem`, `vh`, or `%`."
            },
            {
              "name": "--calcite-dialog-max-size-y",
              "description": "Specifies the maximum height of the component, using `px`, `em`, `rem`, `vh`, or `%`."
            },
            {
              "name": "--calcite-dialog-content-space",
              "description": "Specifies the padding of the component's content."
            },
            {
              "name": "--calcite-dialog-footer-space",
              "description": "Specifies the padding of the component's footer."
            },
            {
              "name": "--calcite-dialog-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-dialog-offset-x",
              "description": "Specifies the horizontal offset of the component."
            },
            {
              "name": "--calcite-dialog-offset-y",
              "description": "Specifies the vertical offset of the component."
            },
            {
              "name": "--calcite-dialog-background-color",
              "description": "Specifies the background color of the component."
            },
            {
              "name": "--calcite-dialog-icon-color",
              "description": "Specifies the color of the component's icon."
            },
            {
              "name": "--calcite-dialog-accent-color",
              "description": "Specifies the component's accent color when `kind` is specified."
            },
            {
              "name": "--calcite-dialog-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-dialog-heading-text-color",
              "description": "Specifies the text color of the component's `heading`."
            },
            {
              "name": "--calcite-dialog-description-text-color",
              "description": "Specifies the text color of the component's `description`."
            },
            {
              "name": "--calcite-dialog-header-background-color",
              "description": "Specifies the background color of the component's header."
            },
            {
              "name": "--calcite-dialog-header-action-background-color",
              "description": "Specifies the background color of Panel's `closable`, `collapsible`, and elements slotted in `header-menu-actions`."
            },
            {
              "name": "--calcite-dialog-header-action-background-color-hover",
              "description": "Specifies the background color of Panel's `closable`, `collapsible`, and elements slotted in `header-menu-actions` when hovered."
            },
            {
              "name": "--calcite-dialog-header-action-background-color-press",
              "description": "Specifies the background color of Panel's `closable`, `collapsible`, and elements slotted in `header-menu-actions` when pressed."
            },
            {
              "name": "--calcite-dialog-header-action-text-color",
              "description": "Specifies the text color of Panel's `closable`, `collapsible`, and elements slotted in `header-menu-actions`."
            },
            {
              "name": "--calcite-dialog-header-action-text-color-press",
              "description": "Specifies the text color of Panel's `closable`, `collapsible`, and elements slotted in `header-menu-actions` when pressed or hovered."
            },
            {
              "name": "--calcite-dialog-footer-background-color",
              "description": "Specifies the background color of the component's footer."
            },
            {
              "name": "--calcite-dialog-space",
              "description": "Specifies the padding of the component's `\"unnamed (default)\"` slot."
            },
            {
              "name": "--calcite-dialog-header-content-space",
              "description": "Specifies the padding of the `\"header-content\"` slot."
            },
            {
              "name": "--calcite-dialog-action-menu-border-color",
              "description": "Specifies the border color of the component's internally rendered `calcite-popover`, which is rendered within a `calcite-action` menu when slotted `calcite-action`s are present in the `header-actions-end` slot. Applies to any slotted `calcite-popover`s."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-dialog",
          "declaration": {
            "name": "Dialog",
            "module": "src/components/dialog/dialog.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown/dropdown.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Dropdown",
          "tagName": "calcite-dropdown",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteDropdown",
          "importPath": "components/calcite-dropdown",
          "members": [
            {
              "kind": "field",
              "name": "closeOnSelectDisabled",
              "description": "When `true`, the component will remain open after a selection is made.\n\nIf the `selectionMode` of the selected `calcite-dropdown-item`'s containing `calcite-dropdown-group` is `\"none\"`, the component will always close.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "close-on-select-disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst dropdown = document.querySelector(\"calcite-dropdown\");\ndocument.body.append(dropdown);\nawait dropdown.componentOnReady();\nconsole.log(\"calcite-dropdown is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flipPlacements",
              "description": "Specifies the component's fallback `calcite-dropdown-item` `placement` when it's initial or specified `placement` has insufficient space available.",
              "type": {
                "text": "Array<\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\">",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "maxItems",
              "description": "Specifies the maximum number of `calcite-dropdown-item`s to display before showing a scroller.\nValue must be greater than `0`, and does not include `groupTitle`'s from `calcite-dropdown-group`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "max-items",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "offsetDistance",
              "description": "Offset the position of the component away from the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "offset-distance",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "offsetSkidding",
              "description": "Offset the position of the component along the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "offset-skidding",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the container element.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-start\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Updates the position of the component.",
              "parameters": [
                {
                  "name": "delayed",
                  "default": "false",
                  "type": {
                    "text": "boolean",
                    "values": [
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "delayed"
                }
              ],
              "signature": "(delayed?: boolean): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "description": "Specifies the component's selected items.",
              "type": {
                "text": "Array<HTMLCalciteDropdownItemElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteDropdownItemElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 36
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Specifies the action to open the component from the container element.",
              "type": {
                "text": "\"click\" | \"hover\"",
                "values": [
                  {
                    "value": "click",
                    "type": "string"
                  },
                  {
                    "value": "hover",
                    "type": "string"
                  }
                ]
              },
              "default": "\"click\"",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "attribute": "width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "widthScale",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "deprecated": "Use the `width` property instead.",
              "attribute": "width-scale",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "close-on-select-disabled",
              "description": "When `true`, the component will remain open after a selection is made.\n\nIf the `selectionMode` of the selected `calcite-dropdown-item`'s containing `calcite-dropdown-group` is `\"none\"`, the component will always close.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closeOnSelectDisabled"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "max-items",
              "description": "Specifies the maximum number of `calcite-dropdown-item`s to display before showing a scroller.\nValue must be greater than `0`, and does not include `groupTitle`'s from `calcite-dropdown-group`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "maxItems"
            },
            {
              "name": "offset-distance",
              "description": "Offset the position of the component away from the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "offsetDistance"
            },
            {
              "name": "offset-skidding",
              "description": "Offset the position of the component along the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "offsetSkidding"
            },
            {
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the container element.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-start\"",
              "fieldName": "placement"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "type",
              "description": "Specifies the action to open the component from the container element.",
              "type": {
                "text": "\"click\" | \"hover\"",
                "values": [
                  {
                    "value": "click",
                    "type": "string"
                  },
                  {
                    "value": "hover",
                    "type": "string"
                  }
                ]
              },
              "default": "\"click\"",
              "fieldName": "type"
            },
            {
              "name": "width",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "width"
            },
            {
              "name": "width-scale",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "widthScale",
              "deprecated": "Use the `width` property instead."
            }
          ],
          "events": [
            {
              "name": "calciteDropdownBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteDropdownBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteDropdownClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteDropdownOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteDropdownSelect",
              "description": "Fires when a `calcite-dropdown-item`'s selection changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-dropdown-group` elements. Every `calcite-dropdown-item` must have a parent `calcite-dropdown-group`, even if the `groupTitle` property is not set."
            },
            {
              "name": "trigger",
              "description": "A slot for the element that triggers the `calcite-dropdown`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-dropdown-width",
              "description": "Specifies the width of the component's wrapper."
            },
            {
              "name": "--calcite-dropdown-background-color",
              "description": "Specifies the component's background color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-dropdown",
          "declaration": {
            "name": "Dropdown",
            "module": "src/components/dropdown/dropdown.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown-group/dropdown-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "DropdownGroup",
          "tagName": "calcite-dropdown-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteDropdownGroup",
          "importPath": "components/calcite-dropdown-group",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst dropdownGroup = document.querySelector(\"calcite-dropdown-group\");\ndocument.body.append(dropdownGroup);\nawait dropdownGroup.componentOnReady();\nconsole.log(\"calcite-dropdown-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "groupTitle",
              "description": "Specifies and displays a group title.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "group-title",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "position",
              "description": "The position of the group in the dropdown menu.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "-1",
              "attribute": "position",
              "docsTags": [
                {
                  "name": "internal"
                }
              ]
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection, and\n\n`\"none\"` does not allow any selections.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  }
                ]
              },
              "default": "\"single\"",
              "attribute": "selection-mode",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "group-title",
              "description": "Specifies and displays a group title.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "groupTitle"
            },
            {
              "name": "position",
              "description": "The position of the group in the dropdown menu.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "-1",
              "fieldName": "position"
            },
            {
              "name": "selection-mode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection, and\n\n`\"none\"` does not allow any selections.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  }
                ]
              },
              "default": "\"single\"",
              "fieldName": "selectionMode"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-dropdown-item`s."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-dropdown-group-border-color",
              "description": "Specifies the `calcite-dropdown`'s border color."
            },
            {
              "name": "--calcite-dropdown-group-title-text-color",
              "description": "Specifies the component's `groupTitle` color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-dropdown-group",
          "declaration": {
            "name": "DropdownGroup",
            "module": "src/components/dropdown-group/dropdown-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/dropdown-item/dropdown-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "DropdownItem",
          "tagName": "calcite-dropdown-item",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteDropdownItem",
          "importPath": "components/calcite-dropdown-item",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst dropdownItem = document.querySelector(\"calcite-dropdown-item\");\ndocument.body.append(dropdownItem);\nawait dropdownItem.componentOnReady();\nconsole.log(\"calcite-dropdown-item is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "description": "Specifies the URL of the linked resource, which can be set as an absolute or relative path.\n\nDetermines if the component will render as an anchor.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "rel",
              "description": "Specifies the relationship to the linked document defined in `href`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "rel",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "target",
              "description": "Specifies the frame or window to open the linked document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "target",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "href",
              "description": "Specifies the URL of the linked resource, which can be set as an absolute or relative path.\n\nDetermines if the component will render as an anchor.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "href"
            },
            {
              "name": "icon-end",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconEnd"
            },
            {
              "name": "icon-flip-rtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "rel",
              "description": "Specifies the relationship to the linked document defined in `href`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "rel"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "target",
              "description": "Specifies the frame or window to open the linked document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "target"
            }
          ],
          "events": [
            {
              "name": "calciteDropdownItemSelect",
              "description": "Fires when the component is selected.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding text."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-dropdown-item-background-color-hover",
              "description": "Specifies the item's background color when hovered."
            },
            {
              "name": "--calcite-dropdown-item-background-color-press",
              "description": "Specifies the item's background color when selected or active."
            },
            {
              "name": "--calcite-dropdown-item-icon-color-hover",
              "description": "[Deprecated] Specifies the item's icon selection color when hovered."
            },
            {
              "name": "--calcite-dropdown-item-icon-color-press",
              "description": "Specifies the item's icon selection color when selected or active."
            },
            {
              "name": "--calcite-dropdown-item-text-color-press",
              "description": "Specifies the item's text when selected or active."
            },
            {
              "name": "--calcite-dropdown-item-text-color",
              "description": "Specifies the item's text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-dropdown-item",
          "declaration": {
            "name": "DropdownItem",
            "module": "src/components/dropdown-item/dropdown-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/fab/fab.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Fab",
          "tagName": "calcite-fab",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteFab",
          "importPath": "components/calcite-fab",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline-fill\" | \"solid\"",
                "values": [
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst fab = document.querySelector(\"calcite-fab\");\ndocument.body.append(fab);\nawait fab.componentOnReady();\nconsole.log(\"calcite-fab is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "default": "\"plus\"",
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to border and background.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "inverse",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"brand\"",
              "attribute": "kind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "text",
              "description": "Specifies text to accompany the component's icon.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "textEnabled",
              "description": "When `true`, displays the `text` value in the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "text-enabled",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline-fill\" | \"solid\"",
                "values": [
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "fieldName": "appearance"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "default": "\"plus\"",
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to border and background.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "inverse",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"brand\"",
              "fieldName": "kind"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "text",
              "description": "Specifies text to accompany the component's icon.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "text"
            },
            {
              "name": "text-enabled",
              "description": "When `true`, displays the `text` value in the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "textEnabled"
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-fab-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-fab-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-fab-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-fab-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-fab-loader-color",
              "description": "Specifies the component's loader color."
            },
            {
              "name": "--calcite-fab-shadow",
              "description": "Specifies the component's shadow."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-fab",
          "declaration": {
            "name": "Fab",
            "module": "src/components/fab/fab.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/filter/filter.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Filter",
          "tagName": "calcite-filter",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteFilter",
          "importPath": "components/calcite-filter",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst filter = document.querySelector(\"calcite-filter\");\ndocument.body.append(filter);\nawait filter.componentOnReady();\nconsole.log(\"calcite-filter is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "filter",
              "description": "Performs a filter on the component.\n\nThis method can be useful because filtering is delayed and asynchronous.",
              "parameters": [
                {
                  "name": "value",
                  "default": "this.value",
                  "type": {
                    "text": "string",
                    "values": [
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "value - The filter text value."
                },
                {
                  "name": "returns"
                }
              ],
              "signature": "(value?: string): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "description": "The component's resulting items after filtering.",
              "type": {
                "text": "Array<object>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "filterProps",
              "description": "Specifies the properties to match against when filtering. This will only apply when `value` is an object. If not set, all properties will be matched.",
              "type": {
                "text": "Array<string>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "items",
              "description": "Defines the items to filter. The component uses the values as the starting point, and returns items\n\nthat contain the string entered in the input, using a partial match and recursive search.\n\nThis property is needed to conduct filtering.",
              "type": {
                "text": "Array<object>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Specifies an accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Specifies placeholder text for the input element.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "description": "Specifies an accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "placeholder",
              "description": "Specifies placeholder text for the input element.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "placeholder"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteFilterChange",
              "description": "Fires when the filter text changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-filter-content-space",
              "description": "Specifies the padding of the component's content."
            },
            {
              "name": "--calcite-filter-input-background-color",
              "description": "Specifies the input's background color."
            },
            {
              "name": "--calcite-filter-input-border-color",
              "description": "Specifies the input's border color."
            },
            {
              "name": "--calcite-filter-input-corner-radius",
              "description": "Specifies the input's corner radius."
            },
            {
              "name": "--calcite-filter-input-shadow",
              "description": "Specifies the shadow around the input."
            },
            {
              "name": "--calcite-filter-input-icon-color",
              "description": "Specifies the input's icon color."
            },
            {
              "name": "--calcite-filter-input-text-color",
              "description": "Specifies the input's text color."
            },
            {
              "name": "--calcite-filter-input-placeholder-text-color",
              "description": "Specifies the input's placeholder text color."
            },
            {
              "name": "--calcite-filter-input-actions-background-color",
              "description": "Specifies the background color of the input's `clearable` element."
            },
            {
              "name": "--calcite-filter-input-actions-background-color-hover",
              "description": "Specifies the background color of the input's `clearable` element when hovered."
            },
            {
              "name": "--calcite-filter-input-actions-background-color-press",
              "description": "Specifies the background color of the input's `clearable` element when pressed."
            },
            {
              "name": "--calcite-filter-input-actions-icon-color",
              "description": "Specifies the icon color of the input's `clearable` element."
            },
            {
              "name": "--calcite-filter-input-actions-icon-color-hover",
              "description": "Specifies the icon color of the input's `clearable` element when hovered."
            },
            {
              "name": "--calcite-filter-input-actions-icon-color-press",
              "description": "Specifies the icon color of the input's `clearable` element when pressed."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-filter",
          "declaration": {
            "name": "Filter",
            "module": "src/components/filter/filter.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/flow/flow.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Flow",
          "tagName": "calcite-flow",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteFlow",
          "importPath": "components/calcite-flow",
          "members": [
            {
              "kind": "method",
              "name": "back",
              "description": "Removes the currently active `calcite-flow-item`.",
              "return": {
                "type": {
                  "text": "Promise<HTMLCalciteFlowItemElement | ({\n    selected: boolean;\n    setFocus: (options?: FocusOptions) => Promise<void>;\n    menuOpen: boolean;\n    beforeBack?: () => Promise<void>;\n    showBackButton: boolean;\n} & HTMLElement)>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    },
                    {
                      "name": "HTMLCalciteFlowItemElement",
                      "module": "index.js",
                      "start": 8,
                      "end": 34
                    },
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 105,
                      "end": 112
                    },
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 166,
                      "end": 173
                    },
                    {
                      "name": "HTMLElement",
                      "package": "typescript",
                      "module": "lib/lib.dom.d.ts",
                      "viewUrl": "https://developer.mozilla.org/docs/Web/API/HTMLElement",
                      "start": 214,
                      "end": 225
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "returns",
                  "text": "Promise<HTMLCalciteFlowItemElement | FlowItemLikeElement>"
                }
              ],
              "signature": "(): Promise<FlowItem[\"el\"] | FlowItemLikeElement>",
              "async": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst flow = document.querySelector(\"calcite-flow\");\ndocument.body.append(flow);\nawait flow.componentOnReady();\nconsole.log(\"calcite-flow is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                },
                {
                  "name": "returns",
                  "text": "Promise<void>"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-flow-item` elements to the component."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-flow-background-color",
              "description": "Specifies the component's background color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-flow",
          "declaration": {
            "name": "Flow",
            "module": "src/components/flow/flow.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/flow-item/flow-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "FlowItem",
          "tagName": "calcite-flow-item",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteFlowItem",
          "importPath": "components/calcite-flow-item",
          "members": [
            {
              "kind": "field",
              "name": "beforeBack",
              "description": "When provided, the method will be called before it is removed from its parent `calcite-flow`.",
              "type": {
                "text": "() => Promise<void>",
                "references": [
                  {
                    "name": "Promise",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 6,
                    "end": 13
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "beforeClose",
              "description": "Passes a function to run before the component closes.",
              "type": {
                "text": "() => Promise<void>",
                "references": [
                  {
                    "name": "Promise",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 6,
                    "end": 13
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "closable",
              "description": "When `true`, displays a close button in the trailing side of the component's header.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closed",
              "description": "When `true`, the component will be hidden.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "collapsed",
              "description": "When `true`, hides the component's content area.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "collapsed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "collapsible",
              "description": "When `true`, the component is collapsible.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "collapsible",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst flowItem = document.querySelector(\"calcite-flow-item\");\ndocument.body.append(flowItem);\nawait flowItem.componentOnReady();\nconsole.log(\"calcite-flow-item is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuOpen",
              "description": "When `true`, the action menu items in the `header-menu-actions` slot are open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "menu-open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "scrollContentTo",
              "description": "Scrolls the component's content to a specified set of coordinates.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "ScrollToOptions",
                    "references": [
                      {
                        "name": "ScrollToOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 15
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "myCalciteFlowItem.scrollContentTo({\n  left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.\n  top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element\n  behavior: \"auto\" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).\n});"
                },
                {
                  "name": "param",
                  "text": "options - allows specific coordinates to be defined."
                },
                {
                  "name": "returns",
                  "text": "- promise that resolves once the content is scrolled to."
                }
              ],
              "signature": "(options?: ScrollToOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is displayed within a parent flow.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                },
                {
                  "name": "returns",
                  "text": "promise."
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "showBackButton",
              "description": "When `true`, displays a back button in the component's header.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "show-back-button",
              "docsTags": [
                {
                  "name": "internal"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "closable",
              "description": "When `true`, displays a close button in the trailing side of the component's header.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closable"
            },
            {
              "name": "closed",
              "description": "When `true`, the component will be hidden.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closed"
            },
            {
              "name": "collapsed",
              "description": "When `true`, hides the component's content area.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "collapsed"
            },
            {
              "name": "collapsible",
              "description": "When `true`, the component is collapsible.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "collapsible"
            },
            {
              "name": "description",
              "description": "A description for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "heading-level",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "menu-open",
              "description": "When `true`, the action menu items in the `header-menu-actions` slot are open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "menuOpen"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is displayed within a parent flow.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "show-back-button",
              "description": "When `true`, displays a back button in the component's header.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "showBackButton"
            }
          ],
          "events": [
            {
              "name": "calciteFlowItemBack",
              "description": "Fires when the back button is clicked.",
              "type": {
                "text": "void"
              }
            },
            {
              "name": "calciteFlowItemClose",
              "description": "Fires when the close button is clicked.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteFlowItemCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteFlowItemExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteFlowItemScroll",
              "description": "Fires when the content is scrolled.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteFlowItemToggle",
              "description": "Fires when the collapse button is clicked.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content."
            },
            {
              "name": "action-bar",
              "description": "A slot for adding a `calcite-action-bar` to the component."
            },
            {
              "name": "alerts",
              "description": "A slot for adding `calcite-alert`s to the component."
            },
            {
              "name": "content-top",
              "description": "A slot for adding content above the unnamed (default) slot and below the action-bar slot (if populated)."
            },
            {
              "name": "content-bottom",
              "description": "A slot for adding content below the unnamed (default) slot and above the footer slot (if populated)"
            },
            {
              "name": "header-actions-start",
              "description": "A slot for adding `calcite-action`s or content to the start side of the component's header."
            },
            {
              "name": "header-actions-end",
              "description": "A slot for adding `calcite-action`s or content to the end side of the component's header."
            },
            {
              "name": "header-content",
              "description": "A slot for adding custom content to the component's header."
            },
            {
              "name": "header-menu-actions",
              "description": "A slot for adding an overflow menu with `calcite-action`s inside a `calcite-dropdown`."
            },
            {
              "name": "fab",
              "description": "A slot for adding a `calcite-fab` (floating action button) to perform an action."
            },
            {
              "name": "footer",
              "description": "A slot for adding custom content to the component's footer. Should not be used with the `\"footer-start\"` or `\"footer-end\"` slots."
            },
            {
              "name": "footer-actions",
              "description": "[Deprecated] Use the `\"footer\"` slot instead. A slot for adding `calcite-button`s to the component's footer."
            },
            {
              "name": "footer-end",
              "description": "A slot for adding a trailing footer custom content. Should not be used with the `\"footer\"` slot."
            },
            {
              "name": "footer-start",
              "description": "A slot for adding a leading footer custom content. Should not be used with the `\"footer\"` slot."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-flow-item-footer-padding",
              "description": "[Deprecated] Use `--calcite-flow-footer-space` instead. Specifies the padding of the component's footer."
            },
            {
              "name": "--calcite-flow-item-header-border-block-end",
              "description": "[Deprecated] Use `--calcite-flow-border-color` instead. Specifies the component header's block end border."
            },
            {
              "name": "--calcite-flow-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-flow-heading-text-color",
              "description": "Specifies the text color of the component's `heading`."
            },
            {
              "name": "--calcite-flow-icon-color",
              "description": "Specifies the color of the component's icon."
            },
            {
              "name": "--calcite-flow-description-text-color",
              "description": "Specifies the text color of the component's `description`."
            },
            {
              "name": "--calcite-flow-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-flow-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-flow-header-background-color",
              "description": "Specifies the background color of the component's header."
            },
            {
              "name": "--calcite-flow-footer-background-color",
              "description": "Specifies the background color of the component's footer."
            },
            {
              "name": "--calcite-flow-space",
              "description": "Specifies the padding of the component's `\"unnamed (default)\"` slot."
            },
            {
              "name": "--calcite-flow-header-content-space",
              "description": "Specifies the padding of the `\"header-content\"` slot."
            },
            {
              "name": "--calcite-flow-footer-space",
              "description": "Specifies the padding of the component's footer."
            },
            {
              "name": "--calcite-action-background-color",
              "description": "Specifies the background color of the component's `closable`, `collapsible`, and `back` `calcite-action`s. Applies to any slotted `calcite-action`s."
            },
            {
              "name": "--calcite-action-background-color-hover",
              "description": "Specifies the background color of the component's `closable`, `collapsible`, and `back` `calcite-action`s when hovered. Applies to any slotted `calcite-action`s."
            },
            {
              "name": "--calcite-action-background-color-pressed",
              "description": "Specifies the background color of the component's `closable`, `collapsible`, and `back` `calcite-action`s when pressed. Applies to any slotted `calcite-action`s."
            },
            {
              "name": "--calcite-action-text-color-hover",
              "description": "Specifies the text and icon color of the component's `closable`, `collapsible`, and `back` `calcite-action`s when hovered. Applies to any slotted `calcite-action`s."
            },
            {
              "name": "--calcite-action-text-color-pressed",
              "description": "Specifies the text and icon color of the component's `closable`, `collapsible`, and `back` `calcite-action`s when pressed. Applies to any slotted `calcite-action`s."
            },
            {
              "name": "--calcite-popover-border-color",
              "description": "Specifies the border color of the component's internally rendered `calcite-popover`, which is rendered within a `calcite-action` menu when slotted `calcite-action`s are present in the `header-actions-end` slot. Applies to any slotted `calcite-popover`s."
            },
            {
              "name": "--calcite-flow-header-action-background-color-hover",
              "description": "Specifies the background color of the component's `calcite-action` items  in the flow item header when hovered."
            },
            {
              "name": "--calcite-flow-header-action-background-color-press",
              "description": "Specifies the background color of the component's `calcite-action` items  in the flow item header when pressed."
            },
            {
              "name": "--calcite-flow-header-action-background-color",
              "description": "Specifies the background color of the component's `calcite-action` items  in the flow item header."
            },
            {
              "name": "--calcite-flow-header-action-indicator-color",
              "description": "Specifies the color of the component's `calcite-action` items' indicator in the flow item header."
            },
            {
              "name": "--calcite-flow-header-action-text-color-press",
              "description": "Specifies the text color of the component's `calcite-action` items in the flow item header when pressed."
            },
            {
              "name": "--calcite-flow-header-action-text-color",
              "description": "Specifies the text color of the component's `calcite-action` items in the flow item header."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-flow-item",
          "declaration": {
            "name": "FlowItem",
            "module": "src/components/flow-item/flow-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/graph/graph.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Graph",
          "tagName": "calcite-graph",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteGraph",
          "importPath": "components/calcite-graph",
          "members": [
            {
              "kind": "field",
              "name": "colorStops",
              "description": "Array of values describing a single color stop ([offset, color, opacity])\nThese color stops should be sorted by offset value.",
              "type": {
                "text": "Array<ColorStop>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "ColorStop",
                    "module": "docs/components/graph/interfaces.d.ts",
                    "start": 6,
                    "end": 15
                  }
                ]
              }
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst graph = document.querySelector(\"calcite-graph\");\ndocument.body.append(graph);\nawait graph.componentOnReady();\nconsole.log(\"calcite-graph is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Array of tuples describing a single data point ([x, y])\nThese data points should be sorted by x-axis value.",
              "type": {
                "text": "Array<[number, number]>"
              }
            },
            {
              "kind": "field",
              "name": "highlightMax",
              "description": "End of highlight color if highlighting range.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "highlight-max"
            },
            {
              "kind": "field",
              "name": "highlightMin",
              "description": "Start of highlight color if highlighting range.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "highlight-min"
            },
            {
              "kind": "field",
              "name": "max",
              "description": "Highest point of the range.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "max",
              "reflects": true,
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "min",
              "description": "Lowest point of the range.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "min",
              "reflects": true,
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "highlight-max",
              "description": "End of highlight color if highlighting range.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "highlightMax"
            },
            {
              "name": "highlight-min",
              "description": "Start of highlight color if highlighting range.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "highlightMin"
            },
            {
              "name": "max",
              "description": "Highest point of the range.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "max"
            },
            {
              "name": "min",
              "description": "Lowest point of the range.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "min"
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-graph-highlight-fill-color",
              "description": "Specifies the fill color of the `highlight` element, when present."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-graph",
          "declaration": {
            "name": "Graph",
            "module": "src/components/graph/graph.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/handle/handle.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Handle",
          "tagName": "calcite-handle",
          "deprecated": "Use the `calcite-sort-handle` component instead.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteHandle",
          "importPath": "components/calcite-handle",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst handle = document.querySelector(\"calcite-handle\");\ndocument.body.append(handle);\nawait handle.componentOnReady();\nconsole.log(\"calcite-handle is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dragHandle",
              "description": "Value for the button title attribute.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "drag-handle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "drag-handle",
              "description": "Value for the button title attribute.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "dragHandle"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            }
          ],
          "events": [
            {
              "name": "calciteHandleChange",
              "description": "Fires whenever the component is selected or unselected.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteHandleNudge",
              "description": "Fires when the handle is selected and the up or down arrow key is pressed.",
              "type": {
                "text": "HandleNudge",
                "references": [
                  {
                    "name": "HandleNudge",
                    "module": "docs/components/handle/interfaces.d.ts",
                    "start": 0,
                    "end": 11
                  }
                ]
              },
              "cancelable": false
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-handle-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-handle-background-color-hover",
              "description": "Specifies the component's background color on hover."
            },
            {
              "name": "--calcite-handle-background-color-selected",
              "description": "Specifies the component's background color when selected."
            },
            {
              "name": "--calcite-handle-icon-color",
              "description": "Specifies the component's icon color."
            },
            {
              "name": "--calcite-handle-icon-color-hover",
              "description": "Specifies the component's icon color on hover."
            },
            {
              "name": "--calcite-handle-icon-color-selected",
              "description": "Specifies the component's icon color when selected."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-handle",
          "declaration": {
            "name": "Handle",
            "module": "src/components/handle/handle.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/icon/icon.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Icon",
          "tagName": "calcite-icon",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteIcon",
          "importPath": "components/calcite-icon",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst icon = document.querySelector(\"calcite-icon\");\ndocument.body.append(icon);\nawait icon.componentOnReady();\nconsole.log(\"calcite-icon is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "flipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Displays a specific icon.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true,
              "docsTags": [
                {
                  "name": "see",
                  "text": "[Calcite UI Icons](https://developers.arcgis.com/calcite-design-system/icons)."
                }
              ]
            },
            {
              "kind": "field",
              "name": "preload",
              "description": "When `true`, it preloads the icon data.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "preload",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "textLabel",
              "description": "Accessible name for the component.\n\nIt is recommended to set this value if your icon is semantic.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "text-label"
            }
          ],
          "attributes": [
            {
              "name": "flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "flipRtl"
            },
            {
              "name": "icon",
              "description": "Displays a specific icon.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "preload",
              "description": "When `true`, it preloads the icon data.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "preload"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "text-label",
              "description": "Accessible name for the component.\n\nIt is recommended to set this value if your icon is semantic.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "textLabel"
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-ui-icon-color",
              "description": "[Deprecated] Use `--calcite-icon-color`. Specifies the component's color. Defaults to current color."
            },
            {
              "name": "--calcite-icon-color",
              "description": "Specifies the component's color. Defaults to current color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-icon",
          "declaration": {
            "name": "Icon",
            "module": "src/components/icon/icon.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/inline-editable/inline-editable.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "InlineEditable",
          "tagName": "calcite-inline-editable",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteInlineEditable",
          "importPath": "components/calcite-inline-editable",
          "members": [
            {
              "kind": "field",
              "name": "afterConfirm",
              "description": "Specifies a callback to be executed prior to disabling editing via the controls. When provided, the component's loading state will be handled automatically.",
              "type": {
                "text": "() => Promise<void>",
                "references": [
                  {
                    "name": "Promise",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 6,
                    "end": 13
                  }
                ]
              }
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst inlineEditable = document.querySelector(\"calcite-inline-editable\");\ndocument.body.append(inlineEditable);\nawait inlineEditable.componentOnReady();\nconsole.log(\"calcite-inline-editable is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "controls",
              "description": "When `true` and `editingEnabled` is `true`, displays save and cancel controls on the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "controls",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "editingEnabled",
              "description": "When `true`, inline editing is enabled on the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "editing-enabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component. Defaults to the scale of the wrapped `calcite-input` or the scale of the closest wrapping component with a set scale.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "controls",
              "description": "When `true` and `editingEnabled` is `true`, displays save and cancel controls on the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "controls"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "editing-enabled",
              "description": "When `true`, inline editing is enabled on the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "editingEnabled"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component. Defaults to the scale of the wrapped `calcite-input` or the scale of the closest wrapping component with a set scale.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            }
          ],
          "events": [
            {
              "name": "calciteInlineEditableEditCancel",
              "description": "Emits when the component's \"cancel editing\" button is pressed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInlineEditableEditConfirm",
              "description": "Emits when the component's \"confirm edits\" button is pressed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding a `calcite-input`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-inline-editable-background-color-hover",
              "description": "Specifies the component's background color when hovered."
            },
            {
              "name": "--calcite-inline-editable-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-inline-editable-button-background-color",
              "description": "Specifies the button element's background color when appearance=\"solid\" or appearance=\"outline-fill\"."
            },
            {
              "name": "--calcite-inline-editable-button-corner-radius",
              "description": "Specifies the button element's corner radius."
            },
            {
              "name": "--calcite-inline-editable-button-loader-color",
              "description": "Specifies the button element's loader color."
            },
            {
              "name": "--calcite-inline-editable-button-shadow-color",
              "description": "Specifies the button element's box-shadow color."
            },
            {
              "name": "--calcite-inline-editable-button-text-color",
              "description": "Specifies the button element's text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-inline-editable",
          "declaration": {
            "name": "InlineEditable",
            "module": "src/components/inline-editable/inline-editable.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input/input.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Input",
          "tagName": "calcite-input",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteInput",
          "importPath": "components/calcite-input",
          "members": [
            {
              "kind": "field",
              "name": "accept",
              "description": "Specifies a comma separated list of unique file type specifiers for limiting accepted file types.\nThis property only has an effect when `type` is \"file\".\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "accept",
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the text alignment of the component's value.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "description": "Specifies the type of content to autocomplete, for use in forms.\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "AutoFill",
                "references": [
                  {
                    "name": "AutoFill",
                    "package": "typescript",
                    "module": "lib/lib.dom.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "clearable",
              "description": "When `true`, a clear button is displayed when the component has a value. The clear button shows by default for `\"search\"`, `\"time\"`, and `\"date\"` types, and will not display for the `\"textarea\"` type.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "clearable",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst input = document.querySelector(\"calcite-input\");\ndocument.body.append(input);\nawait input.componentOnReady();\nconsole.log(\"calcite-input is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "files",
              "description": "When `type` is `\"file\"`, specifies the component's selected files.",
              "type": {
                "text": "FileList",
                "references": [
                  {
                    "name": "FileList",
                    "package": "typescript",
                    "module": "lib/lib.dom.d.ts",
                    "viewUrl": "https://developer.mozilla.org/docs/Web/API/FileList",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/files"
                }
              ]
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "groupSeparator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "group-separator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "description": "When the component resides in a form,\nspecifies the maximum value for `type=\"number\"`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "max",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "maxLength",
              "description": "When the component resides in a form,\nspecifies the maximum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "max-length",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "description": "When the component resides in a form,\nspecifies the minimum value for `type=\"number\"`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "min",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "minLength",
              "description": "When the component resides in a form,\nspecifies the minimum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "min-length",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "multiple",
              "description": "When `true`, the component can accept more than one value.\nThis property only has an effect when `type` is \"email\" or \"file\".\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "multiple",
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "numberButtonType",
              "description": "Specifies the placement of the buttons for `type=\"number\"`.",
              "type": {
                "text": "\"horizontal\" | \"none\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "attribute": "number-button-type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pattern",
              "description": "When the component resides in a form,\nspecifies a regular expression (regex) pattern the component's `value` must match for validation.\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "pattern",
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Specifies placeholder text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "placeholder",
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "prefixText",
              "description": "Adds text to the start of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "prefix-text"
            },
            {
              "kind": "field",
              "name": "readOnly",
              "description": "When `true`, the component's value can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "read-only",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "selectText",
              "description": "Selects the text of the component's `value`.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "description": "Specifies the granularity the component's `value` must adhere to.",
              "type": {
                "text": "\"any\" | number",
                "values": [
                  {
                    "value": "any",
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "step",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "suffixText",
              "description": "Adds text to the end of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "suffix-text"
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Specifies the component type.\n\nNote that the following `type`s add type-specific icons by default: `\"date\"`, `\"email\"`, `\"password\"`, `\"search\"`, `\"tel\"`, `\"time\"`.\n\n `\"textarea\"` [Deprecated] use the `calcite-text-area` component instead.",
              "type": {
                "text": "\"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"image\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"week\"",
                "values": [
                  {
                    "value": "color",
                    "type": "string"
                  },
                  {
                    "value": "date",
                    "type": "string"
                  },
                  {
                    "value": "datetime-local",
                    "type": "string"
                  },
                  {
                    "value": "email",
                    "type": "string"
                  },
                  {
                    "value": "file",
                    "type": "string"
                  },
                  {
                    "value": "image",
                    "type": "string"
                  },
                  {
                    "value": "month",
                    "type": "string"
                  },
                  {
                    "value": "number",
                    "type": "string"
                  },
                  {
                    "value": "password",
                    "type": "string"
                  },
                  {
                    "value": "search",
                    "type": "string"
                  },
                  {
                    "value": "tel",
                    "type": "string"
                  },
                  {
                    "value": "text",
                    "type": "string"
                  },
                  {
                    "value": "textarea",
                    "type": "string"
                  },
                  {
                    "value": "time",
                    "type": "string"
                  },
                  {
                    "value": "url",
                    "type": "string"
                  },
                  {
                    "value": "week",
                    "type": "string"
                  }
                ]
              },
              "default": "\"text\"",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "accept",
              "description": "Specifies a comma separated list of unique file type specifiers for limiting accepted file types.\nThis property only has an effect when `type` is \"file\".\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "accept"
            },
            {
              "name": "alignment",
              "description": "Specifies the text alignment of the component's value.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "alignment"
            },
            {
              "name": "clearable",
              "description": "When `true`, a clear button is displayed when the component has a value. The clear button shows by default for `\"search\"`, `\"time\"`, and `\"date\"` types, and will not display for the `\"textarea\"` type.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "clearable"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "group-separator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "groupSeparator"
            },
            {
              "name": "icon",
              "description": "When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "max",
              "description": "When the component resides in a form,\nspecifies the maximum value for `type=\"number\"`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "max"
            },
            {
              "name": "max-length",
              "description": "When the component resides in a form,\nspecifies the maximum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "maxLength"
            },
            {
              "name": "min",
              "description": "When the component resides in a form,\nspecifies the minimum value for `type=\"number\"`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "min"
            },
            {
              "name": "min-length",
              "description": "When the component resides in a form,\nspecifies the minimum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "minLength"
            },
            {
              "name": "multiple",
              "description": "When `true`, the component can accept more than one value.\nThis property only has an effect when `type` is \"email\" or \"file\".\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "multiple"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "number-button-type",
              "description": "Specifies the placement of the buttons for `type=\"number\"`.",
              "type": {
                "text": "\"horizontal\" | \"none\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "fieldName": "numberButtonType"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "pattern",
              "description": "When the component resides in a form,\nspecifies a regular expression (regex) pattern the component's `value` must match for validation.\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "pattern"
            },
            {
              "name": "placeholder",
              "description": "Specifies placeholder text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "placeholder"
            },
            {
              "name": "prefix-text",
              "description": "Adds text to the start of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "prefixText"
            },
            {
              "name": "read-only",
              "description": "When `true`, the component's value can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "readOnly"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "step",
              "description": "Specifies the granularity the component's `value` must adhere to.",
              "type": {
                "text": "\"any\" | number",
                "values": [
                  {
                    "value": "any",
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "step"
            },
            {
              "name": "suffix-text",
              "description": "Adds text to the end of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "suffixText"
            },
            {
              "name": "type",
              "description": "Specifies the component type.\n\nNote that the following `type`s add type-specific icons by default: `\"date\"`, `\"email\"`, `\"password\"`, `\"search\"`, `\"tel\"`, `\"time\"`.\n\n `\"textarea\"` [Deprecated] use the `calcite-text-area` component instead.",
              "type": {
                "text": "\"color\" | \"date\" | \"datetime-local\" | \"email\" | \"file\" | \"image\" | \"month\" | \"number\" | \"password\" | \"search\" | \"tel\" | \"text\" | \"textarea\" | \"time\" | \"url\" | \"week\"",
                "values": [
                  {
                    "value": "color",
                    "type": "string"
                  },
                  {
                    "value": "date",
                    "type": "string"
                  },
                  {
                    "value": "datetime-local",
                    "type": "string"
                  },
                  {
                    "value": "email",
                    "type": "string"
                  },
                  {
                    "value": "file",
                    "type": "string"
                  },
                  {
                    "value": "image",
                    "type": "string"
                  },
                  {
                    "value": "month",
                    "type": "string"
                  },
                  {
                    "value": "number",
                    "type": "string"
                  },
                  {
                    "value": "password",
                    "type": "string"
                  },
                  {
                    "value": "search",
                    "type": "string"
                  },
                  {
                    "value": "tel",
                    "type": "string"
                  },
                  {
                    "value": "text",
                    "type": "string"
                  },
                  {
                    "value": "textarea",
                    "type": "string"
                  },
                  {
                    "value": "time",
                    "type": "string"
                  },
                  {
                    "value": "url",
                    "type": "string"
                  },
                  {
                    "value": "week",
                    "type": "string"
                  }
                ]
              },
              "default": "\"text\"",
              "fieldName": "type"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteInputChange",
              "description": "Fires each time a new `value` is typed and committed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputInput",
              "description": "Fires each time a new `value` is typed.",
              "type": {
                "text": "void"
              }
            }
          ],
          "slots": [
            {
              "name": "action",
              "description": "A slot for positioning a `calcite-button` next to the component."
            },
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-input-prefix-size",
              "description": "Specifies the component's prefix width, when present."
            },
            {
              "name": "--calcite-input-suffix-size",
              "description": "Specifies the component's suffix width, when present."
            },
            {
              "name": "--calcite-input-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-input-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-input-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-input-shadow",
              "description": "Specifies the shadow around the component."
            },
            {
              "name": "--calcite-input-icon-color",
              "description": "Specifies the component's icon color."
            },
            {
              "name": "--calcite-input-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-input-placeholder-text-color",
              "description": "Specifies the component's placeholder text color."
            },
            {
              "name": "--calcite-input-actions-background-color",
              "description": "Specifies the background color of the component's `clearable` and `number-button-type` elements."
            },
            {
              "name": "--calcite-input-actions-background-color-hover",
              "description": "Specifies the background color of the component's `clearable` and `number-button-type` elements when hovered."
            },
            {
              "name": "--calcite-input-actions-background-color-press",
              "description": "Specifies the background color of the component's `clearable` and `number-button-type` elements when pressed."
            },
            {
              "name": "--calcite-input-actions-icon-color",
              "description": "Specifies the icon color of the component's `clearable` and `number-button-type` elements."
            },
            {
              "name": "--calcite-input-actions-icon-color-hover",
              "description": "Specifies the icon color of the component's `clearable` and `number-button-type` elements when hovered."
            },
            {
              "name": "--calcite-input-actions-icon-color-press",
              "description": "Specifies the icon color of the component's `clearable` and `number-button-type` elements when pressed."
            },
            {
              "name": "--calcite-input-loading-background-color",
              "description": "Specifies the background color of the `loading` element, when present."
            },
            {
              "name": "--calcite-input-loading-fill-color",
              "description": "Specifies the fill color of the `loading` element, when present."
            },
            {
              "name": "--calcite-input-prefix-background-color",
              "description": "Specifies the component's prefix background color, when present."
            },
            {
              "name": "--calcite-input-prefix-text-color",
              "description": "Specifies the component's prefix text color, when present."
            },
            {
              "name": "--calcite-input-suffix-background-color",
              "description": "Specifies the component's suffix background color, when present."
            },
            {
              "name": "--calcite-input-suffix-text-color",
              "description": "Specifies the component's suffix text color, when present."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-input",
          "declaration": {
            "name": "Input",
            "module": "src/components/input/input.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input-date-picker/input-date-picker.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "InputDatePicker",
          "tagName": "calcite-input-date-picker",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteInputDatePicker",
          "importPath": "components/calcite-input-date-picker",
          "members": [
            {
              "kind": "field",
              "name": "calendars",
              "description": "Specifies the number of calendars displayed when `range` is `true`.",
              "type": {
                "text": "1 | 2",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  }
                ]
              },
              "default": "2",
              "attribute": "calendars",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst inputDatePicker = document.querySelector(\"calcite-input-date-picker\");\ndocument.body.append(inputDatePicker);\nawait inputDatePicker.componentOnReady();\nconsole.log(\"calcite-input-date-picker is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flipPlacements",
              "description": "Specifies the component's fallback `calcite-date-picker` `placement` when it's initial or specified `placement` has insufficient space available.",
              "type": {
                "text": "Array<\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\">",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "focusTrapDisabled",
              "description": "When `true`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "focus-trap-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Defines the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "description": "When the component resides in a form,\nspecifies the latest allowed date (\"yyyy-mm-dd\").",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxAsDate",
              "description": "Specifies the latest allowed date as a full date object.",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "description": "When the component resides in a form,\nspecifies the earliest allowed date (\"yyyy-mm-dd\").",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minAsDate",
              "description": "Specifies the earliest allowed date as a full date object.",
              "type": {
                "text": "Date",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "monthStyle",
              "description": "Specifies the monthStyle used by the component.",
              "type": {
                "text": "\"abbreviated\" | \"wide\"",
                "values": [
                  {
                    "value": "abbreviated",
                    "type": "string"
                  },
                  {
                    "value": "wide",
                    "type": "string"
                  }
                ]
              },
              "default": "\"wide\"",
              "attribute": "month-style"
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays the `calcite-date-picker` component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Specifies the placement of the `calcite-date-picker` relative to the component.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-start\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "proximitySelectionDisabled",
              "description": "When `true`, disables the default behavior on the third click of narrowing or extending the range.\nInstead starts a new range.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "proximity-selection-disabled"
            },
            {
              "kind": "field",
              "name": "range",
              "description": "When `true`, activates a range for the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "range",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "description": "When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "read-only",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
                }
              ]
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Updates the position of the component.",
              "parameters": [
                {
                  "name": "delayed",
                  "default": "false",
                  "type": {
                    "text": "boolean",
                    "values": [
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "delayed If true, the repositioning is delayed."
                },
                {
                  "name": "returns",
                  "text": "void"
                }
              ],
              "signature": "(delayed?: boolean): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Selected date as a string in ISO format (`\"yyyy-mm-dd\"`).",
              "type": {
                "text": "Array<string> | string",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ],
                "values": [
                  {
                    "type": "Array<string>"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "description": "The component's value as a full date object.",
              "type": {
                "text": "Array<Date> | Date",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 6,
                    "end": 10
                  },
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 14,
                    "end": 18
                  }
                ],
                "values": [
                  {
                    "type": "Array<Date>"
                  },
                  {
                    "type": "Date"
                  }
                ]
              }
            }
          ],
          "attributes": [
            {
              "name": "calendars",
              "description": "Specifies the number of calendars displayed when `range` is `true`.",
              "type": {
                "text": "1 | 2",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  }
                ]
              },
              "default": "2",
              "fieldName": "calendars"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "focus-trap-disabled",
              "description": "When `true`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "focusTrapDisabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "heading-level",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "layout",
              "description": "Defines the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "fieldName": "layout"
            },
            {
              "name": "max",
              "description": "When the component resides in a form,\nspecifies the latest allowed date (\"yyyy-mm-dd\").",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "max"
            },
            {
              "name": "min",
              "description": "When the component resides in a form,\nspecifies the earliest allowed date (\"yyyy-mm-dd\").",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "min"
            },
            {
              "name": "month-style",
              "description": "Specifies the monthStyle used by the component.",
              "type": {
                "text": "\"abbreviated\" | \"wide\"",
                "values": [
                  {
                    "value": "abbreviated",
                    "type": "string"
                  },
                  {
                    "value": "wide",
                    "type": "string"
                  }
                ]
              },
              "default": "\"wide\"",
              "fieldName": "monthStyle"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "open",
              "description": "When `true`, displays the `calcite-date-picker` component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "placement",
              "description": "Specifies the placement of the `calcite-date-picker` relative to the component.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-start\"",
              "fieldName": "placement"
            },
            {
              "name": "proximity-selection-disabled",
              "description": "When `true`, disables the default behavior on the third click of narrowing or extending the range.\nInstead starts a new range.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "proximitySelectionDisabled"
            },
            {
              "name": "range",
              "description": "When `true`, activates a range for the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "range"
            },
            {
              "name": "read-only",
              "description": "When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "readOnly"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "Selected date as a string in ISO format (`\"yyyy-mm-dd\"`).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteInputDatePickerBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputDatePickerBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputDatePickerChange",
              "description": "Fires when the component's `value` changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputDatePickerClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputDatePickerOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-input-date-picker-actions-icon-color",
              "description": "Specifies the component's actions icon color."
            },
            {
              "name": "--calcite-input-date-picker-actions-icon-color-hover",
              "description": "Specifies the component's actions icon color on hover."
            },
            {
              "name": "--calcite-input-date-picker-background-color",
              "description": "Specifies the component's input background color."
            },
            {
              "name": "--calcite-input-date-picker-border-color",
              "description": "Specifies the component's input border color."
            },
            {
              "name": "--calcite-input-date-picker-calendar-actions-background-color",
              "description": "Specifies the background color of actions of the calendar."
            },
            {
              "name": "--calcite-input-date-picker-calendar-actions-background-color-hover",
              "description": "Specifies the background color of actions of the calendar when hovered."
            },
            {
              "name": "--calcite-input-date-picker-calendar-actions-background-color-press",
              "description": "Specifies the background color of actions of the calendar when pressed."
            },
            {
              "name": "--calcite-input-date-picker-calendar-actions-text-color",
              "description": "Specifies the text color of the component's calendar actions."
            },
            {
              "name": "--calcite-input-date-picker-calendar-actions-text-color-press",
              "description": "Specifies the text color of the component's calendar actions when pressed."
            },
            {
              "name": "--calcite-input-date-picker-calendar-border-color",
              "description": "Specifies the component's calendar border color."
            },
            {
              "name": "--calcite-input-date-picker-calendar-corner-radius",
              "description": "Specifies the component's calendar corner radius."
            },
            {
              "name": "--calcite-input-date-picker-calendar-current-day-text-color",
              "description": "Specifies the text color of current day of the component's date-picker."
            },
            {
              "name": "--calcite-input-date-picker-calendar-day-background-color",
              "description": "Specifies the background color of day of the calendar."
            },
            {
              "name": "--calcite-input-date-picker-calendar-day-background-color-hover",
              "description": "Specifies the background color of day of the calendar when hovered."
            },
            {
              "name": "--calcite-input-date-picker-calendar-day-current-text-color",
              "description": "[Deprecated] Use `--calcite-input-date-picker-calendar-current-day-text-color`. Specifies the text color of current day of the component's date-picker."
            },
            {
              "name": "--calcite-input-date-picker-calendar-day-range-text-color",
              "description": "Specifies the text color of select day range of the component's date-picker."
            },
            {
              "name": "--calcite-input-date-picker-calendar-day-text-color-selected",
              "description": "Specifies the text color of selected day of the component's date-picker."
            },
            {
              "name": "--calcite-input-date-picker-calendar-day-outside-range-background-color-hover",
              "description": "Specifies the background color of day's outside current range of the component's date-picker when hovered."
            },
            {
              "name": "--calcite-input-date-picker-calendar-day-outside-range-text-color-hover",
              "description": "Specifies the text color of day's outside current range of the component's date-picker when hovered."
            },
            {
              "name": "--calcite-input-date-picker-calendar-day-text-color",
              "description": "Specifies the text color of day of the component's date-picker."
            },
            {
              "name": "--calcite-input-date-picker-calendar-day-text-color-hover",
              "description": "Specifies the text color of day of the component's date-picker when hovered."
            },
            {
              "name": "--calcite-input-date-picker-calendar-selected-background-color",
              "description": "Specifies the background color of selected day and day range of the calendar."
            },
            {
              "name": "--calcite-input-date-picker-calendar-shadow",
              "description": "the component's calendar shadow."
            },
            {
              "name": "--calcite-input-date-picker-calendar-icon-color",
              "description": "Specifies the component's calendar icon color."
            },
            {
              "name": "--calcite-input-date-picker-calendar-icon-color-hover",
              "description": "Specifies the component's calendar icon color."
            },
            {
              "name": "--calcite-input-date-picker-calendar-month-select-text-color",
              "description": "Specifies the text color of month select of the component's date-picker."
            },
            {
              "name": "--calcite-input-date-picker-calendar-range-divider-color",
              "description": "Specifies the divider color between the component's date-picker."
            },
            {
              "name": "--calcite-input-date-picker-calendar-text-color",
              "description": "Specifies the text color of the component's calendar week, year & suffix."
            },
            {
              "name": "--calcite-input-date-picker-corner-radius",
              "description": "Specifies the component's input corner radius."
            },
            {
              "name": "--calcite-input-date-picker-divider-color",
              "description": "Specifies the component's divider color between two inputs when in range mode."
            },
            {
              "name": "--calcite-input-date-picker-icon-color",
              "description": "Specifies the component's in-field input icon color."
            },
            {
              "name": "--calcite-input-date-picker-icon-color-hover",
              "description": "[Deprecated] Specifies the component's in-field input icon color on hover."
            },
            {
              "name": "--calcite-input-date-picker-placeholder-text-color",
              "description": "Specifies the component's input placeholder text color."
            },
            {
              "name": "--calcite-input-date-picker-shadow",
              "description": "Specifies the component's input shadow."
            },
            {
              "name": "--calcite-input-date-picker-text-color",
              "description": "Specifies the component's input text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-input-date-picker",
          "declaration": {
            "name": "InputDatePicker",
            "module": "src/components/input-date-picker/input-date-picker.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input-message/input-message.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "InputMessage",
          "tagName": "calcite-input-message",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteInputMessage",
          "importPath": "components/calcite-input-message",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst inputMessage = document.querySelector(\"calcite-input-message\");\ndocument.body.append(inputMessage);\nawait inputMessage.componentOnReady();\nconsole.log(\"calcite-input-message is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding text."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-input-message-spacing-value",
              "description": "[Deprecated] Use `--calcite-input-message-spacing`. Specifies the margin spacing at the top of the component."
            },
            {
              "name": "--calcite-input-message-spacing",
              "description": "Specifies the margin spacing at the top of the component."
            },
            {
              "name": "--calcite-input-message-icon-color",
              "description": "Specifies the component's icon color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-input-message",
          "declaration": {
            "name": "InputMessage",
            "module": "src/components/input-message/input-message.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input-number/input-number.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "InputNumber",
          "tagName": "calcite-input-number",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteInputNumber",
          "importPath": "components/calcite-input-number",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the text alignment of the component's value.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "description": "Specifies the type of content to autocomplete, for use in forms.\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "AutoFill",
                "references": [
                  {
                    "name": "AutoFill",
                    "package": "typescript",
                    "module": "lib/lib.dom.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "clearable",
              "description": "When `true`, a clear button is displayed when the component has a value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "clearable",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst inputNumber = document.querySelector(\"calcite-input-number\");\ndocument.body.append(inputNumber);\nawait inputNumber.componentOnReady();\nconsole.log(\"calcite-input-number is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "groupSeparator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "group-separator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true,
              "docsTags": [
                {
                  "name": "futureBreaking",
                  "text": "Remove boolean type as it is not supported."
                }
              ]
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "integer",
              "description": "When `true`, restricts the component to integer numbers only and disables exponential notation.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "integer"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component's button or hyperlink.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, the component is in the loading state and `calcite-progress` is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "description": "When the component resides in a form,\nspecifies the maximum value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "max",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "maxLength",
              "description": "When the component resides in a form,\nspecifies the maximum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "deprecated": "This property has no effect on the component.",
              "attribute": "max-length",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "description": "When the component resides in a form,\nspecifies the minimum value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "min",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "minLength",
              "description": "When the component resides in a form,\nspecifies the minimum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "deprecated": "This property has no effect on the component.",
              "attribute": "min-length",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "numberButtonType",
              "description": "Specifies the placement of the buttons.",
              "type": {
                "text": "\"horizontal\" | \"none\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "attribute": "number-button-type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Specifies placeholder text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "placeholder",
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "prefixText",
              "description": "Adds text to the start of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "prefix-text"
            },
            {
              "kind": "field",
              "name": "readOnly",
              "description": "When `true`, the component's value can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "read-only",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "selectText",
              "description": "Selects the text of the component's `value`.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "description": "Specifies the granularity that the component's value must adhere to.",
              "type": {
                "text": "\"any\" | number",
                "values": [
                  {
                    "value": "any",
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "step",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "suffixText",
              "description": "Adds text to the end of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "suffix-text"
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "description": "Specifies the text alignment of the component's value.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "alignment"
            },
            {
              "name": "clearable",
              "description": "When `true`, a clear button is displayed when the component has a value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "clearable"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "group-separator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "groupSeparator"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "integer",
              "description": "When `true`, restricts the component to integer numbers only and disables exponential notation.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "integer"
            },
            {
              "name": "label",
              "description": "Accessible name for the component's button or hyperlink.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "loading",
              "description": "When `true`, the component is in the loading state and `calcite-progress` is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "max",
              "description": "When the component resides in a form,\nspecifies the maximum value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "max"
            },
            {
              "name": "max-length",
              "description": "When the component resides in a form,\nspecifies the maximum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "maxLength",
              "deprecated": "This property has no effect on the component."
            },
            {
              "name": "min",
              "description": "When the component resides in a form,\nspecifies the minimum value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "min"
            },
            {
              "name": "min-length",
              "description": "When the component resides in a form,\nspecifies the minimum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "minLength",
              "deprecated": "This property has no effect on the component."
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "number-button-type",
              "description": "Specifies the placement of the buttons.",
              "type": {
                "text": "\"horizontal\" | \"none\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "fieldName": "numberButtonType"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "placeholder",
              "description": "Specifies placeholder text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "placeholder"
            },
            {
              "name": "prefix-text",
              "description": "Adds text to the start of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "prefixText"
            },
            {
              "name": "read-only",
              "description": "When `true`, the component's value can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "readOnly"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "step",
              "description": "Specifies the granularity that the component's value must adhere to.",
              "type": {
                "text": "\"any\" | number",
                "values": [
                  {
                    "value": "any",
                    "type": "string"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "step"
            },
            {
              "name": "suffix-text",
              "description": "Adds text to the end of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "suffixText"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteInputNumberChange",
              "description": "Fires each time a new value is typed and committed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputNumberInput",
              "description": "Fires each time a new value is typed.",
              "type": {
                "text": "void"
              }
            }
          ],
          "slots": [
            {
              "name": "action",
              "description": "A slot for positioning a `calcite-action` or other interactive content."
            },
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-input-actions-background-color",
              "description": "Specifies the background color of the component's `clearable` and `number-button-type` elements."
            },
            {
              "name": "--calcite-input-actions-background-color-hover",
              "description": "Specifies the background color of the component's `clearable` and `number-button-type` elements when hovered."
            },
            {
              "name": "--calcite-input-actions-background-color-press",
              "description": "Specifies the background color of the component's `clearable` and `number-button-type` elements when pressed."
            },
            {
              "name": "--calcite-input-actions-icon-color",
              "description": "Specifies the icon color of the component's `clearable` and `number-button-type` elements."
            },
            {
              "name": "--calcite-input-actions-icon-color-hover",
              "description": "Specifies the icon color of the component's `clearable` and `number-button-type` elements when hovered."
            },
            {
              "name": "--calcite-input-actions-icon-color-press",
              "description": "Specifies the icon color of the component's `clearable` and `number-button-type` elements when pressed."
            },
            {
              "name": "--calcite-input-loading-background-color",
              "description": "Specifies the background color of the `loading` element."
            },
            {
              "name": "--calcite-input-loading-fill-color",
              "description": "Specifies the fill color of the `loading` element."
            },
            {
              "name": "--calcite-input-number-background-color",
              "description": "Specifies the background color of the component."
            },
            {
              "name": "--calcite-input-number-border-color",
              "description": "Specifies the border color of the component."
            },
            {
              "name": "--calcite-input-number-corner-radius",
              "description": "Specifies the border radius of the component."
            },
            {
              "name": "--calcite-input-number-icon-color",
              "description": "Specifies the component's icon color."
            },
            {
              "name": "--calcite-input-number-height",
              "description": "Specifies the height of the component."
            },
            {
              "name": "--calcite-input-number-placeholder-text-color",
              "description": "Specifies the text color of the placeholder in the component."
            },
            {
              "name": "--calcite-input-number-text-color",
              "description": "Specifies the text color of the component."
            },
            {
              "name": "--calcite-input-number-text-color-focus",
              "description": "Specifies the text color of the component when focused."
            },
            {
              "name": "--calcite-input-prefix-background-color",
              "description": "Specifies the background color of the prefix element."
            },
            {
              "name": "--calcite-input-prefix-size",
              "description": "Specifies the width of the prefix element."
            },
            {
              "name": "--calcite-input-prefix-text-color",
              "description": "Specifies the text color of the prefix element."
            },
            {
              "name": "--calcite-input-suffix-background-color",
              "description": "Specifies the background color of the suffix element."
            },
            {
              "name": "--calcite-input-suffix-size",
              "description": "Specifies the width of the suffix element."
            },
            {
              "name": "--calcite-input-suffix-text-color",
              "description": "Specifies the text color of the suffix element."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-input-number",
          "declaration": {
            "name": "InputNumber",
            "module": "src/components/input-number/input-number.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input-text/input-text.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "InputText",
          "tagName": "calcite-input-text",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteInputText",
          "importPath": "components/calcite-input-text",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the text alignment of the component's value.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "description": "Specifies the type of content to autocomplete, for use in forms.\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "AutoFill",
                "references": [
                  {
                    "name": "AutoFill",
                    "package": "typescript",
                    "module": "lib/lib.dom.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[autocomplete](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "clearable",
              "description": "When `true`, a clear button is displayed when the component has a value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "clearable",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst inputText = document.querySelector(\"calcite-input-text\");\ndocument.body.append(inputText);\nawait inputText.componentOnReady();\nconsole.log(\"calcite-input-text is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true,
              "docsTags": [
                {
                  "name": "futureBreaking",
                  "text": "Remove boolean type as it is not supported."
                }
              ]
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component's button or hyperlink.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelText",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, the component is in the loading state and `calcite-progress` is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxLength",
              "description": "When the component resides in a form,\nspecifies the maximum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "max-length",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "minLength",
              "description": "When the component resides in a form,\nspecifies the minimum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "min-length",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "pattern",
              "description": "When the component resides in a form,\nspecifies a regular expression (regex) pattern the component's `value` must match for validation.\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "pattern",
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Specifies placeholder text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "placeholder",
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "prefixText",
              "description": "Adds text to the start of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "prefix-text"
            },
            {
              "kind": "field",
              "name": "readOnly",
              "description": "When `true`, the component's value can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "read-only",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "selectText",
              "description": "Selects the text of the component's `value`.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "suffixText",
              "description": "Adds text to the end of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "suffix-text"
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "description": "Specifies the text alignment of the component's value.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "alignment"
            },
            {
              "name": "clearable",
              "description": "When `true`, a clear button is displayed when the component has a value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "clearable"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "label",
              "description": "Accessible name for the component's button or hyperlink.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "label-text",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "loading",
              "description": "When `true`, the component is in the loading state and `calcite-progress` is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "max-length",
              "description": "When the component resides in a form,\nspecifies the maximum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "maxLength"
            },
            {
              "name": "min-length",
              "description": "When the component resides in a form,\nspecifies the minimum length of text for the component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "minLength"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "pattern",
              "description": "When the component resides in a form,\nspecifies a regular expression (regex) pattern the component's `value` must match for validation.\nRead the native attribute's documentation on MDN for more info.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "pattern"
            },
            {
              "name": "placeholder",
              "description": "Specifies placeholder text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "placeholder"
            },
            {
              "name": "prefix-text",
              "description": "Adds text to the start of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "prefixText"
            },
            {
              "name": "read-only",
              "description": "When `true`, the component's value can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "readOnly"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "suffix-text",
              "description": "Adds text to the end of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "suffixText"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteInputTextChange",
              "description": "Fires each time a new value is typed and committed.",
              "type": {
                "text": "void"
              }
            },
            {
              "name": "calciteInputTextInput",
              "description": "Fires each time a new value is typed.",
              "type": {
                "text": "void"
              }
            }
          ],
          "slots": [
            {
              "name": "action",
              "description": "A slot for positioning a button next to the component."
            },
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-input-action-background-color",
              "description": "Specifies the background color of the component's `clearable` element."
            },
            {
              "name": "--calcite-input-action-background-color-hover",
              "description": "Specifies the background color of the component's `clearable` element when hovered."
            },
            {
              "name": "--calcite-input-action-background-color-press",
              "description": "Specifies the background color of the component's `clearable` element when pressed."
            },
            {
              "name": "--calcite-input-action-icon-color",
              "description": "Specifies the icon color of the component's `clearable` & icon elements."
            },
            {
              "name": "--calcite-input-action-icon-color-hover",
              "description": "Specifies the icon color of the component's `clearable` & icon elements when hovered."
            },
            {
              "name": "--calcite-input-action-icon-color-press",
              "description": "Specifies the icon color of the component's `clearable` & icon elements when pressed."
            },
            {
              "name": "--calcite-input-loading-background-color",
              "description": "Specifies the background color of the `loading` element."
            },
            {
              "name": "--calcite-input-loading-fill-color",
              "description": "Specifies the fill color of the `loading` element."
            },
            {
              "name": "--calcite-input-prefix-background-color",
              "description": "When `prefixText` is provided, specifies the background color of the component's prefix element."
            },
            {
              "name": "--calcite-input-prefix-size-x",
              "description": "When `prefixText` is provided, specifies the width of the component's prefix element."
            },
            {
              "name": "--calcite-input-prefix-text-color",
              "description": "When `prefixText` is provided, specifies the text color of the component's prefix element."
            },
            {
              "name": "--calcite-input-suffix-background-color",
              "description": "When `suffixText` is provided, specifies the background color of the component's suffix element."
            },
            {
              "name": "--calcite-input-suffix-size-x",
              "description": "When `suffixText` is provided, specifies the width of the component's suffix element."
            },
            {
              "name": "--calcite-input-suffix-text-color",
              "description": "When `suffixText` is provided, specifies the color of the component's suffix element."
            },
            {
              "name": "--calcite-input-text-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-input-text-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-input-text-corner-radius",
              "description": "Specifies the component's border radius."
            },
            {
              "name": "--calcite-input-text-icon-color",
              "description": "Specifies the component's icon color."
            },
            {
              "name": "--calcite-input-text-placeholder-text-color",
              "description": "Specifies the component's `placeholder` text color."
            },
            {
              "name": "--calcite-input-text-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-input-text-text-color-focus",
              "description": "Specifies the component's text color when focused."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-input-text",
          "declaration": {
            "name": "InputText",
            "module": "src/components/input-text/input-text.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input-time-picker/input-time-picker.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "InputTimePicker",
          "tagName": "calcite-input-time-picker",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteInputTimePicker",
          "importPath": "components/calcite-input-time-picker",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst inputTimePicker = document.querySelector(\"calcite-input-time-picker\");\ndocument.body.append(inputTimePicker);\nawait inputTimePicker.componentOnReady();\nconsole.log(\"calcite-input-time-picker is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focusTrapDisabled",
              "description": "When `true`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "focus-trap-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hourFormat",
              "description": "Specifies the component's hour format, where:\n\n`\"user\"` displays the user's locale format,\n`\"12\"` displays a 12-hour format, and\n`\"24\"` displays a 24-hour format.",
              "type": {
                "text": "\"12\" | \"24\" | \"user\"",
                "values": [
                  {
                    "value": "12",
                    "type": "string"
                  },
                  {
                    "value": "24",
                    "type": "string"
                  },
                  {
                    "value": "user",
                    "type": "string"
                  }
                ]
              },
              "default": "\"user\"",
              "attribute": "hour-format",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "max",
              "description": "When the component resides in a form,\nspecifies the maximum value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "max",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#max)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "description": "When the component resides in a form,\nspecifies the minimum value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "min",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#min)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays the `calcite-time-picker` component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning"
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Determines where the popover will be positioned relative to the input.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "description": "When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "read-only",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
                }
              ]
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Updates the position of the component.",
              "parameters": [
                {
                  "name": "delayed",
                  "default": "false",
                  "type": {
                    "text": "boolean",
                    "values": [
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "delayed If true, delay the repositioning."
                }
              ],
              "signature": "(delayed?: boolean): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "description": "Specifies the granularity the component's `value` must adhere to (in seconds).",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "60",
              "attribute": "step",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The time value in ISO (24-hour) format.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "focus-trap-disabled",
              "description": "When `true`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "focusTrapDisabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "hour-format",
              "description": "Specifies the component's hour format, where:\n\n`\"user\"` displays the user's locale format,\n`\"12\"` displays a 12-hour format, and\n`\"24\"` displays a 24-hour format.",
              "type": {
                "text": "\"12\" | \"24\" | \"user\"",
                "values": [
                  {
                    "value": "12",
                    "type": "string"
                  },
                  {
                    "value": "24",
                    "type": "string"
                  },
                  {
                    "value": "user",
                    "type": "string"
                  }
                ]
              },
              "default": "\"user\"",
              "fieldName": "hourFormat"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "max",
              "description": "When the component resides in a form,\nspecifies the maximum value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "max"
            },
            {
              "name": "min",
              "description": "When the component resides in a form,\nspecifies the minimum value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "min"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "open",
              "description": "When `true`, displays the `calcite-time-picker` component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "placement",
              "description": "Determines where the popover will be positioned relative to the input.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "placement"
            },
            {
              "name": "read-only",
              "description": "When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "readOnly"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "step",
              "description": "Specifies the granularity the component's `value` must adhere to (in seconds).",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "60",
              "fieldName": "step"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The time value in ISO (24-hour) format.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteInputTimePickerBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputTimePickerBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputTimePickerChange",
              "description": "Fires when the component's `value` is modified by the user.",
              "type": {
                "text": "void"
              }
            },
            {
              "name": "calciteInputTimePickerClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputTimePickerOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-input-time-picker-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-input-time-picker-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-input-time-picker-icon-color",
              "description": "Specifies the component's icon color."
            },
            {
              "name": "--calcite-input-time-picker-icon-color-hover",
              "description": "Specifies the component's icon color when hovered."
            },
            {
              "name": "--calcite-input-time-picker-shadow",
              "description": "Specifies the component's shadow."
            },
            {
              "name": "--calcite-input-time-picker-corner-radius",
              "description": "Specifies the component's border radius."
            },
            {
              "name": "--calcite-input-time-picker-input-background-color",
              "description": "Specifies the component's input background color."
            },
            {
              "name": "--calcite-input-time-picker-input-text-color",
              "description": "Specifies the component's input text color."
            },
            {
              "name": "--calcite-input-time-picker-input-shadow",
              "description": "Specifies the component's input shadow."
            },
            {
              "name": "--calcite-input-time-picker-input-corner-radius",
              "description": "Specifies the component's input border radius."
            },
            {
              "name": "--calcite-input-time-picker-input-border-color",
              "description": "Specifies the component's input border color."
            },
            {
              "name": "--calcite-input-time-picker-digit-text-color",
              "description": "Specifies the component's digit text color."
            },
            {
              "name": "--calcite-input-time-picker-digit-icon-color",
              "description": "Specifies the component's digit icon color."
            },
            {
              "name": "--calcite-input-time-picker-digit-border-color-press",
              "description": "Specifies the component's digit border color when pressed."
            },
            {
              "name": "--calcite-input-time-picker-digit-border-color-hover",
              "description": "Specifies the component's digit border color when hovered."
            },
            {
              "name": "--calcite-input-time-picker-action-background-color-hover",
              "description": "Specifies the background color of the component's actions when hovered or focused."
            },
            {
              "name": "--calcite-input-time-picker-action-background-color-press",
              "description": "Specifies the background color of the component's actions when active."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-input-time-picker",
          "declaration": {
            "name": "InputTimePicker",
            "module": "src/components/input-time-picker/input-time-picker.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/input-time-zone/input-time-zone.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "InputTimeZone",
          "tagName": "calcite-input-time-zone",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteInputTimeZone",
          "importPath": "components/calcite-input-time-zone",
          "members": [
            {
              "kind": "field",
              "name": "clearable",
              "description": "When `true`, an empty value (`null`) will be allowed as a `value`.\n\nWhen `false`, an offset or name value is enforced, and clearing the input or blurring will restore the last valid `value`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "clearable",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst inputTimeZone = document.querySelector(\"calcite-input-time-zone\");\ndocument.body.append(inputTimeZone);\nawait inputTimeZone.componentOnReady();\nconsole.log(\"calcite-input-time-zone is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "maxItems",
              "description": "Specifies the component's maximum number of options to display before displaying a scrollbar.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "max-items",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "description": "This specifies the type of `value` and the associated options presented to the user:\n\nUsing `\"offset\"` will provide options that show timezone offsets.\n\nUsing `\"name\"` will provide options that show the IANA time zone names.",
              "type": {
                "text": "\"name\" | \"offset\" | \"region\"",
                "values": [
                  {
                    "value": "name",
                    "type": "string"
                  },
                  {
                    "value": "offset",
                    "type": "string"
                  },
                  {
                    "value": "region",
                    "type": "string"
                  }
                ]
              },
              "default": "\"offset\"",
              "attribute": "mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "offsetStyle",
              "description": "Specifies how the offset will be displayed, where\n\n`\"user\"` uses `UTC` or `GMT` depending on the user's locale,\n`\"gmt\"` always uses `GMT`, and\n`\"utc\"` always uses `UTC`.\n\nThis only applies to the `offset` mode.",
              "type": {
                "text": "\"gmt\" | \"user\" | \"utc\"",
                "values": [
                  {
                    "value": "gmt",
                    "type": "string"
                  },
                  {
                    "value": "user",
                    "type": "string"
                  },
                  {
                    "value": "utc",
                    "type": "string"
                  }
                ]
              },
              "default": "\"user\"",
              "attribute": "offset-style",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "description": "When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "read-only",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "referenceDate",
              "description": "This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n\nIt can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).",
              "type": {
                "text": "Date | string",
                "references": [
                  {
                    "name": "Date",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 4
                  }
                ],
                "values": [
                  {
                    "type": "Date"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "reference-date",
              "docsTags": [
                {
                  "name": "see",
                  "text": "[Date.prototype.toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)."
                }
              ]
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n\nIf no value is provided, the user's time zone offset will be selected by default.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value",
              "docsTags": [
                {
                  "name": "see",
                  "text": "[Identifying time zones and zone offsets](https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC)."
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "clearable",
              "description": "When `true`, an empty value (`null`) will be allowed as a `value`.\n\nWhen `false`, an offset or name value is enforced, and clearing the input or blurring will restore the last valid `value`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "clearable"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "max-items",
              "description": "Specifies the component's maximum number of options to display before displaying a scrollbar.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "maxItems"
            },
            {
              "name": "mode",
              "description": "This specifies the type of `value` and the associated options presented to the user:\n\nUsing `\"offset\"` will provide options that show timezone offsets.\n\nUsing `\"name\"` will provide options that show the IANA time zone names.",
              "type": {
                "text": "\"name\" | \"offset\" | \"region\"",
                "values": [
                  {
                    "value": "name",
                    "type": "string"
                  },
                  {
                    "value": "offset",
                    "type": "string"
                  },
                  {
                    "value": "region",
                    "type": "string"
                  }
                ]
              },
              "default": "\"offset\"",
              "fieldName": "mode"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "offset-style",
              "description": "Specifies how the offset will be displayed, where\n\n`\"user\"` uses `UTC` or `GMT` depending on the user's locale,\n`\"gmt\"` always uses `GMT`, and\n`\"utc\"` always uses `UTC`.\n\nThis only applies to the `offset` mode.",
              "type": {
                "text": "\"gmt\" | \"user\" | \"utc\"",
                "values": [
                  {
                    "value": "gmt",
                    "type": "string"
                  },
                  {
                    "value": "user",
                    "type": "string"
                  },
                  {
                    "value": "utc",
                    "type": "string"
                  }
                ]
              },
              "default": "\"user\"",
              "fieldName": "offsetStyle"
            },
            {
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "read-only",
              "description": "When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "readOnly"
            },
            {
              "name": "reference-date",
              "description": "This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.\n\nIt can be either a Date instance or a string in ISO format (`\"YYYY-MM-DD\"`, `\"YYYY-MM-DDTHH:MM:SS.SSSZ\"`).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "referenceDate"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.\n\nIf no value is provided, the user's time zone offset will be selected by default.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteInputTimeZoneBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputTimeZoneBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputTimeZoneChange",
              "description": "Fires when the component's `value` changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputTimeZoneClose",
              "description": "Fires after the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteInputTimeZoneOpen",
              "description": "Fires after the component is opened and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-input-time-zone",
          "declaration": {
            "name": "InputTimeZone",
            "module": "src/components/input-time-zone/input-time-zone.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/label/label.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Label",
          "tagName": "calcite-label",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteLabel",
          "importPath": "components/calcite-label",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the text alignment of the component.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst label = document.querySelector(\"calcite-label\");\ndocument.body.append(label);\nawait label.componentOnReady();\nconsole.log(\"calcite-label is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "for",
              "description": "Specifies the `id` of the component the label is bound to. Use when the component the label is bound to does not reside within the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "for",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Defines the layout of the label in relation to the component. Use `\"inline\"` positions to wrap the label and component on the same line.  [Deprecated] The `\"default\"` value is deprecated, use `\"block\"` instead.",
              "type": {
                "text": "\"block\" | \"default\" | \"inline\" | \"inline-space-between\"",
                "values": [
                  {
                    "value": "block",
                    "type": "string"
                  },
                  {
                    "value": "default",
                    "type": "string"
                  },
                  {
                    "value": "inline",
                    "type": "string"
                  },
                  {
                    "value": "inline-space-between",
                    "type": "string"
                  }
                ]
              },
              "default": "\"default\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "description": "Specifies the text alignment of the component.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "alignment"
            },
            {
              "name": "for",
              "description": "Specifies the `id` of the component the label is bound to. Use when the component the label is bound to does not reside within the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "for"
            },
            {
              "name": "layout",
              "description": "Defines the layout of the label in relation to the component. Use `\"inline\"` positions to wrap the label and component on the same line.  [Deprecated] The `\"default\"` value is deprecated, use `\"block\"` instead.",
              "type": {
                "text": "\"block\" | \"default\" | \"inline\" | \"inline-space-between\"",
                "values": [
                  {
                    "value": "block",
                    "type": "string"
                  },
                  {
                    "value": "default",
                    "type": "string"
                  },
                  {
                    "value": "inline",
                    "type": "string"
                  },
                  {
                    "value": "inline-space-between",
                    "type": "string"
                  }
                ]
              },
              "default": "\"default\"",
              "fieldName": "layout"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding text and a component that can be labeled."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-label-margin-bottom",
              "description": "Specifies the component's bottom spacing."
            },
            {
              "name": "--calcite-label-text-color",
              "description": "Specifies the component's text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-label",
          "declaration": {
            "name": "Label",
            "module": "src/components/label/label.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/link/link.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Link",
          "tagName": "calcite-link",
          "description": "Any attributes placed on <calcite-link> component will propagate to the rendered child\n\nPassing a 'href' will render an anchor link, instead of a button.\n\nIt is the consumers responsibility to add aria information, rel, target, for links, and any link attributes for form submission",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteLink",
          "importPath": "components/calcite-link",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst link = document.querySelector(\"calcite-link\");\ndocument.body.append(link);\nawait link.componentOnReady();\nconsole.log(\"calcite-link is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "download",
              "description": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value:\nWithout a value, the browser will suggest a filename/extension.",
              "type": {
                "text": "boolean | string",
                "values": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "false",
              "attribute": "download",
              "reflects": true,
              "docsTags": [
                {
                  "name": "see",
                  "text": "[Global download attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download)."
                }
              ]
            },
            {
              "kind": "field",
              "name": "href",
              "description": "Specifies the URL of the linked resource, which can be set as an absolute or relative path.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rel",
              "description": "Specifies the relationship to the linked document defined in `href`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "rel"
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "target",
              "description": "Specifies the frame or window to open the linked document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "target"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "download",
              "description": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value:\nWithout a value, the browser will suggest a filename/extension.",
              "type": {
                "text": "boolean | string",
                "values": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "false",
              "fieldName": "download"
            },
            {
              "name": "href",
              "description": "Specifies the URL of the linked resource, which can be set as an absolute or relative path.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "href"
            },
            {
              "name": "icon-end",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconEnd"
            },
            {
              "name": "icon-flip-rtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            },
            {
              "name": "rel",
              "description": "Specifies the relationship to the linked document defined in `href`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "rel"
            },
            {
              "name": "target",
              "description": "Specifies the frame or window to open the linked document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "target"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding text."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-link-text-color",
              "description": "Specifies the component's text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-link",
          "declaration": {
            "name": "Link",
            "module": "src/components/link/link.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list/list.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "List",
          "tagName": "calcite-list",
          "description": "A general purpose list that enables users to construct list items that conform to Calcite styling.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteList",
          "importPath": "components/calcite-list",
          "members": [
            {
              "kind": "field",
              "name": "canPull",
              "description": "When provided, the method will be called to determine whether the element can move from the list.",
              "type": {
                "text": "(detail: ListDragDetail) => boolean | \"clone\"",
                "references": [
                  {
                    "name": "ListDragDetail",
                    "module": "docs/components/list/interfaces.d.ts",
                    "start": 9,
                    "end": 23
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "canPut",
              "description": "When provided, the method will be called to determine whether the element can be added from another list.",
              "type": {
                "text": "(detail: ListDragDetail) => boolean",
                "references": [
                  {
                    "name": "ListDragDetail",
                    "module": "docs/components/list/interfaces.d.ts",
                    "start": 9,
                    "end": 23
                  }
                ]
              }
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst list = document.querySelector(\"calcite-list\");\ndocument.body.append(list);\nawait list.componentOnReady();\nconsole.log(\"calcite-list is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "displayMode",
              "description": "Specifies the nesting behavior of `calcite-list-item`s, where\n\n`\"flat\"` displays `calcite-list-item`s in a uniform list, and\n\n`\"nested\"` displays `calcite-list-item`s under their parent element.\n\n The parent component's behavior should follow throughout its child elements.",
              "type": {
                "text": "\"flat\" | \"nested\"",
                "values": [
                  {
                    "value": "flat",
                    "type": "string"
                  },
                  {
                    "value": "nested",
                    "type": "string"
                  }
                ]
              },
              "default": "\"flat\"",
              "attribute": "display-mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dragEnabled",
              "description": "When `true`, `calcite-list-item`s are sortable via a draggable button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "drag-enabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filteredData",
              "description": "The currently filtered `calcite-list-item` data.",
              "type": {
                "text": "Array<{\n    label: string;\n    description: string;\n    metadata: Record<string, unknown>;\n    el: HTMLCalciteListItemElement;\n    heading?: Array<string>;\n}>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 134,
                    "end": 139
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "filteredItems",
              "description": "The currently filtered `calcite-list-item`s.",
              "type": {
                "text": "Array<HTMLCalciteListItemElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteListItemElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 32
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "filterEnabled",
              "description": "When `true`, an input appears at the top of the component that can be used by end users to filter `calcite-list-item`s.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "filter-enabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filterLabel",
              "description": "Specifies an accessible name for the filter input field.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "filter-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filterPlaceholder",
              "description": "Placeholder text for the component's filter input field.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "filter-placeholder",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filterPredicate",
              "description": "Specifies a function to handle filtering.",
              "type": {
                "text": "(item: HTMLCalciteListItemElement) => boolean",
                "references": [
                  {
                    "name": "HTMLCalciteListItemElement",
                    "module": "index.js",
                    "start": 7,
                    "end": 33
                  }
                ]
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "myList.filterPredicate = (myListItem) => {\n  // returns true to show the list item if some condition is met\n  return myListItem.label.includes(\"someValue\");\n};"
                }
              ]
            },
            {
              "kind": "field",
              "name": "filterProps",
              "description": "Specifies the properties to match against when filtering. If not set, all properties will be matched (`description`, `label`, `metadata`, and the `calcite-list-item-group`'s `heading`).",
              "type": {
                "text": "Array<string>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "filterText",
              "description": "Text for the component's filter input field.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "filter-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "group",
              "description": "The list's group identifier.\n\nTo drag elements from one list into another, both lists must have the same group value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "group",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "interactionMode",
              "description": "Specifies the interaction mode of the component.\n\n`\"interactive\"` allows interaction styling and pointer changes on hover\n\n`\"static\"` does not allow interaction styling and pointer changes on hover\n\nThe `\"static\"` value should only be used when `selectionMode` is `\"none\"`.",
              "type": {
                "text": "\"interactive\" | \"static\"",
                "values": [
                  {
                    "value": "interactive",
                    "type": "string"
                  },
                  {
                    "value": "static",
                    "type": "string"
                  }
                ]
              },
              "default": "\"interactive\"",
              "attribute": "interaction-mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Specifies an accessible name for the component.\n\nWhen `dragEnabled` is `true` and multiple list sorting is enabled with `group`, specifies the component's name for dragging between lists.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system"
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "description": "The currently selected items.",
              "type": {
                "text": "Array<HTMLCalciteListItemElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteListItemElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 32
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "selectionAppearance",
              "description": "Specifies the selection appearance - `\"icon\"` (displays a checkmark or dot) or `\"border\"` (displays a border).",
              "type": {
                "text": "\"border\" | \"icon\"",
                "values": [
                  {
                    "value": "border",
                    "type": "string"
                  },
                  {
                    "value": "icon",
                    "type": "string"
                  }
                ]
              },
              "default": "\"icon\"",
              "attribute": "selection-appearance",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection,\n\n`\"single-persist\"` allows one selection and prevents de-selection, and\n\n`\"none\"` does not allow any selections.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "attribute": "selection-mode",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                },
                {
                  "name": "returns"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "sortDisabled",
              "description": "When `true`, and a `group` is defined, `calcite-list-item`s are no longer sortable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "sort-disabled",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "display-mode",
              "description": "Specifies the nesting behavior of `calcite-list-item`s, where\n\n`\"flat\"` displays `calcite-list-item`s in a uniform list, and\n\n`\"nested\"` displays `calcite-list-item`s under their parent element.\n\n The parent component's behavior should follow throughout its child elements.",
              "type": {
                "text": "\"flat\" | \"nested\"",
                "values": [
                  {
                    "value": "flat",
                    "type": "string"
                  },
                  {
                    "value": "nested",
                    "type": "string"
                  }
                ]
              },
              "default": "\"flat\"",
              "fieldName": "displayMode"
            },
            {
              "name": "drag-enabled",
              "description": "When `true`, `calcite-list-item`s are sortable via a draggable button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "dragEnabled"
            },
            {
              "name": "filter-enabled",
              "description": "When `true`, an input appears at the top of the component that can be used by end users to filter `calcite-list-item`s.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "filterEnabled"
            },
            {
              "name": "filter-label",
              "description": "Specifies an accessible name for the filter input field.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "filterLabel"
            },
            {
              "name": "filter-placeholder",
              "description": "Placeholder text for the component's filter input field.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "filterPlaceholder"
            },
            {
              "name": "filter-text",
              "description": "Text for the component's filter input field.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "filterText"
            },
            {
              "name": "group",
              "description": "The list's group identifier.\n\nTo drag elements from one list into another, both lists must have the same group value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "group"
            },
            {
              "name": "interaction-mode",
              "description": "Specifies the interaction mode of the component.\n\n`\"interactive\"` allows interaction styling and pointer changes on hover\n\n`\"static\"` does not allow interaction styling and pointer changes on hover\n\nThe `\"static\"` value should only be used when `selectionMode` is `\"none\"`.",
              "type": {
                "text": "\"interactive\" | \"static\"",
                "values": [
                  {
                    "value": "interactive",
                    "type": "string"
                  },
                  {
                    "value": "static",
                    "type": "string"
                  }
                ]
              },
              "default": "\"interactive\"",
              "fieldName": "interactionMode"
            },
            {
              "name": "label",
              "description": "Specifies an accessible name for the component.\n\nWhen `dragEnabled` is `true` and multiple list sorting is enabled with `group`, specifies the component's name for dragging between lists.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selection-appearance",
              "description": "Specifies the selection appearance - `\"icon\"` (displays a checkmark or dot) or `\"border\"` (displays a border).",
              "type": {
                "text": "\"border\" | \"icon\"",
                "values": [
                  {
                    "value": "border",
                    "type": "string"
                  },
                  {
                    "value": "icon",
                    "type": "string"
                  }
                ]
              },
              "default": "\"icon\"",
              "fieldName": "selectionAppearance"
            },
            {
              "name": "selection-mode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection,\n\n`\"single-persist\"` allows one selection and prevents de-selection, and\n\n`\"none\"` does not allow any selections.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "fieldName": "selectionMode"
            },
            {
              "name": "sort-disabled",
              "description": "When `true`, and a `group` is defined, `calcite-list-item`s are no longer sortable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "sortDisabled"
            }
          ],
          "events": [
            {
              "name": "calciteListChange",
              "description": "Fires when the component's selected items have changed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteListDragEnd",
              "description": "Fires when the component's dragging has ended.",
              "type": {
                "text": "ListDragDetail",
                "references": [
                  {
                    "name": "ListDragDetail",
                    "module": "docs/components/list/interfaces.d.ts",
                    "start": 0,
                    "end": 14
                  }
                ]
              },
              "cancelable": false
            },
            {
              "name": "calciteListDragStart",
              "description": "Fires when the component's dragging has started.",
              "type": {
                "text": "ListDragDetail",
                "references": [
                  {
                    "name": "ListDragDetail",
                    "module": "docs/components/list/interfaces.d.ts",
                    "start": 0,
                    "end": 14
                  }
                ]
              },
              "cancelable": false
            },
            {
              "name": "calciteListFilter",
              "description": "Fires when the component's filter has changed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteListMoveHalt",
              "description": "Fires when a user attempts to move an element using the sort menu and 'canPut' or 'canPull' returns falsy.",
              "type": {
                "text": "ListDragDetail",
                "references": [
                  {
                    "name": "ListDragDetail",
                    "module": "docs/components/list/interfaces.d.ts",
                    "start": 0,
                    "end": 14
                  }
                ]
              },
              "deprecated": "No longer necessary.",
              "cancelable": false
            },
            {
              "name": "calciteListOrderChange",
              "description": "Fires when the component's item order changes.",
              "type": {
                "text": "ListDragDetail",
                "references": [
                  {
                    "name": "ListDragDetail",
                    "module": "docs/components/list/interfaces.d.ts",
                    "start": 0,
                    "end": 14
                  }
                ]
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-list-item` and `calcite-list-item-group` elements."
            },
            {
              "name": "filter-actions-start",
              "description": "A slot for adding actionable `calcite-action` elements before the filter component."
            },
            {
              "name": "filter-actions-end",
              "description": "A slot for adding actionable `calcite-action` elements after the filter component."
            },
            {
              "name": "filter-no-results",
              "description": "When `filterEnabled` is `true`, a slot for adding content to display when no results are found."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-list-background-color",
              "description": "Specifies the component's background color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-list",
          "declaration": {
            "name": "List",
            "module": "src/components/list/list.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list-item/list-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ListItem",
          "tagName": "calcite-list-item",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteListItem",
          "importPath": "components/calcite-list-item",
          "members": [
            {
              "kind": "field",
              "name": "closable",
              "description": "When `true`, a close button is added to the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closed",
              "description": "When `true`, hides the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closed",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst listItem = document.querySelector(\"calcite-list-item\");\ndocument.body.append(listItem);\nawait listItem.componentOnReady();\nconsole.log(\"calcite-list-item is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description for the component. Displays below the label text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dragDisabled",
              "description": "When `true`, the item is not draggable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "drag-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "The label text of the component. Displays above the description text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "metadata",
              "description": "Provides additional metadata to the component. Primary use is for a filter on the parent `calcite-list`.",
              "type": {
                "text": "{\n    [x: string]: unknown;\n}"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, the item is open to show child components.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "deprecated": "Use `expanded` prop instead.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true,
              "docsTags": [
                {
                  "name": "internal"
                }
              ]
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true` and the parent `calcite-list`'s `selectionMode` is `\"single\"`, `\"single-persist\"', or `\"multiple\"`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "sortHandleOpen",
              "description": "When `true`, displays and positions the sort handle.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "sort-handle-open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "unavailable",
              "description": "When `true`, the component's content appears inactive.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "unavailable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "closable",
              "description": "When `true`, a close button is added to the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closable"
            },
            {
              "name": "closed",
              "description": "When `true`, hides the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closed"
            },
            {
              "name": "description",
              "description": "A description for the component. Displays below the label text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "drag-disabled",
              "description": "When `true`, the item is not draggable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "dragDisabled"
            },
            {
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "icon-end",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconEnd"
            },
            {
              "name": "icon-flip-rtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            },
            {
              "name": "label",
              "description": "The label text of the component. Displays above the description text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "open",
              "description": "When `true`, the item is open to show child components.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open",
              "deprecated": "Use `expanded` prop instead."
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selected",
              "description": "When `true` and the parent `calcite-list`'s `selectionMode` is `\"single\"`, `\"single-persist\"', or `\"multiple\"`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "sort-handle-open",
              "description": "When `true`, displays and positions the sort handle.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "sortHandleOpen"
            },
            {
              "name": "unavailable",
              "description": "When `true`, the component's content appears inactive.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "unavailable"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteListItemClose",
              "description": "Fires when the close button is clicked.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteListItemCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteListItemExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteListItemSelect",
              "description": "Fires when the component is selected.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteListItemSortHandleBeforeClose",
              "description": "Fires when the sort handle is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteListItemSortHandleBeforeOpen",
              "description": "Fires when the sort handle is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteListItemSortHandleClose",
              "description": "Fires when the sort handle is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteListItemSortHandleOpen",
              "description": "Fires when the sort handle is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteListItemToggle",
              "description": "Fires when the open button is clicked.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-list`, `calcite-list-item` and `calcite-list-item-group` elements."
            },
            {
              "name": "actions-start",
              "description": "A slot for adding actionable `calcite-action` elements before the content of the component."
            },
            {
              "name": "content-start",
              "description": "A slot for adding non-actionable elements before the label and description of the component."
            },
            {
              "name": "content",
              "description": "A slot for adding non-actionable, centered content in place of the `label` and `description` of the component."
            },
            {
              "name": "content-end",
              "description": "A slot for adding non-actionable elements after the label and description of the component."
            },
            {
              "name": "actions-end",
              "description": "A slot for adding actionable `calcite-action` elements after the content of the component."
            },
            {
              "name": "content-bottom",
              "description": "A slot for adding content below the component's `label` and `description`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-list-background-color-hover",
              "description": "Specifies the component's background color when hovered."
            },
            {
              "name": "--calcite-list-background-color-press",
              "description": "Specifies the component's background color when pressed."
            },
            {
              "name": "--calcite-list-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-list-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-list-content-text-color",
              "description": "Specifies the content color."
            },
            {
              "name": "--calcite-list-description-text-color",
              "description": "Specifies the `description` color."
            },
            {
              "name": "--calcite-list-icon-color",
              "description": "Specifies the component's icon color."
            },
            {
              "name": "--calcite-list-label-text-color",
              "description": "Specifies the `label` color."
            },
            {
              "name": "--calcite-list-selection-border-color",
              "description": "Specifies the component's selection border color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-list-item",
          "declaration": {
            "name": "ListItem",
            "module": "src/components/list-item/list-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/list-item-group/list-item-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ListItemGroup",
          "tagName": "calcite-list-item-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteListItemGroup",
          "importPath": "components/calcite-list-item-group",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst listItemGroup = document.querySelector(\"calcite-list-item-group\");\ndocument.body.append(listItemGroup);\nawait listItemGroup.componentOnReady();\nconsole.log(\"calcite-list-item-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "The header text for all nested `calcite-list-item` rows.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true,
              "docsTags": [
                {
                  "name": "internal"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "heading",
              "description": "The header text for all nested `calcite-list-item` rows.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-list-item` and `calcite-list-item-group` elements."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-list-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-list-color",
              "description": "Specifies the component's color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-list-item-group",
          "declaration": {
            "name": "ListItemGroup",
            "module": "src/components/list-item-group/list-item-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/loader/loader.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Loader",
          "tagName": "calcite-loader",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteLoader",
          "importPath": "components/calcite-loader",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst loader = document.querySelector(\"calcite-loader\");\ndocument.body.append(loader);\nawait loader.componentOnReady();\nconsole.log(\"calcite-loader is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "inline",
              "description": "When `true`, the component displays smaller.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "inline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "description": "When not `inline`, displays text under the component's indicator.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"\"",
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Specifies the component type.\n\nUse `\"indeterminate\"` if finding actual progress value is impossible. Otherwise, use `\"determinate\"` to have the value indicate the progress or `\"determinate-value\"` to have the value label displayed along the progress.",
              "type": {
                "text": "\"determinate\" | \"determinate-value\" | \"indeterminate\"",
                "values": [
                  {
                    "value": "determinate",
                    "type": "string"
                  },
                  {
                    "value": "determinate-value",
                    "type": "string"
                  },
                  {
                    "value": "indeterminate",
                    "type": "string"
                  }
                ]
              },
              "default": "\"indeterminate\"",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value. Valid only for `\"determinate\"` indicators. Percent complete of 100.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "inline",
              "description": "When `true`, the component displays smaller.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "inline"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "text",
              "description": "When not `inline`, displays text under the component's indicator.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"\"",
              "fieldName": "text"
            },
            {
              "name": "type",
              "description": "Specifies the component type.\n\nUse `\"indeterminate\"` if finding actual progress value is impossible. Otherwise, use `\"determinate\"` to have the value indicate the progress or `\"determinate-value\"` to have the value label displayed along the progress.",
              "type": {
                "text": "\"determinate\" | \"determinate-value\" | \"indeterminate\"",
                "values": [
                  {
                    "value": "determinate",
                    "type": "string"
                  },
                  {
                    "value": "determinate-value",
                    "type": "string"
                  },
                  {
                    "value": "indeterminate",
                    "type": "string"
                  }
                ]
              },
              "default": "\"indeterminate\"",
              "fieldName": "type"
            },
            {
              "name": "value",
              "description": "The component's value. Valid only for `\"determinate\"` indicators. Percent complete of 100.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "value"
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-loader-font-size",
              "description": "When `type` is not `\"indeterminate\"` or `inline`, specifies the font size of the loading percentage."
            },
            {
              "name": "--calcite-loader-size",
              "description": "Specifies the component's width and height."
            },
            {
              "name": "--calcite-loader-size-inline",
              "description": "[Deprecated] Use `--calcite-loader-size`. Specifies the width and height of the component when set to inline."
            },
            {
              "name": "--calcite-loader-spacing",
              "description": "Specifies the the component's padding."
            },
            {
              "name": "--calcite-loader-progress-color-inline",
              "description": "When `inline`, specifies the component's progress ring color."
            },
            {
              "name": "--calcite-loader-text-spacing",
              "description": "When not `inline`, specifies the component's `text` margin."
            },
            {
              "name": "--calcite-loader-text-weight",
              "description": "When not `inline` and `text` is provided, specifies the component's `text` font weight."
            },
            {
              "name": "--calcite-loader-text-color",
              "description": "When not `inline` and `text` is provided, specifies the component's `text` color."
            },
            {
              "name": "--calcite-loader-progress-color",
              "description": "When not `inline`, specifies the component's progress ring color."
            },
            {
              "name": "--calcite-loader-track-color",
              "description": "Specifies the component's track color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-loader",
          "declaration": {
            "name": "Loader",
            "module": "src/components/loader/loader.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu/menu.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Menu",
          "tagName": "calcite-menu",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteMenu",
          "importPath": "components/calcite-menu",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst menu = document.querySelector(\"calcite-menu\");\ndocument.body.append(menu);\nawait menu.componentOnReady();\nconsole.log(\"calcite-menu is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Specifies the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "layout",
              "description": "Specifies the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "fieldName": "layout"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-menu",
          "declaration": {
            "name": "Menu",
            "module": "src/components/menu/menu.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/menu-item/menu-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "MenuItem",
          "tagName": "calcite-menu-item",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteMenuItem",
          "importPath": "components/calcite-menu-item",
          "members": [
            {
              "kind": "field",
              "name": "active",
              "description": "When `true`, the component is highlighted.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "breadcrumb",
              "description": "When `true`, the component displays a breadcrumb trail for use as a navigational aid.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "breadcrumb",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst menuItem = document.querySelector(\"calcite-menu-item\");\ndocument.body.append(menuItem);\nawait menuItem.componentOnReady();\nconsole.log(\"calcite-menu-item is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "href",
              "description": "Specifies the URL destination of the component, which can be set as an absolute or relative path.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, the component will display any slotted `calcite-menu-item` in an open overflow menu.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rel",
              "description": "Defines the relationship between the `href` value and the current document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "rel",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "target",
              "description": "Specifies where to open the linked document defined in the `href` property.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "target",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "text",
              "description": "Specifies the text to display.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "text"
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "When `true`, the component is highlighted.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "breadcrumb",
              "description": "When `true`, the component displays a breadcrumb trail for use as a navigational aid.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "breadcrumb"
            },
            {
              "name": "href",
              "description": "Specifies the URL destination of the component, which can be set as an absolute or relative path.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "href"
            },
            {
              "name": "icon-end",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconEnd"
            },
            {
              "name": "icon-flip-rtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "open",
              "description": "When `true`, the component will display any slotted `calcite-menu-item` in an open overflow menu.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "rel",
              "description": "Defines the relationship between the `href` value and the current document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "rel"
            },
            {
              "name": "target",
              "description": "Specifies where to open the linked document defined in the `href` property.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "target"
            },
            {
              "name": "text",
              "description": "Specifies the text to display.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "text"
            }
          ],
          "events": [
            {
              "name": "calciteMenuItemSelect",
              "description": "Emits when the component is selected.",
              "type": {
                "text": "void"
              }
            }
          ],
          "slots": [
            {
              "name": "submenu-item",
              "description": "A slot for adding `calcite-menu-item`s in a submenu."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-menu-item-accent-color",
              "description": "Specifies the border color of the component when `active`."
            },
            {
              "name": "--calcite-menu-background-color",
              "description": "Specifies the background color of the component."
            },
            {
              "name": "--calcite-menu-item-sub-menu-border-color",
              "description": "Specifies the border color of sub-menu."
            },
            {
              "name": "--calcite-menu-item-sub-menu-corner-radius",
              "description": "Specifies the border radius of sub-menu."
            },
            {
              "name": "--calcite-menu-text-color",
              "description": "Specifies the text color of the component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-menu-item",
          "declaration": {
            "name": "MenuItem",
            "module": "src/components/menu-item/menu-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/meter/meter.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Meter",
          "tagName": "calcite-meter",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteMeter",
          "importPath": "components/calcite-meter",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline\" | \"outline-fill\" | \"solid\"",
                "values": [
                  {
                    "value": "outline",
                    "type": "string"
                  },
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"outline-fill\"",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst meter = document.querySelector(\"calcite-meter\");\ndocument.body.append(meter);\nawait meter.componentOnReady();\nconsole.log(\"calcite-meter is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fillType",
              "description": "Specifies the component's display, where `\"single\"` displays a single color and `\"range\"` displays a range of colors based on provided `low`, `high`, `min` or `max` values.",
              "type": {
                "text": "\"range\" | \"single\"",
                "values": [
                  {
                    "value": "range",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  }
                ]
              },
              "default": "\"range\"",
              "attribute": "fill-type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "groupSeparator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "group-separator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "high",
              "description": "Specifies a high value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "high",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "low",
              "description": "Specifies a low value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "low",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "description": "Specifies the highest allowed value of the component.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "100",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "min",
              "description": "Specifies the lowest allowed value of the component.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system"
            },
            {
              "kind": "field",
              "name": "rangeLabels",
              "description": "When `true`, displays the values of `high`, `low`, `min`, and `max`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "range-labels",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rangeLabelType",
              "description": "When `rangeLabels` is `true`, specifies the format of displayed labels.",
              "type": {
                "text": "\"percent\" | \"units\"",
                "values": [
                  {
                    "value": "percent",
                    "type": "string"
                  },
                  {
                    "value": "units",
                    "type": "string"
                  }
                ]
              },
              "default": "\"percent\"",
              "attribute": "range-label-type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "unitLabel",
              "description": "When `rangeLabelType` is `\"units\"` and either `valueLabel` or `rangeLabels` are `true`, displays beside the `value` and/or  `min` values.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"\"",
              "attribute": "unit-label"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Specifies the current value of the component.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "valueLabel",
              "description": "When `true`, displays the current value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "value-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "valueLabelType",
              "description": "When `valueLabel` is `true`, specifies the format of displayed label.",
              "type": {
                "text": "\"percent\" | \"units\"",
                "values": [
                  {
                    "value": "percent",
                    "type": "string"
                  },
                  {
                    "value": "units",
                    "type": "string"
                  }
                ]
              },
              "default": "\"percent\"",
              "attribute": "value-label-type",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline\" | \"outline-fill\" | \"solid\"",
                "values": [
                  {
                    "value": "outline",
                    "type": "string"
                  },
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"outline-fill\"",
              "fieldName": "appearance"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "fill-type",
              "description": "Specifies the component's display, where `\"single\"` displays a single color and `\"range\"` displays a range of colors based on provided `low`, `high`, `min` or `max` values.",
              "type": {
                "text": "\"range\" | \"single\"",
                "values": [
                  {
                    "value": "range",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  }
                ]
              },
              "default": "\"range\"",
              "fieldName": "fillType"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "group-separator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "groupSeparator"
            },
            {
              "name": "high",
              "description": "Specifies a high value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "high"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "low",
              "description": "Specifies a low value.  When `fillType` is `\"range\"`, displays a different color when above the specified threshold.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "low"
            },
            {
              "name": "max",
              "description": "Specifies the highest allowed value of the component.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "100",
              "fieldName": "max"
            },
            {
              "name": "min",
              "description": "Specifies the lowest allowed value of the component.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "min"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "range-label-type",
              "description": "When `rangeLabels` is `true`, specifies the format of displayed labels.",
              "type": {
                "text": "\"percent\" | \"units\"",
                "values": [
                  {
                    "value": "percent",
                    "type": "string"
                  },
                  {
                    "value": "units",
                    "type": "string"
                  }
                ]
              },
              "default": "\"percent\"",
              "fieldName": "rangeLabelType"
            },
            {
              "name": "range-labels",
              "description": "When `true`, displays the values of `high`, `low`, `min`, and `max`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "rangeLabels"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "unit-label",
              "description": "When `rangeLabelType` is `\"units\"` and either `valueLabel` or `rangeLabels` are `true`, displays beside the `value` and/or  `min` values.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"\"",
              "fieldName": "unitLabel"
            },
            {
              "name": "value",
              "description": "Specifies the current value of the component.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "value"
            },
            {
              "name": "value-label",
              "description": "When `true`, displays the current value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "valueLabel"
            },
            {
              "name": "value-label-type",
              "description": "When `valueLabel` is `true`, specifies the format of displayed label.",
              "type": {
                "text": "\"percent\" | \"units\"",
                "values": [
                  {
                    "value": "percent",
                    "type": "string"
                  },
                  {
                    "value": "units",
                    "type": "string"
                  }
                ]
              },
              "default": "\"percent\"",
              "fieldName": "valueLabelType"
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-meter-background-color",
              "description": "Specifies the background color of the component."
            },
            {
              "name": "--calcite-meter-border-color",
              "description": "Specifies the border color of the component and displayed step lines."
            },
            {
              "name": "--calcite-meter-shadow",
              "description": "Specifies the box shadow of the component."
            },
            {
              "name": "--calcite-meter-corner-radius",
              "description": "Specifies the corner radius of the component."
            },
            {
              "name": "--calcite-meter-fill-color",
              "description": "Specifies the color of the component's fill."
            },
            {
              "name": "--calcite-meter-range-text-color",
              "description": "Specifies the color of the component's range labels."
            },
            {
              "name": "--calcite-meter-value-text-color",
              "description": "Specifies the color of the component's value label."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-meter",
          "declaration": {
            "name": "Meter",
            "module": "src/components/meter/meter.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/modal/modal.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Modal",
          "tagName": "calcite-modal",
          "deprecated": "Use the `calcite-dialog` component instead.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteModal",
          "importPath": "components/calcite-modal",
          "members": [
            {
              "kind": "field",
              "name": "beforeClose",
              "description": "Passes a function to run before the component closes.",
              "type": {
                "text": "(el: HTMLCalciteModalElement) => Promise<void>",
                "references": [
                  {
                    "name": "HTMLCalciteModalElement",
                    "module": "index.js",
                    "start": 5,
                    "end": 28
                  },
                  {
                    "name": "Promise",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 33,
                    "end": 40
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "closeButtonDisabled",
              "description": "When `true`, disables the component's close button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "close-button-disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst modal = document.querySelector(\"calcite-modal\");\ndocument.body.append(modal);\nawait modal.componentOnReady();\nconsole.log(\"calcite-modal is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "docked",
              "description": "When `true`, prevents the component from expanding to the entire screen on mobile devices.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "docked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "escapeDisabled",
              "description": "When `true`, disables the default close on escape behavior.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "escape-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focusTrapDisabled",
              "description": "When `true`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "focus-trap-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focusTrapOptions",
              "description": "Specifies custom focus trap configuration on the component, where\n\n`\"allowOutsideClick`\" allows outside clicks,\n`\"initialFocus\"` enables initial focus,\n`\"returnFocusOnDeactivate\"` returns focus when not active, and\n`\"extraContainers\"` specifies additional focusable elements external to the trap (e.g., 3rd-party components appending elements to the document body).\n`\"setReturnFocus\"` customizes the element to which focus is returned when the trap is deactivated. Return `false` to prevent focus return, or `undefined` to use the default behavior (returning focus to the element focused before activation).",
              "type": {
                "text": "{\n    initialFocus?: FocusTargetOrFalse | (() => void);\n    returnFocusOnDeactivate?: boolean;\n    allowOutsideClick?: boolean | MouseEventToBoolean;\n    extraContainers?: string | HTMLElement | SVGElement | Array<string | HTMLElement | SVGElement>;\n    setReturnFocus?: FocusTargetValueOrFalse | ((nodeFocusedBeforeActivation: HTMLElement | SVGElement) => FocusTargetValueOrFalse) | ((nodeFocusedBeforeActivation: HTMLElement | SVGElement) => undefined);\n}"
              }
            },
            {
              "kind": "field",
              "name": "fullscreen",
              "description": "When `true`, sets the component to always be fullscreen. Overrides `widthScale` and `--calcite-modal-width` / `--calcite-modal-height`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "fullscreen",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to top border.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "info",
                    "type": "string"
                  },
                  {
                    "value": "success",
                    "type": "string"
                  },
                  {
                    "value": "warning",
                    "type": "string"
                  }
                ]
              },
              "attribute": "kind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "outsideCloseDisabled",
              "description": "When `true`, disables the closing of the component when clicked outside.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "outside-close-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "scrollContent",
              "description": "Sets the scroll top of the component's content.",
              "parameters": [
                {
                  "name": "top",
                  "default": "0",
                  "type": {
                    "text": "number",
                    "values": [
                      {
                        "type": "number"
                      }
                    ]
                  }
                },
                {
                  "name": "left",
                  "default": "0",
                  "type": {
                    "text": "number",
                    "values": [
                      {
                        "type": "number"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "top"
                },
                {
                  "name": "param",
                  "text": "left"
                }
              ],
              "signature": "(top?: number, left?: number): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's \"close\" button (the first focusable item).",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "updateFocusTrapElements",
              "description": "Updates the element(s) that are included in the focus-trap of the component.",
              "parameters": [
                {
                  "name": "extraContainers",
                  "optional": true,
                  "type": {
                    "text": "Array<string | HTMLElement | SVGElement> | HTMLElement | SVGElement | string",
                    "references": [
                      {
                        "name": "Array",
                        "package": "typescript",
                        "module": "lib/lib.es5.d.ts",
                        "start": 0,
                        "end": 5
                      },
                      {
                        "name": "HTMLElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/HTMLElement",
                        "start": 15,
                        "end": 26
                      },
                      {
                        "name": "SVGElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/SVGElement",
                        "start": 29,
                        "end": 39
                      },
                      {
                        "name": "HTMLElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/HTMLElement",
                        "start": 43,
                        "end": 54
                      },
                      {
                        "name": "SVGElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/SVGElement",
                        "start": 57,
                        "end": 67
                      }
                    ],
                    "values": [
                      {
                        "type": "Array<string | HTMLElement | SVGElement>"
                      },
                      {
                        "type": "HTMLElement"
                      },
                      {
                        "type": "SVGElement"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "extraContainers - Additional elements to include in the focus trap. This is useful for including elements that may have related parts rendered outside the main focus trapping element."
                }
              ],
              "signature": "(extraContainers?: FocusTrapOptions[\"extraContainers\"]): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "widthScale",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "width-scale",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "close-button-disabled",
              "description": "When `true`, disables the component's close button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closeButtonDisabled"
            },
            {
              "name": "docked",
              "description": "When `true`, prevents the component from expanding to the entire screen on mobile devices.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "docked"
            },
            {
              "name": "escape-disabled",
              "description": "When `true`, disables the default close on escape behavior.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "escapeDisabled"
            },
            {
              "name": "focus-trap-disabled",
              "description": "When `true`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "focusTrapDisabled"
            },
            {
              "name": "fullscreen",
              "description": "When `true`, sets the component to always be fullscreen. Overrides `widthScale` and `--calcite-modal-width` / `--calcite-modal-height`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "fullscreen"
            },
            {
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to top border.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "info",
                    "type": "string"
                  },
                  {
                    "value": "success",
                    "type": "string"
                  },
                  {
                    "value": "warning",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "kind"
            },
            {
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "outside-close-disabled",
              "description": "When `true`, disables the closing of the component when clicked outside.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "outsideCloseDisabled"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "width-scale",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "widthScale"
            }
          ],
          "events": [
            {
              "name": "calciteModalBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteModalBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteModalClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteModalOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "header",
              "description": "A slot for adding header text."
            },
            {
              "name": "content",
              "description": "A slot for adding the component's content."
            },
            {
              "name": "content-top",
              "description": "A slot for adding content to the component's sticky header, where content remains at the top of the component when scrolling up and down."
            },
            {
              "name": "content-bottom",
              "description": "A slot for adding content to the component's sticky footer, where content remains at the bottom of the component when scrolling up and down."
            },
            {
              "name": "primary",
              "description": "A slot for adding a primary button."
            },
            {
              "name": "secondary",
              "description": "A slot for adding a secondary button."
            },
            {
              "name": "back",
              "description": "A slot for adding a back button."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-modal-content-background",
              "description": "Specifies the background color of content placed in the component's `\"content\"` slot."
            },
            {
              "name": "--calcite-modal-content-padding",
              "description": "Specifies the padding of the component's `\"content\"` slot."
            },
            {
              "name": "--calcite-modal-scrim-background",
              "description": "Specifies the background color of the component's scrim."
            },
            {
              "name": "--calcite-modal-width",
              "description": "Specifies the width of the component, using `px`, `em`, `rem`, `vw`, or `%`. Will never exceed the width of the viewport. Will not apply if `fullscreen` if set."
            },
            {
              "name": "--calcite-modal-height",
              "description": "Specifies the height of the component, using `px`, `em`, `rem`, `vh`, or `%`. Will never exceed the height of the viewport. Will not apply if `fullscreen` if set."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-modal",
          "declaration": {
            "name": "Modal",
            "module": "src/components/modal/modal.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation/navigation.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Navigation",
          "tagName": "calcite-navigation",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteNavigation",
          "importPath": "components/calcite-navigation",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst navigation = document.querySelector(\"calcite-navigation\");\ndocument.body.append(navigation);\nawait navigation.componentOnReady();\nconsole.log(\"calcite-navigation is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "label",
              "description": "When `navigationAction` is `true`, specifies the label of the `calcite-action`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "navigationAction",
              "description": "When `true`, displays a `calcite-action` and emits a `calciteNavActionSelect` event on selection change.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "navigation-action",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "When `navigationAction` is `true`, sets focus on the component's action element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "label",
              "description": "When `navigationAction` is `true`, specifies the label of the `calcite-action`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "navigation-action",
              "description": "When `true`, displays a `calcite-action` and emits a `calciteNavActionSelect` event on selection change.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "navigationAction"
            }
          ],
          "events": [
            {
              "name": "calciteNavigationActionSelect",
              "description": "When `navigationAction` is `true`, emits when the displayed action selection changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "logo",
              "description": "A slot for adding a `calcite-logo` component to the primary navigation level."
            },
            {
              "name": "user",
              "description": "A slot for adding a `calcite-user` component to the primary navigation level."
            },
            {
              "name": "progress",
              "description": "A slot for adding a `calcite-progress` component to the primary navigation level."
            },
            {
              "name": "navigation-action",
              "description": "A slot for adding a `calcite-action` component to the primary navigation level."
            },
            {
              "name": "content-start",
              "description": "A slot for adding a `calcite-menu`, `calcite-action`, or other interactive elements in the start position of any navigation level."
            },
            {
              "name": "content-center",
              "description": "A slot for adding a `calcite-menu`, `calcite-action`, or other interactive elements in the center position of the primary navigation level."
            },
            {
              "name": "content-end",
              "description": "A slot for adding a `calcite-menu`, `calcite-action`, or other interactive elements in the end position of any navigation level."
            },
            {
              "name": "navigation-secondary",
              "description": "A slot for adding a `calcite-navigation` component in the secondary navigation level. Components rendered here will not display `calcite-navigation-logo` or `calcite-navigation-user` components."
            },
            {
              "name": "navigation-tertiary",
              "description": "A slot for adding a `calcite-navigation` component in the tertiary navigation level.  Components rendered here will not display `calcite-navigation-logo` or `calcite-navigation-user` components."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-navigation-width",
              "description": "Specifies the width of the component's content area."
            },
            {
              "name": "--calcite-navigation-background",
              "description": "[Deprecated] Use `--calcite-navigation-background-color`. Specifies the background color of the component."
            },
            {
              "name": "--calcite-navigation-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-navigation-border-color",
              "description": "Specifies the component's border color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-navigation",
          "declaration": {
            "name": "Navigation",
            "module": "src/components/navigation/navigation.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-logo/navigation-logo.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "NavigationLogo",
          "tagName": "calcite-navigation-logo",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteNavigationLogo",
          "importPath": "components/calcite-navigation-logo",
          "members": [
            {
              "kind": "field",
              "name": "active",
              "description": "When `true`, the component is highlighted.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst navigationLogo = document.querySelector(\"calcite-navigation-logo\");\ndocument.body.append(navigationLogo);\nawait navigationLogo.componentOnReady();\nconsole.log(\"calcite-navigation-logo is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description for the component, which displays below the `heading`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "Specifies heading text for the component, such as a product or organization name.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the heading level of the component's heading for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "description": "Specifies the URL destination of the component, which can be set as an absolute or relative path.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Describes the appearance or function of the `thumbnail`. If no label is provided, context will not be provided to assistive technologies.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "rel",
              "description": "Defines the relationship between the `href` value and the current document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "rel",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "target",
              "description": "Specifies where to open the linked document defined in the `href` property.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "target",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "thumbnail",
              "description": "Specifies the `src` to an image.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "thumbnail"
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "When `true`, the component is highlighted.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "description",
              "description": "A description for the component, which displays below the `heading`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "heading",
              "description": "Specifies heading text for the component, such as a product or organization name.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "heading-level",
              "description": "Specifies the heading level of the component's heading for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "href",
              "description": "Specifies the URL destination of the component, which can be set as an absolute or relative path.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "href"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "label",
              "description": "Describes the appearance or function of the `thumbnail`. If no label is provided, context will not be provided to assistive technologies.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "rel",
              "description": "Defines the relationship between the `href` value and the current document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "rel"
            },
            {
              "name": "target",
              "description": "Specifies where to open the linked document defined in the `href` property.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "target"
            },
            {
              "name": "thumbnail",
              "description": "Specifies the `src` to an image.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "thumbnail"
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-navigation-accent-color",
              "description": "Specifies the component's border color when `active`."
            },
            {
              "name": "--calcite-navigation-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-navigation-logo-heading-text-color",
              "description": "Specifies the component's default color for heading text."
            },
            {
              "name": "--calcite-navigation-logo-text-color",
              "description": "Specifies the component's default color for icon and description text."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-navigation-logo",
          "declaration": {
            "name": "NavigationLogo",
            "module": "src/components/navigation-logo/navigation-logo.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/navigation-user/navigation-user.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "NavigationUser",
          "tagName": "calcite-navigation-user",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteNavigationUser",
          "importPath": "components/calcite-navigation-user",
          "members": [
            {
              "kind": "field",
              "name": "active",
              "description": "When `true`, the component is highlighted.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst navigationUser = document.querySelector(\"calcite-navigation-user\");\ndocument.body.append(navigationUser);\nawait navigationUser.componentOnReady();\nconsole.log(\"calcite-navigation-user is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "fullName",
              "description": "Specifies the full name of the user.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "full-name"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Describes the appearance of the avatar. If no label is provided, context will not be provided to assistive technologies.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "textDisabled",
              "description": "When `true`, hides the `fullName` and `username` contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "text-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "thumbnail",
              "description": "Specifies the `src` to an image (remember to add a token if the user is private).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "thumbnail"
            },
            {
              "kind": "field",
              "name": "userId",
              "description": "Specifies the unique id of the user.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "user-id"
            },
            {
              "kind": "field",
              "name": "username",
              "description": "Specifies the username of the user.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "username"
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "When `true`, the component is highlighted.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "full-name",
              "description": "Specifies the full name of the user.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "fullName"
            },
            {
              "name": "label",
              "description": "Describes the appearance of the avatar. If no label is provided, context will not be provided to assistive technologies.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "text-disabled",
              "description": "When `true`, hides the `fullName` and `username` contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "textDisabled"
            },
            {
              "name": "thumbnail",
              "description": "Specifies the `src` to an image (remember to add a token if the user is private).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "thumbnail"
            },
            {
              "name": "user-id",
              "description": "Specifies the unique id of the user.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "userId"
            },
            {
              "name": "username",
              "description": "Specifies the username of the user.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "username"
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-navigation-accent-color",
              "description": "Specifies the components's border color when `active`."
            },
            {
              "name": "--calcite-navigation-user-avatar-corner-radius",
              "description": "Specifies the component's avatar corner radius."
            },
            {
              "name": "--calcite-navigation-user-avatar-color",
              "description": "Specifies the component's avatar icon color."
            },
            {
              "name": "--calcite-navigation-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-navigation-user-full-name-text-color",
              "description": "Specifies the component's `fullName` text color."
            },
            {
              "name": "--calcite-navigation-user-name-text-color",
              "description": "Specifies the component's `username` text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-navigation-user",
          "declaration": {
            "name": "NavigationUser",
            "module": "src/components/navigation-user/navigation-user.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/notice/notice.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Notice",
          "tagName": "calcite-notice",
          "description": "Notices are intended to be used to present users with important-but-not-crucial contextual tips or copy. Because\nnotices are displayed inline, a common use case is displaying them on page-load to present users with short hints or contextual copy.\nThey are optionally closable - useful for keeping track of whether or not a user has closed the notice. You can also choose not\nto display a notice on page load and set the \"active\" attribute as needed to contextually provide inline messaging to users.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteNotice",
          "importPath": "components/calcite-notice",
          "members": [
            {
              "kind": "field",
              "name": "closable",
              "description": "When `true`, a close button is added to the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst notice = document.querySelector(\"calcite-notice\");\ndocument.body.append(notice);\nawait notice.componentOnReady();\nconsole.log(\"calcite-notice is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to top border and icon.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "info",
                    "type": "string"
                  },
                  {
                    "value": "success",
                    "type": "string"
                  },
                  {
                    "value": "warning",
                    "type": "string"
                  }
                ]
              },
              "default": "\"brand\"",
              "attribute": "kind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, the component is visible.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Specifies the width of the component. [Deprecated] The `\"half\"` value is deprecated, use `\"full\"` instead.",
              "type": {
                "text": "\"auto\" | \"full\" | \"half\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  },
                  {
                    "value": "half",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "width",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "closable",
              "description": "When `true`, a close button is added to the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closable"
            },
            {
              "name": "icon",
              "description": "When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to top border and icon.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "info",
                    "type": "string"
                  },
                  {
                    "value": "success",
                    "type": "string"
                  },
                  {
                    "value": "warning",
                    "type": "string"
                  }
                ]
              },
              "default": "\"brand\"",
              "fieldName": "kind"
            },
            {
              "name": "open",
              "description": "When `true`, the component is visible.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "width",
              "description": "Specifies the width of the component. [Deprecated] The `\"half\"` value is deprecated, use `\"full\"` instead.",
              "type": {
                "text": "\"auto\" | \"full\" | \"half\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  },
                  {
                    "value": "half",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "width"
            }
          ],
          "events": [
            {
              "name": "calciteNoticeBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteNoticeBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteNoticeClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteNoticeOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "title",
              "description": "A slot for adding the title."
            },
            {
              "name": "message",
              "description": "A slot for adding the message."
            },
            {
              "name": "link",
              "description": "A slot for adding a `calcite-action` to take, such as: \"undo\", \"try again\", \"link to page\", etc."
            },
            {
              "name": "actions-end",
              "description": "A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or less actions."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-notice-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-notice-close-background-color-focus",
              "description": "Specifies the component's background color when focused."
            },
            {
              "name": "--calcite-notice-close-background-color-press",
              "description": "Specifies the component's background color when active."
            },
            {
              "name": "--calcite-notice-close-icon-color-hover",
              "description": "Specifies the background color of the component's close button when hovered."
            },
            {
              "name": "--calcite-notice-close-icon-color",
              "description": "Specifies the text color of the component's close button."
            },
            {
              "name": "--calcite-notice-title-text-color",
              "description": "Specifies the component's title text color."
            },
            {
              "name": "--calcite-notice-content-text-color",
              "description": "Specifies the component's content text color."
            },
            {
              "name": "--calcite-notice-width",
              "description": "[Deprecated] Specifies the component's width."
            },
            {
              "name": "--calcite-notice-close-text-color-hover",
              "description": "[Deprecated] Use `--calcite-notice-close-icon-color-hover`. Specifies the background color of the component's close button when hovered."
            },
            {
              "name": "--calcite-notice-close-text-color",
              "description": "[Deprecated] Use `--calcite-notice-close-icon-color`. Specifies the text color of the component's close button."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-notice",
          "declaration": {
            "name": "Notice",
            "module": "src/components/notice/notice.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/option/option.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Option",
          "tagName": "calcite-option",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteOption",
          "importPath": "components/calcite-option",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst option = document.querySelector(\"calcite-option\");\ndocument.body.append(option);\nawait option.componentOnReady();\nconsole.log(\"calcite-option is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "value"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-option",
          "declaration": {
            "name": "Option",
            "module": "src/components/option/option.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/option-group/option-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "OptionGroup",
          "tagName": "calcite-option-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteOptionGroup",
          "importPath": "components/calcite-option-group",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst optionGroup = document.querySelector(\"calcite-option-group\");\ndocument.body.append(optionGroup);\nawait optionGroup.componentOnReady();\nconsole.log(\"calcite-option-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-option`s."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-option-group",
          "declaration": {
            "name": "OptionGroup",
            "module": "src/components/option-group/option-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/pagination/pagination.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Pagination",
          "tagName": "calcite-pagination",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalcitePagination",
          "importPath": "components/calcite-pagination",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst pagination = document.querySelector(\"calcite-pagination\");\ndocument.body.append(pagination);\nawait pagination.componentOnReady();\nconsole.log(\"calcite-pagination is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "method",
              "name": "goTo",
              "description": "Set a specified page as active.",
              "parameters": [
                {
                  "name": "page",
                  "type": {
                    "text": "\"end\" | \"start\" | number",
                    "values": [
                      {
                        "value": "end",
                        "type": "string"
                      },
                      {
                        "value": "start",
                        "type": "string"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "page"
                }
              ],
              "signature": "(page: number | \"start\" | \"end\"): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "groupSeparator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "group-separator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "method",
              "name": "nextPage",
              "description": "Go to the next page of results.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system"
            },
            {
              "kind": "field",
              "name": "pageSize",
              "description": "Specifies the number of items per page.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "20",
              "attribute": "page-size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "previousPage",
              "description": "Go to the previous page of results.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "startItem",
              "description": "Specifies the starting item number.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "1",
              "attribute": "start-item",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "totalItems",
              "description": "Specifies the total number of items.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "total-items",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "group-separator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "groupSeparator"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "page-size",
              "description": "Specifies the number of items per page.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "20",
              "fieldName": "pageSize"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "start-item",
              "description": "Specifies the starting item number.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "1",
              "fieldName": "startItem"
            },
            {
              "name": "total-items",
              "description": "Specifies the total number of items.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "totalItems"
            }
          ],
          "events": [
            {
              "name": "calcitePaginationChange",
              "description": "Emits when the selected page changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-pagination-color",
              "description": "Specifies the component's item color."
            },
            {
              "name": "--calcite-pagination-color-hover",
              "description": "Specifies the component's item color when hovered or selected."
            },
            {
              "name": "--calcite-pagination-color-border-hover",
              "description": "Specifies the component's item bottom border color when hovered."
            },
            {
              "name": "--calcite-pagination-color-border-active",
              "description": "Specifies the component's item bottom border color when selected."
            },
            {
              "name": "--calcite-pagination-background-color",
              "description": "Specifies the component's item background color when active."
            },
            {
              "name": "--calcite-pagination-icon-color-background-hover",
              "description": "Specifies the component's chevron item background color when hovered."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-pagination",
          "declaration": {
            "name": "Pagination",
            "module": "src/components/pagination/pagination.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/panel/panel.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Panel",
          "tagName": "calcite-panel",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalcitePanel",
          "importPath": "components/calcite-panel",
          "members": [
            {
              "kind": "field",
              "name": "beforeClose",
              "description": "Passes a function to run before the component closes.",
              "type": {
                "text": "() => Promise<void>",
                "references": [
                  {
                    "name": "Promise",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 6,
                    "end": 13
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "closable",
              "description": "When `true`, displays a close button in the trailing side of the header.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closed",
              "description": "When `true`, the component will be hidden.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "collapsed",
              "description": "When `true`, hides the component's content area.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "collapsed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "collapseDirection",
              "description": "When `collapsible` is present, specifies the direction of the collapse icon.",
              "type": {
                "text": "\"down\" | \"up\"",
                "values": [
                  {
                    "value": "down",
                    "type": "string"
                  },
                  {
                    "value": "up",
                    "type": "string"
                  }
                ]
              },
              "default": "\"down\"",
              "attribute": "collapse-direction"
            },
            {
              "kind": "field",
              "name": "collapsible",
              "description": "When `true`, the component is collapsible.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "collapsible",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst panel = document.querySelector(\"calcite-panel\");\ndocument.body.append(panel);\nawait panel.componentOnReady();\nconsole.log(\"calcite-panel is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuFlipPlacements",
              "description": "Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.",
              "type": {
                "text": "Array<\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\">",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "menuOpen",
              "description": "When `true`, the action menu items in the `header-menu-actions` slot are open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "menu-open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "menuPlacement",
              "description": "Determines where the action menu will be positioned.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-end\"",
              "attribute": "menu-placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "scrollContentTo",
              "description": "Scrolls the component's content to a specified set of coordinates.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "ScrollToOptions",
                    "references": [
                      {
                        "name": "ScrollToOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 15
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "myCalciteFlowItem.scrollContentTo({\n  left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.\n  top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element\n  behavior: \"auto\" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).\n});"
                },
                {
                  "name": "param",
                  "text": "options - allows specific coordinates to be defined."
                },
                {
                  "name": "returns",
                  "text": "- promise that resolves once the content is scrolled to."
                }
              ],
              "signature": "(options?: ScrollToOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "closable",
              "description": "When `true`, displays a close button in the trailing side of the header.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closable"
            },
            {
              "name": "closed",
              "description": "When `true`, the component will be hidden.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closed"
            },
            {
              "name": "collapse-direction",
              "description": "When `collapsible` is present, specifies the direction of the collapse icon.",
              "type": {
                "text": "\"down\" | \"up\"",
                "values": [
                  {
                    "value": "down",
                    "type": "string"
                  },
                  {
                    "value": "up",
                    "type": "string"
                  }
                ]
              },
              "default": "\"down\"",
              "fieldName": "collapseDirection"
            },
            {
              "name": "collapsed",
              "description": "When `true`, hides the component's content area.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "collapsed"
            },
            {
              "name": "collapsible",
              "description": "When `true`, the component is collapsible.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "collapsible"
            },
            {
              "name": "description",
              "description": "A description for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "heading-level",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "menu-open",
              "description": "When `true`, the action menu items in the `header-menu-actions` slot are open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "menuOpen"
            },
            {
              "name": "menu-placement",
              "description": "Determines where the action menu will be positioned.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-end\"",
              "fieldName": "menuPlacement"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            }
          ],
          "events": [
            {
              "name": "calcitePanelClose",
              "description": "Fires when the close button is clicked.",
              "type": {
                "text": "void"
              }
            },
            {
              "name": "calcitePanelCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calcitePanelExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calcitePanelScroll",
              "description": "Fires when the content is scrolled.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calcitePanelToggle",
              "description": "Fires when the collapse button is clicked.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content."
            },
            {
              "name": "action-bar",
              "description": "A slot for adding a `calcite-action-bar` to the component."
            },
            {
              "name": "alerts",
              "description": "A slot for adding `calcite-alert`s to the component."
            },
            {
              "name": "content-bottom",
              "description": "A slot for adding content below the unnamed (default) slot and above the footer slot (if populated)"
            },
            {
              "name": "content-top",
              "description": "A slot for adding content above the unnamed (default) slot and below the action-bar slot (if populated)."
            },
            {
              "name": "header-actions-start",
              "description": "A slot for adding actions or content to the start side of the header."
            },
            {
              "name": "header-actions-end",
              "description": "A slot for adding actions or content to the end side of the header."
            },
            {
              "name": "header-content",
              "description": "A slot for adding custom content to the header."
            },
            {
              "name": "header-menu-actions",
              "description": "A slot for adding an overflow menu with actions inside a `calcite-dropdown`."
            },
            {
              "name": "fab",
              "description": "A slot for adding a `calcite-fab` (floating action button) to perform an action."
            },
            {
              "name": "footer",
              "description": "A slot for adding custom content to the component's footer. Should not be used with the `\"footer-start\"` or `\"footer-end\"` slots."
            },
            {
              "name": "footer-actions",
              "description": "[Deprecated] Use the `footer-start` and `footer-end` slots instead. A slot for adding `calcite-button`s to the component's footer."
            },
            {
              "name": "footer-end",
              "description": "A slot for adding a trailing footer custom content. Should not be used with the `\"footer\"` slot."
            },
            {
              "name": "footer-start",
              "description": "A slot for adding a leading footer custom content. Should not be used with the `\"footer\"` slot."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-panel-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-panel-heading-text-color",
              "description": "Specifies the text color of the component's `heading`."
            },
            {
              "name": "--calcite-panel-icon-color",
              "description": "Specifies the color of the component's icon."
            },
            {
              "name": "--calcite-panel-description-text-color",
              "description": "Specifies the text color of the component's `description`."
            },
            {
              "name": "--calcite-panel-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-panel-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-panel-header-background-color",
              "description": "Specifies the background color of the component's header."
            },
            {
              "name": "--calcite-panel-header-action-background-color",
              "description": "Specifies the background color of Panel's `closable`, `collapsible`, and elements slotted in `header-menu-actions`."
            },
            {
              "name": "--calcite-panel-header-action-background-color-hover",
              "description": "Specifies the background color of Panel's `closable`, `collapsible`, and elements slotted in `header-menu-actions` when hovered."
            },
            {
              "name": "--calcite-panel-header-action-background-color-press",
              "description": "Specifies the background color of Panel's `closable`, `collapsible`, and elements slotted in `header-menu-actions` when pressed."
            },
            {
              "name": "--calcite-panel-header-action-text-color",
              "description": "Specifies the text color of Panel's `closable`, `collapsible`, and elements slotted in `header-menu-actions`."
            },
            {
              "name": "--calcite-panel-header-action-text-color-press",
              "description": "Specifies the text color of Panel's `closable`, `collapsible`, and elements slotted in `header-menu-actions` when pressed or hovered."
            },
            {
              "name": "--calcite-panel-footer-background-color",
              "description": "Specifies the background color of the component's footer."
            },
            {
              "name": "--calcite-panel-space",
              "description": "Specifies the padding of the component's `\"unnamed (default)\"` slot."
            },
            {
              "name": "--calcite-panel-header-content-space",
              "description": "Specifies the padding of the `\"header-content\"` slot."
            },
            {
              "name": "--calcite-panel-footer-space",
              "description": "Specifies the padding of the component's footer."
            },
            {
              "name": "--calcite-popover-border-color",
              "description": "Specifies the border color of the component's internally rendered `calcite-popover`, which is rendered within a `calcite-action` menu when slotted `calcite-action`s are present in the `header-actions-end` slot. Applies to any slotted `calcite-popover`s."
            },
            {
              "name": "--calcite-panel-content-space",
              "description": "[Deprecated] Use `--calcite-panel-space` instead. Specifies the padding of the component's content."
            },
            {
              "name": "--calcite-panel-footer-padding",
              "description": "[Deprecated] Use `--calcite-panel-footer-space` instead. Specifies the padding of the component's footer."
            },
            {
              "name": "--calcite-panel-header-border-block-end",
              "description": "[Deprecated] Use `--calcite-panel-border-color` instead. Specifies the component header's block end border."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-panel",
          "declaration": {
            "name": "Panel",
            "module": "src/components/panel/panel.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/popover/popover.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Popover",
          "tagName": "calcite-popover",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalcitePopover",
          "importPath": "components/calcite-popover",
          "members": [
            {
              "kind": "field",
              "name": "autoClose",
              "description": "When `true`, clicking outside of the component automatically closes open `calcite-popover`s.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "auto-close",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "description": "When `true`, displays a close button within the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst popover = document.querySelector(\"calcite-popover\");\ndocument.body.append(popover);\nawait popover.componentOnReady();\nconsole.log(\"calcite-popover is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "flipDisabled",
              "description": "When `true`, prevents flipping the component's placement when overlapping its `referenceElement`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "flip-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flipPlacements",
              "description": "Specifies the component's fallback `placement` when it's initial or specified `placement` has insufficient space available.",
              "type": {
                "text": "Array<\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\">",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "focusTrapDisabled",
              "description": "When `true`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "focus-trap-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focusTrapOptions",
              "description": "Specifies custom focus trap configuration on the component, where\n\n`\"allowOutsideClick`\" allows outside clicks,\n`\"initialFocus\"` enables initial focus,\n`\"returnFocusOnDeactivate\"` returns focus when not active, and\n`\"extraContainers\"` specifies additional focusable elements external to the trap (e.g., 3rd-party components appending elements to the document body).\n`\"setReturnFocus\"` customizes the element to which focus is returned when the trap is deactivated. Return `false` to prevent focus return, or `undefined` to use the default behavior (returning focus to the element focused before activation).",
              "type": {
                "text": "{\n    initialFocus?: FocusTargetOrFalse | (() => void);\n    returnFocusOnDeactivate?: boolean;\n    allowOutsideClick?: boolean | MouseEventToBoolean;\n    extraContainers?: string | HTMLElement | SVGElement | Array<string | HTMLElement | SVGElement>;\n    setReturnFocus?: FocusTargetValueOrFalse | ((nodeFocusedBeforeActivation: HTMLElement | SVGElement) => FocusTargetValueOrFalse) | ((nodeFocusedBeforeActivation: HTMLElement | SVGElement) => undefined);\n}"
              }
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "offsetDistance",
              "description": "Offsets the position of the popover away from the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "6",
              "attribute": "offset-distance",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "offsetSkidding",
              "description": "Offsets the position of the component along the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "offset-skidding",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the `referenceElement`.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pointerDisabled",
              "description": "When `true`, removes the caret pointer.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "pointer-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "referenceElement",
              "description": "The `referenceElement` used to position the component according to its `placement` value.\n\nSetting to an `HTMLElement` is preferred so the component does not need to query the DOM.\n\nHowever, a string `id` of the reference element can also be used.\n\nThe component should not be placed within its own `referenceElement` to avoid unintended behavior.",
              "type": {
                "text": "Element | VirtualElement | string",
                "references": [
                  {
                    "name": "Element",
                    "package": "typescript",
                    "module": "lib/lib.dom.d.ts",
                    "viewUrl": "https://developer.mozilla.org/docs/Web/API/Element",
                    "start": 0,
                    "end": 7
                  },
                  {
                    "name": "VirtualElement",
                    "package": "@floating-ui/dom",
                    "module": "dist/floating-ui.dom.d.mts",
                    "start": 10,
                    "end": 24
                  }
                ],
                "values": [
                  {
                    "type": "Element"
                  },
                  {
                    "type": "VirtualElement"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "reference-element",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Updates the position of the component.",
              "parameters": [
                {
                  "name": "delayed",
                  "default": "false",
                  "type": {
                    "text": "boolean",
                    "values": [
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "delayed"
                }
              ],
              "signature": "(delayed?: boolean): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "triggerDisabled",
              "description": "When `true`, disables automatically toggling the component when its `referenceElement` has been triggered.\n\nThis property can be set to `true` to manage when the component is open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "trigger-disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "updateFocusTrapElements",
              "description": "Updates the element(s) that are used within the focus-trap of the component.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "auto-close",
              "description": "When `true`, clicking outside of the component automatically closes open `calcite-popover`s.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "autoClose"
            },
            {
              "name": "closable",
              "description": "When `true`, displays a close button within the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closable"
            },
            {
              "name": "flip-disabled",
              "description": "When `true`, prevents flipping the component's placement when overlapping its `referenceElement`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "flipDisabled"
            },
            {
              "name": "focus-trap-disabled",
              "description": "When `true`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "focusTrapDisabled"
            },
            {
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "heading-level",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "offset-distance",
              "description": "Offsets the position of the popover away from the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "6",
              "fieldName": "offsetDistance"
            },
            {
              "name": "offset-skidding",
              "description": "Offsets the position of the component along the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "offsetSkidding"
            },
            {
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the `referenceElement`.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "placement"
            },
            {
              "name": "pointer-disabled",
              "description": "When `true`, removes the caret pointer.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "pointerDisabled"
            },
            {
              "name": "reference-element",
              "description": "The `referenceElement` used to position the component according to its `placement` value.\n\nSetting to an `HTMLElement` is preferred so the component does not need to query the DOM.\n\nHowever, a string `id` of the reference element can also be used.\n\nThe component should not be placed within its own `referenceElement` to avoid unintended behavior.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "referenceElement"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "trigger-disabled",
              "description": "When `true`, disables automatically toggling the component when its `referenceElement` has been triggered.\n\nThis property can be set to `true` to manage when the component is open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "triggerDisabled"
            }
          ],
          "events": [
            {
              "name": "calcitePopoverBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calcitePopoverBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calcitePopoverClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calcitePopoverOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-popover-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-popover-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-popover-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-popover-max-size-x",
              "description": "Specifies the component's maximum width."
            },
            {
              "name": "--calcite-popover-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-popover-z-index",
              "description": "Specifies the component's z-index value."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-popover",
          "declaration": {
            "name": "Popover",
            "module": "src/components/popover/popover.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/progress/progress.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Progress",
          "tagName": "calcite-progress",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteProgress",
          "importPath": "components/calcite-progress",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst progress = document.querySelector(\"calcite-progress\");\ndocument.body.append(progress);\nawait progress.componentOnReady();\nconsole.log(\"calcite-progress is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "reversed",
              "description": "When `true` and type is `\"indeterminate\"`, reverses the animation direction.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "reversed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "text",
              "description": "Text that displays under the component's indicator.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "text"
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Specifies the component type.\n\nUse `\"indeterminate\"` if finding actual progress value is impossible.",
              "type": {
                "text": "\"determinate\" | \"indeterminate\"",
                "values": [
                  {
                    "value": "determinate",
                    "type": "string"
                  },
                  {
                    "value": "indeterminate",
                    "type": "string"
                  }
                ]
              },
              "default": "\"determinate\"",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "When `type` is `\"determinate\"`, specifies the component's value with a range of 0 to 100.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "reversed",
              "description": "When `true` and type is `\"indeterminate\"`, reverses the animation direction.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "reversed"
            },
            {
              "name": "text",
              "description": "Text that displays under the component's indicator.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "text"
            },
            {
              "name": "type",
              "description": "Specifies the component type.\n\nUse `\"indeterminate\"` if finding actual progress value is impossible.",
              "type": {
                "text": "\"determinate\" | \"indeterminate\"",
                "values": [
                  {
                    "value": "determinate",
                    "type": "string"
                  },
                  {
                    "value": "indeterminate",
                    "type": "string"
                  }
                ]
              },
              "default": "\"determinate\"",
              "fieldName": "type"
            },
            {
              "name": "value",
              "description": "When `type` is `\"determinate\"`, specifies the component's value with a range of 0 to 100.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "value"
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-progress-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-progress-fill-color",
              "description": "Specifies the component's fill color."
            },
            {
              "name": "--calcite-progress-text-color",
              "description": "Specifies the component's text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-progress",
          "declaration": {
            "name": "Progress",
            "module": "src/components/progress/progress.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button/radio-button.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "RadioButton",
          "tagName": "calcite-radio-button",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteRadioButton",
          "importPath": "components/calcite-radio-button",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "description": "When `true`, the component is checked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst radioButton = document.querySelector(\"calcite-radio-button\");\ndocument.body.append(radioButton);\nawait radioButton.componentOnReady();\nconsole.log(\"calcite-radio-button is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component. Can be inherited from `calcite-radio-button-group`.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value selected from the `calcite-radio-button-group` in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component inherited from the `calcite-radio-button-group`.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "value",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "description": "When `true`, the component is checked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component. Can be inherited from `calcite-radio-button-group`.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value selected from the `calcite-radio-button-group` in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component inherited from the `calcite-radio-button-group`.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteRadioButtonChange",
              "description": "Fires only when the radio button is checked.  This behavior is identical to the native HTML input element.\nSince this event does not fire when the radio button is unchecked, it's not recommended to attach a listener for this event\ndirectly on the element, but instead either attach it to a node that contains all of the radio buttons in the group\nor use the `calciteRadioButtonGroupChange` event if using this with `calcite-radio-button-group`.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-radio-button-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-radio-button-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-radio-button-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-radio-button-size",
              "description": "Specifies the component's size."
            },
            {
              "name": "--calcite-radio-size",
              "description": "[Deprecated] Use `--calcite-radio-button-size`. Specifies the component's size."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-radio-button",
          "declaration": {
            "name": "RadioButton",
            "module": "src/components/radio-button/radio-button.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/radio-button-group/radio-button-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "RadioButtonGroup",
          "tagName": "calcite-radio-button-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteRadioButtonGroup",
          "importPath": "components/calcite-radio-button-group",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst radioButtonGroup = document.querySelector(\"calcite-radio-button-group\");\ndocument.body.append(radioButtonGroup);\nawait radioButtonGroup.componentOnReady();\nconsole.log(\"calcite-radio-button-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Defines the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component on form submission. Must be unique to other component instances.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true,
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItem",
              "description": "Specifies the component's selected item.",
              "type": {
                "text": "HTMLCalciteRadioButtonElement",
                "references": [
                  {
                    "name": "HTMLCalciteRadioButtonElement",
                    "module": "index.js",
                    "start": 0,
                    "end": 29
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the fist focusable `calcite-radio-button` element in the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the validation message.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "layout",
              "description": "Defines the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "fieldName": "layout"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component on form submission. Must be unique to other component instances.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the validation message.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            }
          ],
          "events": [
            {
              "name": "calciteRadioButtonGroupChange",
              "description": "Fires when the component has changed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-radio-button`s."
            },
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-radio-button-group-gap",
              "description": "Specifies the space between slotted components in the component."
            },
            {
              "name": "--calcite-radio-button-input-message-spacing",
              "description": "Specifies the margin spacing at the top of the input-message component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-radio-button-group",
          "declaration": {
            "name": "RadioButtonGroup",
            "module": "src/components/radio-button-group/radio-button-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/rating/rating.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Rating",
          "tagName": "calcite-rating",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteRating",
          "importPath": "components/calcite-rating",
          "members": [
            {
              "kind": "field",
              "name": "average",
              "description": "Specifies a cumulative average from previous ratings to display.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "average",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst rating = document.querySelector(\"calcite-rating\");\ndocument.body.append(rating);\nawait rating.componentOnReady();\nconsole.log(\"calcite-rating is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "count",
              "description": "Specifies the number of previous ratings to display.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "count",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readOnly",
              "description": "When `true`, the component's value can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "read-only",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "showChip",
              "description": "When `true`, and if available, displays the `average` and/or `count` data summary in a `calcite-chip`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "show-chip",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "value",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "average",
              "description": "Specifies a cumulative average from previous ratings to display.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "average"
            },
            {
              "name": "count",
              "description": "Specifies the number of previous ratings to display.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "count"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "read-only",
              "description": "When `true`, the component's value can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "readOnly"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "show-chip",
              "description": "When `true`, and if available, displays the `average` and/or `count` data summary in a `calcite-chip`.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "showChip"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteRatingChange",
              "description": "Fires when the component's value changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-rating-spacing-unit",
              "description": "[Deprecated] Use `--calcite-rating-spacing`. Specifies the amount of left and right margin spacing between each item."
            },
            {
              "name": "--calcite-rating-spacing",
              "description": "Specifies the amount of left and right margin spacing between each item."
            },
            {
              "name": "--calcite-rating-color-hover",
              "description": "Specifies the component's item color when hovered."
            },
            {
              "name": "--calcite-rating-color-press",
              "description": "Specifies the component's item color when active."
            },
            {
              "name": "--calcite-rating-color",
              "description": "Specifies the component's item color."
            },
            {
              "name": "--calcite-rating-average-color",
              "description": "Specifies the component's item color when average is set."
            },
            {
              "name": "--calcite-rating-average-text-color",
              "description": "Specifies the component's average text color."
            },
            {
              "name": "--calcite-rating-count-text-color",
              "description": "Specifies the component's count text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-rating",
          "declaration": {
            "name": "Rating",
            "module": "src/components/rating/rating.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/scrim/scrim.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Scrim",
          "tagName": "calcite-scrim",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteScrim",
          "importPath": "components/calcite-scrim",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst scrim = document.querySelector(\"calcite-scrim\");\ndocument.body.append(scrim);\nawait scrim.componentOnReady();\nconsole.log(\"calcite-scrim is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            }
          ],
          "attributes": [
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content, primarily loading information."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-scrim-background",
              "description": "Specifies the background color of the scrim."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-scrim",
          "declaration": {
            "name": "Scrim",
            "module": "src/components/scrim/scrim.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/segmented-control/segmented-control.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "SegmentedControl",
          "tagName": "calcite-segmented-control",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteSegmentedControl",
          "importPath": "components/calcite-segmented-control",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline\" | \"outline-fill\" | \"solid\"",
                "values": [
                  {
                    "value": "outline",
                    "type": "string"
                  },
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst segmentedControl = document.querySelector(\"calcite-segmented-control\");\ndocument.body.append(segmentedControl);\nawait segmentedControl.componentOnReady();\nconsole.log(\"calcite-segmented-control is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Defines the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItem",
              "description": "The component's selected item `HTMLElement`.",
              "type": {
                "text": "HTMLCalciteSegmentedControlItemElement",
                "references": [
                  {
                    "name": "HTMLCalciteSegmentedControlItemElement",
                    "module": "index.js",
                    "start": 0,
                    "end": 38
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the validation message.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's `selectedItem` value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Specifies the width of the component. [Deprecated] The `\"half\"` value is deprecated, use `\"full\"` instead.",
              "type": {
                "text": "\"auto\" | \"full\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "width",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline\" | \"outline-fill\" | \"solid\"",
                "values": [
                  {
                    "value": "outline",
                    "type": "string"
                  },
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "fieldName": "appearance"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "layout",
              "description": "Defines the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "fieldName": "layout"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the validation message.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The component's `selectedItem` value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            },
            {
              "name": "width",
              "description": "Specifies the width of the component. [Deprecated] The `\"half\"` value is deprecated, use `\"full\"` instead.",
              "type": {
                "text": "\"auto\" | \"full\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "width"
            }
          ],
          "events": [
            {
              "name": "calciteSegmentedControlChange",
              "description": "Fires when the `calcite-segmented-control-item` selection changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-segmented-control-item`s."
            },
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-segmented-control-border-color",
              "description": "Specifies the component's border color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-segmented-control",
          "declaration": {
            "name": "SegmentedControl",
            "module": "src/components/segmented-control/segmented-control.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/segmented-control-item/segmented-control-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "SegmentedControlItem",
          "tagName": "calcite-segmented-control-item",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteSegmentedControlItem",
          "importPath": "components/calcite-segmented-control-item",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "description": "When `true`, the component is checked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst segmentedControlItem = document.querySelector(\"calcite-segmented-control-item\");\ndocument.body.append(segmentedControlItem);\nawait segmentedControlItem.componentOnReady();\nconsole.log(\"calcite-segmented-control-item is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "description": "When `true`, the component is checked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "icon-end",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconEnd"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-segmented-control-color",
              "description": "Specifies the component's color."
            },
            {
              "name": "--calcite-segmented-control-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-segmented-control-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-segmented-control-shadow",
              "description": "Specifies the component's shadow."
            },
            {
              "name": "--calcite-segmented-control-icon-color",
              "description": "Specifies the icons's color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-segmented-control-item",
          "declaration": {
            "name": "SegmentedControlItem",
            "module": "src/components/segmented-control-item/segmented-control-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/select/select.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Select",
          "tagName": "calcite-select",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteSelect",
          "importPath": "components/calcite-select",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst select = document.querySelector(\"calcite-select\");\ndocument.body.append(select);\nawait select.componentOnReady();\nconsole.log(\"calcite-select is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedOption",
              "description": "The component's selected option `HTMLElement`.",
              "type": {
                "text": "HTMLCalciteOptionElement",
                "references": [
                  {
                    "name": "HTMLCalciteOptionElement",
                    "module": "index.js",
                    "start": 0,
                    "end": 24
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's `selectedOption` value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Specifies the width of the component. [Deprecated] The `\"half\"` value is deprecated, use `\"full\"` instead.",
              "type": {
                "text": "\"auto\" | \"full\" | \"half\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  },
                  {
                    "value": "half",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "width",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The component's `selectedOption` value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            },
            {
              "name": "width",
              "description": "Specifies the width of the component. [Deprecated] The `\"half\"` value is deprecated, use `\"full\"` instead.",
              "type": {
                "text": "\"auto\" | \"full\" | \"half\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  },
                  {
                    "value": "half",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "width"
            }
          ],
          "events": [
            {
              "name": "calciteSelectChange",
              "description": "Fires when the `selectedOption` changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-option`s."
            },
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-select-font-size",
              "description": "Specifies the font size of `calcite-option`s in the component."
            },
            {
              "name": "--calcite-select-text-color",
              "description": "Specifies the text color of `calcite-option`s in the component."
            },
            {
              "name": "--calcite-select-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-select-icon-color",
              "description": "Specifies the component's icon color."
            },
            {
              "name": "--calcite-select-icon-color-hover",
              "description": "Specifies the component's icon color when hovered or active."
            },
            {
              "name": "--calcite-select-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-select-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-select-shadow",
              "description": "Specifies the component's shadow."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-select",
          "declaration": {
            "name": "Select",
            "module": "src/components/select/select.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/sheet/sheet.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Sheet",
          "tagName": "calcite-sheet",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteSheet",
          "importPath": "components/calcite-sheet",
          "members": [
            {
              "kind": "field",
              "name": "beforeClose",
              "description": "Passes a function to run before the component closes.",
              "type": {
                "text": "(el: HTMLCalciteSheetElement) => Promise<void>",
                "references": [
                  {
                    "name": "HTMLCalciteSheetElement",
                    "module": "index.js",
                    "start": 5,
                    "end": 28
                  },
                  {
                    "name": "Promise",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 33,
                    "end": 40
                  }
                ]
              },
              "docsTags": [
                {
                  "name": "returns"
                }
              ]
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst sheet = document.querySelector(\"calcite-sheet\");\ndocument.body.append(sheet);\nawait sheet.componentOnReady();\nconsole.log(\"calcite-sheet is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "displayMode",
              "description": "Specifies the display mode - `\"float\"` (content is separated detached),\nor `\"overlay\"` (displays on top of center content).",
              "type": {
                "text": "\"float\" | \"overlay\"",
                "values": [
                  {
                    "value": "float",
                    "type": "string"
                  },
                  {
                    "value": "overlay",
                    "type": "string"
                  }
                ]
              },
              "default": "\"overlay\"",
              "attribute": "display-mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "escapeDisabled",
              "description": "When `true`, disables the default close on escape behavior.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "escape-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focusTrapDisabled",
              "description": "When `true`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "focus-trap-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focusTrapOptions",
              "description": "Specifies custom focus trap configuration on the component, where\n\n`\"allowOutsideClick`\" allows outside clicks,\n`\"initialFocus\"` enables initial focus,\n`\"returnFocusOnDeactivate\"` returns focus when not active, and\n`\"extraContainers\"` specifies additional focusable elements external to the trap (e.g., 3rd-party components appending elements to the document body).\n`\"setReturnFocus\"` customizes the element to which focus is returned when the trap is deactivated. Return `false` to prevent focus return, or `undefined` to use the default behavior (returning focus to the element focused before activation).",
              "type": {
                "text": "{\n    initialFocus?: FocusTargetOrFalse | (() => void);\n    returnFocusOnDeactivate?: boolean;\n    allowOutsideClick?: boolean | MouseEventToBoolean;\n    extraContainers?: string | HTMLElement | SVGElement | Array<string | HTMLElement | SVGElement>;\n    setReturnFocus?: FocusTargetValueOrFalse | ((nodeFocusedBeforeActivation: HTMLElement | SVGElement) => FocusTargetValueOrFalse) | ((nodeFocusedBeforeActivation: HTMLElement | SVGElement) => undefined);\n}"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "Specifies the height of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "attribute": "height",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heightScale",
              "description": "When `position` is `\"block-start\"` or `\"block-end\"`, specifies the height of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "deprecated": "Use the `height` property instead.",
              "attribute": "height-scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Specifies the label of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "outsideCloseDisabled",
              "description": "When `true`, disables the closing of the component when clicked outside.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "outside-close-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Determines where the component will be positioned.",
              "type": {
                "text": "\"block-end\" | \"block-start\" | \"inline-end\" | \"inline-start\"",
                "values": [
                  {
                    "value": "block-end",
                    "type": "string"
                  },
                  {
                    "value": "block-start",
                    "type": "string"
                  },
                  {
                    "value": "inline-end",
                    "type": "string"
                  },
                  {
                    "value": "inline-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"inline-start\"",
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "resizable",
              "description": "When `true`, the component is resizable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "resizable",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's \"close\" button - the first focusable item.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "updateFocusTrapElements",
              "description": "Updates the element(s) that are included in the focus-trap of the component.",
              "parameters": [
                {
                  "name": "extraContainers",
                  "optional": true,
                  "type": {
                    "text": "Array<string | HTMLElement | SVGElement> | HTMLElement | SVGElement | string",
                    "references": [
                      {
                        "name": "Array",
                        "package": "typescript",
                        "module": "lib/lib.es5.d.ts",
                        "start": 0,
                        "end": 5
                      },
                      {
                        "name": "HTMLElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/HTMLElement",
                        "start": 15,
                        "end": 26
                      },
                      {
                        "name": "SVGElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/SVGElement",
                        "start": 29,
                        "end": 39
                      },
                      {
                        "name": "HTMLElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/HTMLElement",
                        "start": 43,
                        "end": 54
                      },
                      {
                        "name": "SVGElement",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "viewUrl": "https://developer.mozilla.org/docs/Web/API/SVGElement",
                        "start": 57,
                        "end": 67
                      }
                    ],
                    "values": [
                      {
                        "type": "Array<string | HTMLElement | SVGElement>"
                      },
                      {
                        "type": "HTMLElement"
                      },
                      {
                        "type": "SVGElement"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "extraContainers - Additional elements to include in the focus trap. This is useful for including elements that may have related parts rendered outside the main focus trapping element."
                }
              ],
              "signature": "(extraContainers?: FocusTrapOptions[\"extraContainers\"]): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "attribute": "width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "widthScale",
              "description": "When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "deprecated": "Use the `width` property instead.",
              "attribute": "width-scale",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "display-mode",
              "description": "Specifies the display mode - `\"float\"` (content is separated detached),\nor `\"overlay\"` (displays on top of center content).",
              "type": {
                "text": "\"float\" | \"overlay\"",
                "values": [
                  {
                    "value": "float",
                    "type": "string"
                  },
                  {
                    "value": "overlay",
                    "type": "string"
                  }
                ]
              },
              "default": "\"overlay\"",
              "fieldName": "displayMode"
            },
            {
              "name": "escape-disabled",
              "description": "When `true`, disables the default close on escape behavior.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "escapeDisabled"
            },
            {
              "name": "focus-trap-disabled",
              "description": "When `true`, prevents focus trapping.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "focusTrapDisabled"
            },
            {
              "name": "height",
              "description": "Specifies the height of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "height"
            },
            {
              "name": "height-scale",
              "description": "When `position` is `\"block-start\"` or `\"block-end\"`, specifies the height of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "heightScale",
              "deprecated": "Use the `height` property instead."
            },
            {
              "name": "label",
              "description": "Specifies the label of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "outside-close-disabled",
              "description": "When `true`, disables the closing of the component when clicked outside.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "outsideCloseDisabled"
            },
            {
              "name": "position",
              "description": "Determines where the component will be positioned.",
              "type": {
                "text": "\"block-end\" | \"block-start\" | \"inline-end\" | \"inline-start\"",
                "values": [
                  {
                    "value": "block-end",
                    "type": "string"
                  },
                  {
                    "value": "block-start",
                    "type": "string"
                  },
                  {
                    "value": "inline-end",
                    "type": "string"
                  },
                  {
                    "value": "inline-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"inline-start\"",
              "fieldName": "position"
            },
            {
              "name": "resizable",
              "description": "When `true`, the component is resizable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "resizable"
            },
            {
              "name": "width",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "width"
            },
            {
              "name": "width-scale",
              "description": "When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "widthScale",
              "deprecated": "Use the `width` property instead."
            }
          ],
          "events": [
            {
              "name": "calciteSheetBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteSheetBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteSheetClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteSheetOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-sheet-background-color",
              "description": "Specifies the background color of the sheet."
            },
            {
              "name": "--calcite-sheet-corner-radius",
              "description": "Specifies the corner radius of the component."
            },
            {
              "name": "--calcite-sheet-shadow",
              "description": "Specifies the shadow of the component."
            },
            {
              "name": "--calcite-sheet-text-color",
              "description": "Specifies the text color of the component."
            },
            {
              "name": "--calcite-sheet-resize-background-color",
              "description": "Specifies the background color of the resize handle."
            },
            {
              "name": "--calcite-sheet-resize-icon-color",
              "description": "Specifies the text color of the resize handle."
            },
            {
              "name": "--calcite-sheet-scrim-background",
              "description": "Specifies the background color of the sheet scrim."
            },
            {
              "name": "--calcite-sheet-width",
              "description": "When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the width of the component."
            },
            {
              "name": "--calcite-sheet-max-width",
              "description": "When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the maximum width of the component."
            },
            {
              "name": "--calcite-sheet-min-width",
              "description": "When `position` is `\"inline-start\"` or `\"inline-end\"`, specifies the minimum width of the component."
            },
            {
              "name": "--calcite-sheet-height",
              "description": "When `position` is `\"block-start\"` or `\"block-end\"`, specifies the height of the component."
            },
            {
              "name": "--calcite-sheet-max-height",
              "description": "When `position` is `\"block-start\"` or `\"block-end\"`, specifies the maximum height of the component."
            },
            {
              "name": "--calcite-sheet-min-height",
              "description": "When `position` is `\"block-start\"` or `\"block-end\"`, specifies the minimum height of the component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-sheet",
          "declaration": {
            "name": "Sheet",
            "module": "src/components/sheet/sheet.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/shell/shell.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Shell",
          "tagName": "calcite-shell",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteShell",
          "importPath": "components/calcite-shell",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst shell = document.querySelector(\"calcite-shell\");\ndocument.body.append(shell);\nawait shell.componentOnReady();\nconsole.log(\"calcite-shell is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "contentBehind",
              "description": "Positions the center content behind any `calcite-shell-panel`s.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "content-behind",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "content-behind",
              "description": "Positions the center content behind any `calcite-shell-panel`s.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "contentBehind"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content. This content will appear between any leading and trailing panels added to the component, such as a map."
            },
            {
              "name": "header",
              "description": "A slot for adding header content. This content will be positioned at the top of the component."
            },
            {
              "name": "footer",
              "description": "A slot for adding footer content. This content will be positioned at the bottom of the component."
            },
            {
              "name": "panel-start",
              "description": "A slot for adding the starting `calcite-shell-panel`."
            },
            {
              "name": "panel-end",
              "description": "A slot for adding the ending `calcite-shell-panel`."
            },
            {
              "name": "panel-top",
              "description": "A slot for adding the top `calcite-shell-panel`."
            },
            {
              "name": "panel-bottom",
              "description": "A slot for adding the bottom `calcite-shell-panel`."
            },
            {
              "name": "center-row",
              "description": "[Deprecated] Use the `\"panel-bottom\"` slot instead. A slot for adding the bottom `calcite-shell-center-row`."
            },
            {
              "name": "modals",
              "description": "A slot for adding `calcite-modal` components. When placed in this slot, the modal position will be constrained to the extent of the `calcite-shell`."
            },
            {
              "name": "dialogs",
              "description": "A slot for adding `calcite-dialog` components. When placed in this slot, the dialog position will be constrained to the extent of the `calcite-shell`."
            },
            {
              "name": "alerts",
              "description": "A slot for adding `calcite-alert` components. When placed in this slot, the alert position will be constrained to the extent of the `calcite-shell`."
            },
            {
              "name": "sheets",
              "description": "A slot for adding `calcite-sheet` components. When placed in this slot, the sheet position will be constrained to the extent of the `calcite-shell`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-shell-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-shell-tip-spacing",
              "description": "[Deprecated] This component has been deprecated. The left and right spacing of the `calcite-tip-manager` when slotted in the component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-shell",
          "declaration": {
            "name": "Shell",
            "module": "src/components/shell/shell.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/shell-center-row/shell-center-row.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ShellCenterRow",
          "tagName": "calcite-shell-center-row",
          "deprecated": "Use the `calcite-shell-panel` component instead.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteShellCenterRow",
          "importPath": "components/calcite-shell-center-row",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst shellCenterRow = document.querySelector(\"calcite-shell-center-row\");\ndocument.body.append(shellCenterRow);\nawait shellCenterRow.componentOnReady();\nconsole.log(\"calcite-shell-center-row is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "detached",
              "description": "When `true`, the content area displays like a floating panel.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "detached",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heightScale",
              "description": "Specifies the maximum height of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"s\"",
              "attribute": "height-scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Specifies the component's position. Will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"end\"",
              "attribute": "position",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "detached",
              "description": "When `true`, the content area displays like a floating panel.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "detached"
            },
            {
              "name": "height-scale",
              "description": "Specifies the maximum height of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"s\"",
              "fieldName": "heightScale"
            },
            {
              "name": "position",
              "description": "Specifies the component's position. Will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"end\"",
              "fieldName": "position"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding content to the `calcite-shell-panel`."
            },
            {
              "name": "action-bar",
              "description": "A slot for adding a `calcite-action-bar` to the `calcite-shell-panel`."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-shell-center-row",
          "declaration": {
            "name": "ShellCenterRow",
            "module": "src/components/shell-center-row/shell-center-row.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/shell-panel/shell-panel.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "ShellPanel",
          "tagName": "calcite-shell-panel",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteShellPanel",
          "importPath": "components/calcite-shell-panel",
          "members": [
            {
              "kind": "field",
              "name": "collapsed",
              "description": "When `true`, hides the component's content area.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "collapsed",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst shellPanel = document.querySelector(\"calcite-shell-panel\");\ndocument.body.append(shellPanel);\nawait shellPanel.componentOnReady();\nconsole.log(\"calcite-shell-panel is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "displayMode",
              "description": "Specifies the display mode of the component, where:\n\n`\"dock\"` displays at full height adjacent to center content,\n\n`\"overlay\"` displays at full height on top of center content, and\n\n`\"float\"` [Deprecated] does not display at full height with content separately detached from `calcite-action-bar` on top of center content.\n\n`\"float-content\"` does not display at full height with content separately detached from `calcite-action-bar` on top of center content.\n\n`\"float-all\"` detaches the `calcite-panel` and `calcite-action-bar` on top of center content.",
              "type": {
                "text": "\"dock\" | \"float\" | \"float-all\" | \"float-content\" | \"overlay\"",
                "values": [
                  {
                    "value": "dock",
                    "type": "string"
                  },
                  {
                    "value": "float",
                    "type": "string"
                  },
                  {
                    "value": "float-all",
                    "type": "string"
                  },
                  {
                    "value": "float-content",
                    "type": "string"
                  },
                  {
                    "value": "overlay",
                    "type": "string"
                  }
                ]
              },
              "default": "\"dock\"",
              "attribute": "display-mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "height",
              "description": "Specifies the height of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "attribute": "height",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heightScale",
              "description": "When `layout` is `horizontal`, specifies the maximum height of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "deprecated": "Use the `height` property instead.",
              "attribute": "height-scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "The direction of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Specifies the component's position. Will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "resizable",
              "description": "When `true` and `displayMode` is not `float-content` or `float`, the component's content area is resizable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "resizable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "attribute": "width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "widthScale",
              "description": "When `layout` is `vertical`, specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "deprecated": "Use the `width` property instead.",
              "attribute": "width-scale",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "collapsed",
              "description": "When `true`, hides the component's content area.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "collapsed"
            },
            {
              "name": "display-mode",
              "description": "Specifies the display mode of the component, where:\n\n`\"dock\"` displays at full height adjacent to center content,\n\n`\"overlay\"` displays at full height on top of center content, and\n\n`\"float\"` [Deprecated] does not display at full height with content separately detached from `calcite-action-bar` on top of center content.\n\n`\"float-content\"` does not display at full height with content separately detached from `calcite-action-bar` on top of center content.\n\n`\"float-all\"` detaches the `calcite-panel` and `calcite-action-bar` on top of center content.",
              "type": {
                "text": "\"dock\" | \"float\" | \"float-all\" | \"float-content\" | \"overlay\"",
                "values": [
                  {
                    "value": "dock",
                    "type": "string"
                  },
                  {
                    "value": "float",
                    "type": "string"
                  },
                  {
                    "value": "float-all",
                    "type": "string"
                  },
                  {
                    "value": "float-content",
                    "type": "string"
                  },
                  {
                    "value": "overlay",
                    "type": "string"
                  }
                ]
              },
              "default": "\"dock\"",
              "fieldName": "displayMode"
            },
            {
              "name": "height",
              "description": "Specifies the height of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "height"
            },
            {
              "name": "height-scale",
              "description": "When `layout` is `horizontal`, specifies the maximum height of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heightScale",
              "deprecated": "Use the `height` property instead."
            },
            {
              "name": "layout",
              "description": "The direction of the component.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "fieldName": "layout"
            },
            {
              "name": "position",
              "description": "Specifies the component's position. Will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "position"
            },
            {
              "name": "resizable",
              "description": "When `true` and `displayMode` is not `float-content` or `float`, the component's content area is resizable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "resizable"
            },
            {
              "name": "width",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "width"
            },
            {
              "name": "width-scale",
              "description": "When `layout` is `vertical`, specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "widthScale",
              "deprecated": "Use the `width` property instead."
            }
          ],
          "events": [
            {
              "name": "calciteShellPanelCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteShellPanelExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content."
            },
            {
              "name": "action-bar",
              "description": "A slot for adding a `calcite-action-bar` to the component."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-shell-panel-background-color",
              "description": "Specifies the background color of the component."
            },
            {
              "name": "--calcite-shell-panel-border-color",
              "description": "When `displayMode` is `\"float-all\"`, specifies the component's border color."
            },
            {
              "name": "--calcite-shell-panel-corner-radius",
              "description": "When `displayMode` is `\"float-all\"`, specifies the component's corner radius."
            },
            {
              "name": "--calcite-shell-panel-height",
              "description": "When `layout` is `horizontal`, or `layout` is `vertical` and `displayMode` is `float-content` or `float`, specifies the height of the component."
            },
            {
              "name": "--calcite-shell-panel-max-height",
              "description": "When `layout` is `horizontal`, or `layout` is `vertical` and `displayMode` is `float-content` or `float`, specifies the maximum height of the component."
            },
            {
              "name": "--calcite-shell-panel-max-width",
              "description": "Specifies the maximum width of the component."
            },
            {
              "name": "--calcite-shell-panel-min-height",
              "description": "When `layout` is `horizontal`, or `layout` is `vertical` and `displayMode` is `float-content` or `float`, specifies the minimum height of the component."
            },
            {
              "name": "--calcite-shell-panel-min-width",
              "description": "Specifies the minimum width of the component."
            },
            {
              "name": "--calcite-shell-panel-resize-background-color",
              "description": "Specifies the background color of the resize handle."
            },
            {
              "name": "--calcite-shell-panel-resize-icon-color",
              "description": "Specifies the text color of the resize handle."
            },
            {
              "name": "--calcite-shell-panel-shadow",
              "description": "When `displayMode` is `\"float-all\"`, specifies the component's shadow."
            },
            {
              "name": "--calcite-shell-panel-text-color",
              "description": "Specifies the text color of the component."
            },
            {
              "name": "--calcite-shell-panel-width",
              "description": "Specifies the width of the component."
            },
            {
              "name": "--calcite-shell-panel-z-index",
              "description": "Specifies the z-index value for the component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-shell-panel",
          "declaration": {
            "name": "ShellPanel",
            "module": "src/components/shell-panel/shell-panel.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/slider/slider.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Slider",
          "tagName": "calcite-slider",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteSlider",
          "importPath": "components/calcite-slider",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst slider = document.querySelector(\"calcite-slider\");\ndocument.body.append(slider);\nawait slider.componentOnReady();\nconsole.log(\"calcite-slider is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fillPlacement",
              "description": "Used to configure where the fill is placed along the slider track in relation to the value handle.\n\nRange mode will always display the fill between the min and max handles.",
              "type": {
                "text": "\"end\" | \"none\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "fill-placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "groupSeparator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "group-separator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hasHistogram",
              "description": "When `true`, indicates a histogram is present.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "has-histogram",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "histogram",
              "description": "A list of the histogram's x,y coordinates within the component's `min` and `max`. Displays above the component's track.",
              "type": {
                "text": "Array<[number, number]>"
              },
              "docsTags": [
                {
                  "name": "see",
                  "text": "[DataSeries](https://github.com/Esri/calcite-design-system/blob/dev/packages/calcite-components/src/components/graph/interfaces.ts#L5)."
                }
              ]
            },
            {
              "kind": "field",
              "name": "histogramStops",
              "description": "A set of single color stops for a histogram, sorted by offset ascending.",
              "type": {
                "text": "Array<ColorStop>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "ColorStop",
                    "module": "docs/components/graph/interfaces.d.ts",
                    "start": 6,
                    "end": 15
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "labelFormatter",
              "description": "When specified, allows users to customize handle labels.",
              "type": {
                "text": "(value: number, type: \"max\" | \"min\" | \"value\" | \"tick\", defaultFormatter: (value: number) => string) => string"
              }
            },
            {
              "kind": "field",
              "name": "labelHandles",
              "description": "When `true`, displays label handles with their numeric value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "label-handles",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "labelTicks",
              "description": "When `true` and `ticks` is specified, displays label tick marks with their numeric value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "label-ticks",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "max",
              "description": "The component's maximum selectable value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "100",
              "attribute": "max",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxLabel",
              "description": "For multiple selections, the accessible name for the second handle, such as `\"Temperature, upper bound\"`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "max-label"
            },
            {
              "kind": "field",
              "name": "maxValue",
              "description": "For multiple selections, the component's upper value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "max-value"
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "min",
              "description": "The component's minimum selectable value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "min",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minLabel",
              "description": "Accessible name for first (or only) handle, such as `\"Temperature, lower bound\"`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "min-label"
            },
            {
              "kind": "field",
              "name": "minValue",
              "description": "For multiple selections, the component's lower value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "min-value"
            },
            {
              "kind": "field",
              "name": "mirrored",
              "description": "When `true`, the component will display values from high to low.\n\nNote that this value will be ignored if the slider has an associated histogram.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "mirrored",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system"
            },
            {
              "kind": "field",
              "name": "pageStep",
              "description": "Specifies the interval to move with the page up, or page down keys.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "page-step",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "precise",
              "description": "When `true`, sets a finer point for handles.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "precise",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "snap",
              "description": "When `true`, enables snap selection in coordination with `step` via a mouse.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "snap",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "step",
              "description": "Specifies the interval to move with the up, or down keys.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "1",
              "attribute": "step",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "ticks",
              "description": "Displays tick marks on the number line at a specified interval.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "ticks",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "Array<number> | number",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ],
                "values": [
                  {
                    "type": "Array<number>"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "value",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "fill-placement",
              "description": "Used to configure where the fill is placed along the slider track in relation to the value handle.\n\nRange mode will always display the fill between the min and max handles.",
              "type": {
                "text": "\"end\" | \"none\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "fillPlacement"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "group-separator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "groupSeparator"
            },
            {
              "name": "has-histogram",
              "description": "When `true`, indicates a histogram is present.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "hasHistogram"
            },
            {
              "name": "label-handles",
              "description": "When `true`, displays label handles with their numeric value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "labelHandles"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "label-ticks",
              "description": "When `true` and `ticks` is specified, displays label tick marks with their numeric value.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "labelTicks"
            },
            {
              "name": "max",
              "description": "The component's maximum selectable value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "100",
              "fieldName": "max"
            },
            {
              "name": "max-label",
              "description": "For multiple selections, the accessible name for the second handle, such as `\"Temperature, upper bound\"`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "maxLabel"
            },
            {
              "name": "max-value",
              "description": "For multiple selections, the component's upper value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "maxValue"
            },
            {
              "name": "min",
              "description": "The component's minimum selectable value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "min"
            },
            {
              "name": "min-label",
              "description": "Accessible name for first (or only) handle, such as `\"Temperature, lower bound\"`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "minLabel"
            },
            {
              "name": "min-value",
              "description": "For multiple selections, the component's lower value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "minValue"
            },
            {
              "name": "mirrored",
              "description": "When `true`, the component will display values from high to low.\n\nNote that this value will be ignored if the slider has an associated histogram.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "mirrored"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "page-step",
              "description": "Specifies the interval to move with the page up, or page down keys.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "pageStep"
            },
            {
              "name": "precise",
              "description": "When `true`, sets a finer point for handles.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "precise"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "snap",
              "description": "When `true`, enables snap selection in coordination with `step` via a mouse.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "snap"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "step",
              "description": "Specifies the interval to move with the up, or down keys.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "1",
              "fieldName": "step"
            },
            {
              "name": "ticks",
              "description": "Displays tick marks on the number line at a specified interval.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "ticks"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteSliderChange",
              "description": "Fires when the thumb is released on the component.\n\nNote: To constantly listen to the drag event,\nuse `calciteSliderInput` instead.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteSliderInput",
              "description": "Fires on all updates to the component.\n\nNote: Fires frequently during drag. To perform\nexpensive operations consider using a debounce or throttle to avoid\nlocking up the main thread.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-slider-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-slider-track-color",
              "description": "Specifies the component's track color."
            },
            {
              "name": "--calcite-slider-track-fill-color",
              "description": "Specifies the component's track fill color."
            },
            {
              "name": "--calcite-slider-handle-fill-color",
              "description": "Specifies the component's handle fill color."
            },
            {
              "name": "--calcite-slider-handle-extension-color",
              "description": "Specifies the component's handle extension color."
            },
            {
              "name": "--calcite-slider-accent-color",
              "description": "Specifies the component's accent color."
            },
            {
              "name": "--calcite-slider-tick-color",
              "description": "Specifies the component's tick color."
            },
            {
              "name": "--calcite-slider-tick-border-color",
              "description": "Specifies the component's tick border color."
            },
            {
              "name": "--calcite-slider-tick-selected-color",
              "description": "Specifies the component's tick color when in selected range."
            },
            {
              "name": "--calcite-slider-graph-color",
              "description": "Specifies the component's graph color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-slider",
          "declaration": {
            "name": "Slider",
            "module": "src/components/slider/slider.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/sort-handle/sort-handle.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "SortHandle",
          "tagName": "calcite-sort-handle",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteSortHandle",
          "importPath": "components/calcite-sort-handle",
          "members": [
            {
              "kind": "field",
              "name": "addToItems",
              "description": "Defines the \"Add to\" items.",
              "type": {
                "text": "Array<SortMenuItem>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "SortMenuItem",
                    "module": "docs/components/sort-handle/interfaces.d.ts",
                    "start": 6,
                    "end": 18
                  }
                ]
              }
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst sortHandle = document.querySelector(\"calcite-sort-handle\");\ndocument.body.append(sortHandle);\nawait sortHandle.componentOnReady();\nconsole.log(\"calcite-sort-handle is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flipPlacements",
              "description": "Specifies the component's fallback `calcite-dropdown-item` `placement` when it's initial or specified `placement` has insufficient space available.",
              "type": {
                "text": "Array<\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\">",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Specifies the label of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "moveToItems",
              "description": "Defines the \"Move to\" items.",
              "type": {
                "text": "Array<SortMenuItem>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "SortMenuItem",
                    "module": "docs/components/sort-handle/interfaces.d.ts",
                    "start": 6,
                    "end": 18
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the container element.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-start\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "setPosition",
              "description": "The current position of the handle.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "set-position"
            },
            {
              "kind": "field",
              "name": "setSize",
              "description": "The total number of sortable items.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "set-size"
            },
            {
              "kind": "field",
              "name": "sortDisabled",
              "description": "When `true`, items are no longer sortable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "sort-disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "widthScale",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "attribute": "width-scale",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "description": "Specifies the label of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "open",
              "description": "When `true`, displays and positions the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the container element.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-start\"",
              "fieldName": "placement"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "set-position",
              "description": "The current position of the handle.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "setPosition"
            },
            {
              "name": "set-size",
              "description": "The total number of sortable items.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "setSize"
            },
            {
              "name": "sort-disabled",
              "description": "When `true`, items are no longer sortable.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "sortDisabled"
            },
            {
              "name": "width-scale",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "widthScale"
            }
          ],
          "events": [
            {
              "name": "calciteSortHandleAdd",
              "description": "Fires when an add item has been selected.",
              "type": {
                "text": "AddEventDetail",
                "references": [
                  {
                    "name": "AddEventDetail",
                    "module": "docs/components/sort-handle/interfaces.d.ts",
                    "start": 0,
                    "end": 14
                  }
                ]
              }
            },
            {
              "name": "calciteSortHandleBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteSortHandleBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteSortHandleClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteSortHandleMove",
              "description": "Fires when a move item has been selected.",
              "type": {
                "text": "MoveEventDetail",
                "references": [
                  {
                    "name": "MoveEventDetail",
                    "module": "docs/components/sort-handle/interfaces.d.ts",
                    "start": 0,
                    "end": 15
                  }
                ]
              }
            },
            {
              "name": "calciteSortHandleOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteSortHandleReorder",
              "description": "Fires when a reorder has been selected.",
              "type": {
                "text": "ReorderEventDetail",
                "references": [
                  {
                    "name": "ReorderEventDetail",
                    "module": "docs/components/sort-handle/interfaces.d.ts",
                    "start": 0,
                    "end": 18
                  }
                ]
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-sort-handle",
          "declaration": {
            "name": "SortHandle",
            "module": "src/components/sort-handle/sort-handle.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/sortable-list/sortable-list.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "SortableList",
          "tagName": "calcite-sortable-list",
          "deprecated": "Use the `calcite-block-group` component instead.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteSortableList",
          "importPath": "components/calcite-sortable-list",
          "members": [
            {
              "kind": "field",
              "name": "canPull",
              "description": "When provided, the method will be called to determine whether the element can move from the list.",
              "type": {
                "text": "(detail: DragDetail) => boolean",
                "references": [
                  {
                    "name": "DragDetail",
                    "module": "docs/utils/sortableComponent.d.ts",
                    "start": 9,
                    "end": 19
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "canPut",
              "description": "When provided, the method will be called to determine whether the element can be added from another list.",
              "type": {
                "text": "(detail: DragDetail) => boolean",
                "references": [
                  {
                    "name": "DragDetail",
                    "module": "docs/utils/sortableComponent.d.ts",
                    "start": 9,
                    "end": 19
                  }
                ]
              }
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst sortableList = document.querySelector(\"calcite-sortable-list\");\ndocument.body.append(sortableList);\nawait sortableList.componentOnReady();\nconsole.log(\"calcite-sortable-list is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, disabled prevents interaction. This state shows items with lower opacity/grayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dragSelector",
              "description": "Specifies which items inside the element should be draggable.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "drag-selector",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "group",
              "description": "The list's group identifier.\n\nTo drag elements from one list into another, both lists must have the same group value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "group",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "handleSelector",
              "description": "The selector for the handle elements.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"calcite-handle\"",
              "attribute": "handle-selector",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Indicates the horizontal or vertical orientation of the component.",
              "type": {
                "text": "\"grid\" | \"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "grid",
                    "type": "string"
                  },
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, content is waiting to be loaded. This state shows a busy indicator.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, disabled prevents interaction. This state shows items with lower opacity/grayed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "drag-selector",
              "description": "Specifies which items inside the element should be draggable.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "dragSelector"
            },
            {
              "name": "group",
              "description": "The list's group identifier.\n\nTo drag elements from one list into another, both lists must have the same group value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "group"
            },
            {
              "name": "handle-selector",
              "description": "The selector for the handle elements.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"calcite-handle\"",
              "fieldName": "handleSelector"
            },
            {
              "name": "layout",
              "description": "Indicates the horizontal or vertical orientation of the component.",
              "type": {
                "text": "\"grid\" | \"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "grid",
                    "type": "string"
                  },
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"vertical\"",
              "fieldName": "layout"
            },
            {
              "name": "loading",
              "description": "When `true`, content is waiting to be loaded. This state shows a busy indicator.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            }
          ],
          "events": [
            {
              "name": "calciteListOrderChange",
              "description": "Emitted when the order of the list has changed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding sortable items."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-sortable-list",
          "declaration": {
            "name": "SortableList",
            "module": "src/components/sortable-list/sortable-list.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/split-button/split-button.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "SplitButton",
          "tagName": "calcite-split-button",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteSplitButton",
          "importPath": "components/calcite-split-button",
          "members": [
            {
              "kind": "field",
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline\" | \"outline-fill\" | \"solid\" | \"transparent\"",
                "values": [
                  {
                    "value": "outline",
                    "type": "string"
                  },
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  },
                  {
                    "value": "transparent",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "attribute": "appearance",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst splitButton = document.querySelector(\"calcite-split-button\");\ndocument.body.append(splitButton);\nawait splitButton.componentOnReady();\nconsole.log(\"calcite-split-button is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "download",
              "description": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value:\nWithout a value, the browser will suggest a filename/extension.",
              "type": {
                "text": "boolean | string",
                "values": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "false",
              "attribute": "download",
              "reflects": true,
              "docsTags": [
                {
                  "name": "see",
                  "text": "[Global download attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download)."
                }
              ]
            },
            {
              "kind": "field",
              "name": "dropdownIconType",
              "description": "Specifies the icon used for the dropdown menu.",
              "type": {
                "text": "\"caret\" | \"chevron\" | \"ellipsis\" | \"overflow\"",
                "values": [
                  {
                    "value": "caret",
                    "type": "string"
                  },
                  {
                    "value": "chevron",
                    "type": "string"
                  },
                  {
                    "value": "ellipsis",
                    "type": "string"
                  },
                  {
                    "value": "overflow",
                    "type": "string"
                  }
                ]
              },
              "default": "\"chevron\"",
              "attribute": "dropdown-icon-type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dropdownLabel",
              "description": "Accessible name for the dropdown menu.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "dropdown-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "flipPlacements",
              "description": "Specifies the component's fallback slotted content `placement` when it's initial or specified `placement` has insufficient space available.",
              "type": {
                "text": "Array<\"top\" | \"bottom\" | \"left\" | \"right\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" | \"leading-start\" | \"leading\" | \"leading-end\" | \"trailing-end\" | \"trailing\" | \"trailing-start\">",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  }
                ]
              }
            },
            {
              "kind": "field",
              "name": "href",
              "description": "Specifies the URL of the linked resource, which can be set as an absolute or relative path.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to border and background, if applicable.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "inverse",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"brand\"",
              "attribute": "kind",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed on the primary button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the container element.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-end\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryIconEnd",
              "description": "Specifies an icon to display at the end of the primary button.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "primary-icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryIconFlipRtl",
              "description": "Displays the `primaryIconStart` and/or `primaryIconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "primary-icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryIconStart",
              "description": "Specifies an icon to display at the start of the primary button.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "primary-icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryLabel",
              "description": "Accessible name for the primary button.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "primary-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "primaryText",
              "description": "Text displayed in the primary button.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "primary-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rel",
              "description": "Defines the relationship between the `href` value and the current document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "rel",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "target",
              "description": "Specifies where to open the linked document defined in the `href` property.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "target",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Specifies the width of the component. [Deprecated] The `\"half\"` value is deprecated, use `\"full\"` instead.",
              "type": {
                "text": "\"auto\" | \"full\" | \"half\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  },
                  {
                    "value": "half",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "width",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "appearance",
              "description": "Specifies the appearance style of the component.",
              "type": {
                "text": "\"outline\" | \"outline-fill\" | \"solid\" | \"transparent\"",
                "values": [
                  {
                    "value": "outline",
                    "type": "string"
                  },
                  {
                    "value": "outline-fill",
                    "type": "string"
                  },
                  {
                    "value": "solid",
                    "type": "string"
                  },
                  {
                    "value": "transparent",
                    "type": "string"
                  }
                ]
              },
              "default": "\"solid\"",
              "fieldName": "appearance"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "download",
              "description": "Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value:\nWithout a value, the browser will suggest a filename/extension.",
              "type": {
                "text": "boolean | string",
                "values": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "false",
              "fieldName": "download"
            },
            {
              "name": "dropdown-icon-type",
              "description": "Specifies the icon used for the dropdown menu.",
              "type": {
                "text": "\"caret\" | \"chevron\" | \"ellipsis\" | \"overflow\"",
                "values": [
                  {
                    "value": "caret",
                    "type": "string"
                  },
                  {
                    "value": "chevron",
                    "type": "string"
                  },
                  {
                    "value": "ellipsis",
                    "type": "string"
                  },
                  {
                    "value": "overflow",
                    "type": "string"
                  }
                ]
              },
              "default": "\"chevron\"",
              "fieldName": "dropdownIconType"
            },
            {
              "name": "dropdown-label",
              "description": "Accessible name for the dropdown menu.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "dropdownLabel"
            },
            {
              "name": "href",
              "description": "Specifies the URL of the linked resource, which can be set as an absolute or relative path.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "href"
            },
            {
              "name": "kind",
              "description": "Specifies the kind of the component, which will apply to border and background, if applicable.",
              "type": {
                "text": "\"brand\" | \"danger\" | \"inverse\" | \"neutral\"",
                "values": [
                  {
                    "value": "brand",
                    "type": "string"
                  },
                  {
                    "value": "danger",
                    "type": "string"
                  },
                  {
                    "value": "inverse",
                    "type": "string"
                  },
                  {
                    "value": "neutral",
                    "type": "string"
                  }
                ]
              },
              "default": "\"brand\"",
              "fieldName": "kind"
            },
            {
              "name": "loading",
              "description": "When `true`, a busy indicator is displayed on the primary button.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "loading"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\n`\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the container element.",
              "type": {
                "text": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"top\" | \"top-end\" | \"top-start\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom-end\"",
              "fieldName": "placement"
            },
            {
              "name": "primary-icon-end",
              "description": "Specifies an icon to display at the end of the primary button.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "primaryIconEnd"
            },
            {
              "name": "primary-icon-flip-rtl",
              "description": "Displays the `primaryIconStart` and/or `primaryIconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "primaryIconFlipRtl"
            },
            {
              "name": "primary-icon-start",
              "description": "Specifies an icon to display at the start of the primary button.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "primaryIconStart"
            },
            {
              "name": "primary-label",
              "description": "Accessible name for the primary button.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "primaryLabel"
            },
            {
              "name": "primary-text",
              "description": "Text displayed in the primary button.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "primaryText"
            },
            {
              "name": "rel",
              "description": "Defines the relationship between the `href` value and the current document.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "rel"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "target",
              "description": "Specifies where to open the linked document defined in the `href` property.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "target"
            },
            {
              "name": "width",
              "description": "Specifies the width of the component. [Deprecated] The `\"half\"` value is deprecated, use `\"full\"` instead.",
              "type": {
                "text": "\"auto\" | \"full\" | \"half\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  },
                  {
                    "value": "half",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "width"
            }
          ],
          "events": [
            {
              "name": "calciteSplitButtonPrimaryClick",
              "description": "Fires when the primary button is clicked.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteSplitButtonSecondaryClick",
              "description": "Fires when the dropdown menu is clicked.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-dropdown` content."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-split-button-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-split-button-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-split-button-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-split-button-icon-color",
              "description": "Specifies the component's `iconStart` and `iconEnd` color."
            },
            {
              "name": "--calcite-split-button-loader-color",
              "description": "Specifies the component's loader color."
            },
            {
              "name": "--calcite-split-button-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-split-button-shadow",
              "description": "Specifies the component's shadow."
            },
            {
              "name": "--calcite-split-button-divider-border-color",
              "description": "Specifies the component's divider border color."
            },
            {
              "name": "--calcite-split-button-divider-color",
              "description": "Specifies the component's divider color."
            },
            {
              "name": "--calcite-split-button-dropdown-width",
              "description": "Specifies the width of the component's dropdown."
            },
            {
              "name": "--calcite-split-button-dropdown-background-color",
              "description": "Specifies the component's dropdown background color.\n*"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-split-button",
          "declaration": {
            "name": "SplitButton",
            "module": "src/components/split-button/split-button.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stack/stack.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Stack",
          "tagName": "calcite-stack",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteStack",
          "importPath": "components/calcite-stack",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst stack = document.querySelector(\"calcite-stack\");\ndocument.body.append(stack);\nawait stack.componentOnReady();\nconsole.log(\"calcite-stack is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, content interaction is prevented and displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, content interaction is prevented and displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding content."
            },
            {
              "name": "actions-start",
              "description": "A slot for adding actionable `calcite-action` elements before the content of the component."
            },
            {
              "name": "content-start",
              "description": "A slot for adding non-actionable elements before content of the component."
            },
            {
              "name": "content-end",
              "description": "A slot for adding non-actionable elements after content of the component."
            },
            {
              "name": "actions-end",
              "description": "A slot for adding actionable `calcite-action` elements after the content of the component."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-stack-padding-inline",
              "description": "Specifies the inline padding of the component's content."
            },
            {
              "name": "--calcite-stack-padding-block",
              "description": "Specifies the block padding of the component's content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-stack",
          "declaration": {
            "name": "Stack",
            "module": "src/components/stack/stack.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper/stepper.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Stepper",
          "tagName": "calcite-stepper",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteStepper",
          "importPath": "components/calcite-stepper",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst stepper = document.querySelector(\"calcite-stepper\");\ndocument.body.append(stepper);\nawait stepper.componentOnReady();\nconsole.log(\"calcite-stepper is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "method",
              "name": "endStep",
              "description": "Set the last `calcite-stepper-item` as active.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "goToStep",
              "description": "Set a specified `calcite-stepper-item` as active.",
              "parameters": [
                {
                  "name": "step",
                  "type": {
                    "text": "number",
                    "values": [
                      {
                        "type": "number"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "step"
                }
              ],
              "signature": "(step: number): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "When `true`, displays a status icon in the `calcite-stepper-item` heading.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Defines the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"horizontal-single\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "horizontal-single",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "method",
              "name": "nextStep",
              "description": "Set the next `calcite-stepper-item` as active.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "numbered",
              "description": "When `true`, displays the step number in the `calcite-stepper-item` heading.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "numbered",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "prevStep",
              "description": "Set the previous `calcite-stepper-item` as active.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItem",
              "description": "Specifies the component's selected item.",
              "type": {
                "text": "HTMLCalciteStepperItemElement",
                "references": [
                  {
                    "name": "HTMLCalciteStepperItemElement",
                    "module": "index.js",
                    "start": 0,
                    "end": 29
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "method",
              "name": "startStep",
              "description": "Set the first `calcite-stepper-item` as active.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "icon",
              "description": "When `true`, displays a status icon in the `calcite-stepper-item` heading.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "icon"
            },
            {
              "name": "layout",
              "description": "Defines the layout of the component.",
              "type": {
                "text": "\"horizontal\" | \"horizontal-single\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "horizontal-single",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "fieldName": "layout"
            },
            {
              "name": "numbered",
              "description": "When `true`, displays the step number in the `calcite-stepper-item` heading.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "numbered"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            }
          ],
          "events": [
            {
              "name": "calciteStepperChange",
              "description": "Fires when the active `calcite-stepper-item` changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteStepperItemChange",
              "description": "Fires when the active `calcite-stepper-item` changes.",
              "type": {
                "text": "void"
              },
              "deprecated": "use `calciteStepperChange` instead or `calciteStepperItemChange` on items instead.",
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-stepper-item` elements."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-stepper-bar-gap",
              "description": "Specifies the space between items in the component."
            },
            {
              "name": "--calcite-stepper-bar-inactive-fill-color",
              "description": "Specifies the fill color of items in the component."
            },
            {
              "name": "--calcite-stepper-bar-active-fill-color",
              "description": "Specifies the fill color of active items in the component."
            },
            {
              "name": "--calcite-stepper-bar-complete-fill-color",
              "description": "Specifies the fill color of complete items in the component."
            },
            {
              "name": "--calcite-stepper-bar-error-fill-color",
              "description": "Specifies the fill color of error items in the component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-stepper",
          "declaration": {
            "name": "Stepper",
            "module": "src/components/stepper/stepper.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/stepper-item/stepper-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "StepperItem",
          "tagName": "calcite-stepper-item",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteStepperItem",
          "importPath": "components/calcite-stepper-item",
          "members": [
            {
              "kind": "field",
              "name": "complete",
              "description": "When `true`, the step has been completed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "complete",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst stepperItem = document.querySelector(\"calcite-stepper-item\");\ndocument.body.append(stepperItem);\nawait stepperItem.componentOnReady();\nconsole.log(\"calcite-stepper-item is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description for the component. Displays below the header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "error",
              "description": "When `true`, the component contains an error that requires resolution from the user.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "error",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "complete",
              "description": "When `true`, the step has been completed.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "complete"
            },
            {
              "name": "description",
              "description": "A description for the component. Displays below the header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "error",
              "description": "When `true`, the component contains an error that requires resolution from the user.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "error"
            },
            {
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            }
          ],
          "events": [
            {
              "name": "calciteStepperItemSelect",
              "description": "Fires when the active `calcite-stepper-item` changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-stepper-item-background-color-press",
              "description": "Specifies the component's background-color when active."
            },
            {
              "name": "--calcite-stepper-item-header-text-color",
              "description": "Specifies the component's header text color."
            },
            {
              "name": "--calcite-stepper-item-header-text-color-hover",
              "description": "Specifies the component's header text color when hovered or focused."
            },
            {
              "name": "--calcite-stepper-item-selected-header-text-color",
              "description": "Specifies the component's header text color when selected."
            },
            {
              "name": "--calcite-stepper-item-icon-color",
              "description": "Specifies the component's icon color."
            },
            {
              "name": "--calcite-stepper-item-complete-icon-color",
              "description": "Specifies the component's icon color when complete."
            },
            {
              "name": "--calcite-stepper-item-error-icon-color",
              "description": "Specifies the component's icon and number color when in error."
            },
            {
              "name": "--calcite-stepper-item-selected-icon-color",
              "description": "Specifies the component's icon and number color when selected."
            },
            {
              "name": "--calcite-stepper-item-description-text-color",
              "description": "Specifies the component's description and number text color."
            },
            {
              "name": "--calcite-stepper-item-description-text-color-hover",
              "description": "Specifies the component's description text color when hovered, focused or selected."
            },
            {
              "name": "--calcite-stepper-bar-gap",
              "description": "Specifies the component's bottom spacing."
            },
            {
              "name": "--calcite-stepper-bar-fill-color",
              "description": "Specifies the component's fill color."
            },
            {
              "name": "--calcite-stepper-bar-fill-color-hover",
              "description": "Specifies the component's fill color when hovered or focused."
            },
            {
              "name": "--calcite-stepper-bar-complete-fill-color",
              "description": "Specifies the component's fill color when complete."
            },
            {
              "name": "--calcite-stepper-bar-complete-fill-color-hover",
              "description": "When the component is `complete`, specifies the component's fill color when hovered or focused."
            },
            {
              "name": "--calcite-stepper-bar-error-fill-color",
              "description": "Specifies the component's fill color when in error."
            },
            {
              "name": "--calcite-stepper-bar-error-fill-color-hover",
              "description": "When the component contains an `error`, specifies the component's fill color when hovered or focused."
            },
            {
              "name": "--calcite-stepper-bar-selected-fill-color",
              "description": "Specifies the component's fill color when selected."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-stepper-item",
          "declaration": {
            "name": "StepperItem",
            "module": "src/components/stepper-item/stepper-item.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/swatch/swatch.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Swatch",
          "tagName": "calcite-swatch",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteSwatch",
          "importPath": "components/calcite-swatch",
          "members": [
            {
              "kind": "field",
              "name": "color",
              "description": "Specifies the component's color",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "color",
              "docsTags": [
                {
                  "name": "see",
                  "text": "https://developer.mozilla.org/en-US/docs/Web/CSS/color_value"
                }
              ]
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst swatch = document.querySelector(\"calcite-swatch\");\ndocument.body.append(swatch);\nawait swatch.componentOnReady();\nconsole.log(\"calcite-swatch is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component. When contained in a parent `calcite-swatch-group` inherits the parent's `scale` value.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "color",
              "description": "Specifies the component's color",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "color"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component. When contained in a parent `calcite-swatch-group` inherits the parent's `scale` value.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteSwatchSelect",
              "description": "Fires when the selected state of the component changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "image",
              "description": "A slot for adding an image or pattern."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-swatch-corner-radius",
              "description": "Specifies the component's corner radius."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-swatch",
          "declaration": {
            "name": "Swatch",
            "module": "src/components/swatch/swatch.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/swatch-group/swatch-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "SwatchGroup",
          "tagName": "calcite-swatch-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteSwatchGroup",
          "importPath": "components/calcite-swatch-group",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst swatchGroup = document.querySelector(\"calcite-swatch-group\");\ndocument.body.append(swatchGroup);\nawait swatchGroup.componentOnReady();\nconsole.log(\"calcite-swatch-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component. Child `calcite-swatch`s inherit the component's value.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "description": "Specifies the component's selected items.",
              "type": {
                "text": "Array<HTMLCalciteSwatchElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteSwatchElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 30
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection,\n\n`\"single-persist\"` allows one selection and prevents de-selection, and\n\n`\"none\"` does not allow any selections.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "attribute": "selection-mode",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component. Child `calcite-swatch`s inherit the component's value.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selection-mode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection,\n\n`\"single-persist\"` allows one selection and prevents de-selection, and\n\n`\"none\"` does not allow any selections.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "fieldName": "selectionMode"
            }
          ],
          "events": [
            {
              "name": "calciteSwatchGroupSelect",
              "description": "Fires when the component's selection changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding one or more `calcite-swatch`s."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-swatch-group-space",
              "description": "Specifies the space between slotted elements."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-swatch-group",
          "declaration": {
            "name": "SwatchGroup",
            "module": "src/components/swatch-group/swatch-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/switch/switch.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Switch",
          "tagName": "calcite-switch",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteSwitch",
          "importPath": "components/calcite-switch",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "description": "When `true`, the component is checked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst switch = document.querySelector(\"calcite-switch\");\ndocument.body.append(switch);\nawait switch.componentOnReady();\nconsole.log(\"calcite-switch is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelTextEnd",
              "description": "When provided, displays label text at the end of the component",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text-end"
            },
            {
              "kind": "field",
              "name": "labelTextStart",
              "description": "When provided, displays label text at the start of the component",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text-start"
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "description": "When `true`, the component is checked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "label-text-end",
              "description": "When provided, displays label text at the end of the component",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelTextEnd"
            },
            {
              "name": "label-text-start",
              "description": "When provided, displays label text at the start of the component",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelTextStart"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.\n\nRequired to pass the component's `value` on form submission.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteSwitchChange",
              "description": "Fires when the `checked` value has changed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-switch-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-switch-background-color-hover",
              "description": "Specifies the component's background color when hovered or pressed."
            },
            {
              "name": "--calcite-switch-border-color",
              "description": "[Deprecated] No longer necessary. Specifies the component's border color."
            },
            {
              "name": "--calcite-switch-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-switch-handle-background-color",
              "description": "Specifies the handle's background color."
            },
            {
              "name": "--calcite-switch-handle-border-color",
              "description": "[Deprecated] No longer necessary. Specifies the handle's border color."
            },
            {
              "name": "--calcite-switch-handle-shadow",
              "description": "[Deprecated] No longer necessary. Specifies the handle's shadow."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-switch",
          "declaration": {
            "name": "Switch",
            "module": "src/components/switch/switch.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab/tab.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Tab",
          "tagName": "calcite-tab",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTab",
          "importPath": "components/calcite-tab",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tab = document.querySelector(\"calcite-tab\");\ndocument.body.append(tab);\nawait tab.componentOnReady();\nconsole.log(\"calcite-tab is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getTabIndex",
              "description": "Returns the index of the component item within the tab array.",
              "return": {
                "type": {
                  "text": "Promise<number>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<number>",
              "async": true
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component's contents are selected.\n\nOnly one tab can be selected within the `calcite-tabs` parent.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tab",
              "description": "Specifies a unique name for the component.\n\nWhen specified, use the same value on the `calcite-tab-title`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "tab",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "selected",
              "description": "When `true`, the component's contents are selected.\n\nOnly one tab can be selected within the `calcite-tabs` parent.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "tab",
              "description": "Specifies a unique name for the component.\n\nWhen specified, use the same value on the `calcite-tab-title`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "tab"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-tab-content-space-y",
              "description": "Specifies the vertical space between the component's content in the `default` slot."
            },
            {
              "name": "--calcite-tab-content-block-padding",
              "description": "[Deprecated] Use `--calcite-tab-content-space-y` instead. Specifies the block padding of the component's content in the `default` slot."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tab",
          "declaration": {
            "name": "Tab",
            "module": "src/components/tab/tab.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab-nav/tab-nav.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TabNav",
          "tagName": "calcite-tab-nav",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTabNav",
          "importPath": "components/calcite-tab-nav",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tabNav = document.querySelector(\"calcite-tab-nav\");\ndocument.body.append(tabNav);\nawait tabNav.componentOnReady();\nconsole.log(\"calcite-tab-nav is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to, and is inherited from the parent `calcite-tabs`, defaults to `top`.\n\n `@internal`",
              "type": {
                "text": "\"bottom\" | \"top\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom\"",
              "attribute": "position"
            },
            {
              "kind": "field",
              "name": "selectedTitle",
              "description": "Specifies the component's selected `calcite-tab-title`.",
              "type": {
                "text": "HTMLCalciteTabTitleElement",
                "references": [
                  {
                    "name": "HTMLCalciteTabTitleElement",
                    "module": "index.js",
                    "start": 0,
                    "end": 26
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "storageId",
              "description": "Specifies the name when saving selected `calcite-tab` data to `localStorage`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "storage-id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "syncId",
              "description": "Specifies text to update multiple components to keep in sync if one changes.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "sync-id",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "position",
              "description": "Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to, and is inherited from the parent `calcite-tabs`, defaults to `top`.\n\n `@internal`",
              "type": {
                "text": "\"bottom\" | \"top\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  }
                ]
              },
              "default": "\"bottom\"",
              "fieldName": "position"
            },
            {
              "name": "storage-id",
              "description": "Specifies the name when saving selected `calcite-tab` data to `localStorage`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "storageId"
            },
            {
              "name": "sync-id",
              "description": "Specifies text to update multiple components to keep in sync if one changes.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "syncId"
            }
          ],
          "events": [
            {
              "name": "calciteTabChange",
              "description": "Emits when the selected `calcite-tab` changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-tab-title`s."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-tab-background-color",
              "description": "When `calcite-tabs` is `bordered`, specifies the component's background color."
            },
            {
              "name": "--calcite-tab-border-color",
              "description": "When `calcite-tabs` is `bordered`, specifies the component's border color."
            },
            {
              "name": "--calcite-tab-text-color",
              "description": "Specifies the component's `iconStart, `iconEnd`, and text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tab-nav",
          "declaration": {
            "name": "TabNav",
            "module": "src/components/tab-nav/tab-nav.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tab-title/tab-title.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TabTitle",
          "tagName": "calcite-tab-title",
          "description": "Tab-titles are optionally individually closable.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTabTitle",
          "importPath": "components/calcite-tab-title",
          "members": [
            {
              "kind": "field",
              "name": "closable",
              "description": "When `true`, a close button is added to the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closed",
              "description": "When `true`, does not display or position the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closed",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tabTitle = document.querySelector(\"calcite-tab-title\");\ndocument.body.append(tabTitle);\nawait tabTitle.componentOnReady();\nconsole.log(\"calcite-tab-title is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "getTabIndex",
              "description": "Returns the index of the title within the `calcite-tab-nav`.",
              "return": {
                "type": {
                  "text": "Promise<number>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<number>",
              "async": true
            },
            {
              "kind": "field",
              "name": "iconEnd",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-end",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to, and is inherited from the parent `calcite-tabs`, defaults to `top`.\n\n `@internal`",
              "type": {
                "text": "\"bottom\" | \"top\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  }
                ]
              },
              "default": "\"top\"",
              "attribute": "position"
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component and its respective `calcite-tab` contents are selected.\n\nOnly one tab can be selected within the `calcite-tabs` parent.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "tab",
              "description": "Specifies a unique name for the component.\n\nWhen specified, use the same value on the `calcite-tab`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "tab",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "closable",
              "description": "When `true`, a close button is added to the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closable"
            },
            {
              "name": "closed",
              "description": "When `true`, does not display or position the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closed"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "icon-end",
              "description": "Specifies an icon to display at the end of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconEnd"
            },
            {
              "name": "icon-flip-rtl",
              "description": "Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            },
            {
              "name": "position",
              "description": "Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to, and is inherited from the parent `calcite-tabs`, defaults to `top`.\n\n `@internal`",
              "type": {
                "text": "\"bottom\" | \"top\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  }
                ]
              },
              "default": "\"top\"",
              "fieldName": "position"
            },
            {
              "name": "selected",
              "description": "When `true`, the component and its respective `calcite-tab` contents are selected.\n\nOnly one tab can be selected within the `calcite-tabs` parent.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "tab",
              "description": "Specifies a unique name for the component.\n\nWhen specified, use the same value on the `calcite-tab`.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "tab"
            }
          ],
          "events": [
            {
              "name": "calciteTabsActivate",
              "description": "Fires when a `calcite-tab` is selected.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteTabsClose",
              "description": "Fires when a `calcite-tab` is closed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding text."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-tab-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-tab-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-tab-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-tab-background-color-hover",
              "description": "When `calcite-tabs` is `bordered`, specifies the component's background color when hovered."
            },
            {
              "name": "--calcite-tab-accent-color-press",
              "description": "Specifies the component's accent color when selected or active."
            },
            {
              "name": "--calcite-tab-icon-color-end",
              "description": "Specifies the component's `iconEnd` color. Fallback to `--calcite-icon-color`."
            },
            {
              "name": "--calcite-tab-icon-color-start",
              "description": "Specifies the component's `iconStart` color. Fallback to `--calcite-icon-color`."
            },
            {
              "name": "--calcite-tab-close-icon-color",
              "description": "Specifies the component's close element icon color."
            },
            {
              "name": "--calcite-tab-close-icon-color-press",
              "description": "Specifies the component's close element icon color when hovered, focused, and active."
            },
            {
              "name": "--calcite-tab-close-icon-background-color",
              "description": "Specifies the component's close element icon background color."
            },
            {
              "name": "--calcite-tab-close-icon-background-color-press",
              "description": "Specifies the component's close element icon background color when hovered, focused, and active."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tab-title",
          "declaration": {
            "name": "TabTitle",
            "module": "src/components/tab-title/tab-title.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table/table.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Table",
          "tagName": "calcite-table",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTable",
          "importPath": "components/calcite-table",
          "members": [
            {
              "kind": "field",
              "name": "bordered",
              "description": "When `true`, displays borders in the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "bordered",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "caption",
              "description": "Specifies an accessible title for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "caption",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst table = document.querySelector(\"calcite-table\");\ndocument.body.append(table);\nawait table.componentOnReady();\nconsole.log(\"calcite-table is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentPage",
              "description": "Sets/gets the current page",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "current-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "groupSeparator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "group-separator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "interactionMode",
              "description": "When `\"interactive\"`, allows focus and keyboard navigation of `table-header`s and `table-cell`s.  When `\"static\"`, prevents focus and keyboard navigation of `table-header`s and `table-cell`s when assistive technologies are not active. Selection affordances and slotted content within `table-cell`s remain focusable.",
              "type": {
                "text": "\"interactive\" | \"static\"",
                "values": [
                  {
                    "value": "interactive",
                    "type": "string"
                  },
                  {
                    "value": "static",
                    "type": "string"
                  }
                ]
              },
              "default": "\"interactive\"",
              "attribute": "interaction-mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Specifies the layout of the component.",
              "type": {
                "text": "\"auto\" | \"fixed\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "numbered",
              "description": "When `true`, displays the position of the row in numeric form.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "numbered",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pageSize",
              "description": "Specifies the page size of the component. When present, renders `calcite-pagination`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "page-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "description": "Specifies the component's selected items.",
              "type": {
                "text": "Array<HTMLCalciteTableRowElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteTableRowElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 32
                  }
                ]
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectionDisplay",
              "description": "Specifies the display of the selection interface when `selection-mode` is not `\"none\"`. When `\"none\"`, content slotted the `selection-actions` slot will not be displayed.",
              "type": {
                "text": "\"none\" | \"top\"",
                "values": [
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  }
                ]
              },
              "default": "\"top\"",
              "attribute": "selection-display",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection, and\n\n`\"none\"` does not allow any selections.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "attribute": "selection-mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "striped",
              "description": "When `true`, displays striped styling in the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "striped",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "bordered",
              "description": "When `true`, displays borders in the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "bordered"
            },
            {
              "name": "caption",
              "description": "Specifies an accessible title for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "caption"
            },
            {
              "name": "current-page",
              "description": "Sets/gets the current page",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "currentPage"
            },
            {
              "name": "group-separator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "groupSeparator"
            },
            {
              "name": "interaction-mode",
              "description": "When `\"interactive\"`, allows focus and keyboard navigation of `table-header`s and `table-cell`s.  When `\"static\"`, prevents focus and keyboard navigation of `table-header`s and `table-cell`s when assistive technologies are not active. Selection affordances and slotted content within `table-cell`s remain focusable.",
              "type": {
                "text": "\"interactive\" | \"static\"",
                "values": [
                  {
                    "value": "interactive",
                    "type": "string"
                  },
                  {
                    "value": "static",
                    "type": "string"
                  }
                ]
              },
              "default": "\"interactive\"",
              "fieldName": "interactionMode"
            },
            {
              "name": "layout",
              "description": "Specifies the layout of the component.",
              "type": {
                "text": "\"auto\" | \"fixed\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "layout"
            },
            {
              "name": "numbered",
              "description": "When `true`, displays the position of the row in numeric form.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "numbered"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "page-size",
              "description": "Specifies the page size of the component. When present, renders `calcite-pagination`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "pageSize"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selection-display",
              "description": "Specifies the display of the selection interface when `selection-mode` is not `\"none\"`. When `\"none\"`, content slotted the `selection-actions` slot will not be displayed.",
              "type": {
                "text": "\"none\" | \"top\"",
                "values": [
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  }
                ]
              },
              "default": "\"top\"",
              "fieldName": "selectionDisplay"
            },
            {
              "name": "selection-mode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"multiple\"` allows any number of selections,\n\n`\"single\"` allows only one selection, and\n\n`\"none\"` does not allow any selections.",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "fieldName": "selectionMode"
            },
            {
              "name": "striped",
              "description": "When `true`, displays striped styling in the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "striped"
            }
          ],
          "events": [
            {
              "name": "calciteTablePageChange",
              "description": "Emits when the component's page selection changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteTableSelect",
              "description": "Emits when the component's selected rows change.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-table-row` elements containing `calcite-table-cell` and/or `calcite-table-header` elements."
            },
            {
              "name": "table-header",
              "description": "A slot for adding `calcite-table-row` elements containing `calcite-table-header` elements."
            },
            {
              "name": "table-footer",
              "description": "A slot for adding `calcite-table-row` elements containing `calcite-table-cell` and/or `calcite-table-header` elements."
            },
            {
              "name": "selection-actions",
              "description": "A slot for adding `calcite-actions` or other elements to display when `selectionMode` is not `\"none\"` and `selectionDisplay` is not `\"none\"`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-table-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-table-corner-radius",
              "description": "Specifies the component's border radius."
            },
            {
              "name": "--calcite-table-shadow",
              "description": "Specifies the component's shadow."
            },
            {
              "name": "--calcite-table-number-cell-background-color",
              "description": "Specifies the background color of the component's `numbered` cell."
            },
            {
              "name": "--calcite-table-number-cell-text-color",
              "description": "Specifies the text color of the component's `numbered` cell."
            },
            {
              "name": "--calcite-table-selection-cell-background-color",
              "description": "Specifies the background color of the component's `selectionMode` cell."
            },
            {
              "name": "--calcite-table-selection-cell-background-color-selected",
              "description": "Specifies the background color of the component's `selectionMode` cell."
            },
            {
              "name": "--calcite-table-selection-cell-icon-color",
              "description": "Specifies the icon color of the component's `selectionMode` selection icon."
            },
            {
              "name": "--calcite-table-selection-cell-icon-color-selected",
              "description": "Specifies the icon color of the component's `selectionMode` selection icon when selected."
            },
            {
              "name": "--calcite-table-selection-chip-background-color",
              "description": "Specifies the background color of the component's `selectionMode` selection chip."
            },
            {
              "name": "--calcite-table-selection-chip-border-color",
              "description": "Specifies the border color of the component's `selectionMode` selection chip."
            },
            {
              "name": "--calcite-table-selection-chip-corner-radius",
              "description": "Specifies the corner radius of the component's `selectionMode` selection chip."
            },
            {
              "name": "--calcite-table-selection-chip-shadow",
              "description": "Specifies the shadow of the component's `selectionMode` selection chip."
            },
            {
              "name": "--calcite-table-selection-chip-text-color",
              "description": "Specifies the text color of the component's `selectionMode` selection chip."
            },
            {
              "name": "--calcite-table-selection-chip-background-color-selected",
              "description": "Specifies the background color of the component's `selectionMode` selection chip when Table Rows are selected."
            },
            {
              "name": "--calcite-table-selection-chip-border-color-selected",
              "description": "Specifies the border color of the component's `selectionMode` selection chip when Table Rows are selected."
            },
            {
              "name": "--calcite-table-selection-chip-text-color-selected",
              "description": "Specifies the text color of the component's `selectionMode` selection chip when Table Rows are selected."
            },
            {
              "name": "--calcite-table-selection-out-of-view-chip-background-color",
              "description": "Specifies the background color of the component's `selectionMode` selection out of view chip."
            },
            {
              "name": "--calcite-table-selection-out-of-view-chip-border-color",
              "description": "Specifies the border color of the component's `selectionMode` selection out of view chip."
            },
            {
              "name": "--calcite-table-selection-out-of-view-chip-corner-radius",
              "description": "Specifies the corner radius of the component's `selectionMode` selection out of view chip."
            },
            {
              "name": "--calcite-table-selection-out-of-view-chip-icon-color",
              "description": "Specifies the icon color of the component's `selectionMode` selection out of view chip."
            },
            {
              "name": "--calcite-table-selection-out-of-view-chip-shadow",
              "description": "Specifies the shadow of the component's `selectionMode` selection out of view chip."
            },
            {
              "name": "--calcite-table-selection-out-of-view-chip-text-color",
              "description": "Specifies the text color of the component's `selectionMode` selection out of view chip."
            },
            {
              "name": "--calcite-table-selection-dismiss-button-background-color-active",
              "description": "Specifies the background color of the component's `selectionMode` selection dismiss chip when active."
            },
            {
              "name": "--calcite-table-selection-dismiss-button-background-color-hover",
              "description": "Specifies the background color of the component's `selectionMode` selection dismiss chip when hovered."
            },
            {
              "name": "--calcite-table-selection-dismiss-button-background-color",
              "description": "Specifies the background color of the component's `selectionMode` selection dismiss chip."
            },
            {
              "name": "--calcite-table-selection-dismiss-button-border-color-active",
              "description": "Specifies the border color of the component's `selectionMode` selection dismiss chip when active."
            },
            {
              "name": "--calcite-table-selection-dismiss-button-border-color-hover",
              "description": "Specifies the border color of the component's `selectionMode` selection dismiss chip when hovered."
            },
            {
              "name": "--calcite-table-selection-dismiss-button-border-color",
              "description": "Specifies the border color of the component's `selectionMode` selection dismiss chip."
            },
            {
              "name": "--calcite-table-selection-dismiss-button-corner-radius",
              "description": "Specifies the corner radius of the component's `selectionMode` selection dismiss chip."
            },
            {
              "name": "--calcite-table-selection-dismiss-button-shadow",
              "description": "Specifies the shadow of the component's `selectionMode` selection dismiss chip."
            },
            {
              "name": "--calcite-table-selection-dismiss-button-text-color-active",
              "description": "Specifies the text color of the component's `selectionMode` selection dismiss chip when active."
            },
            {
              "name": "--calcite-table-selection-dismiss-button-text-color-hover",
              "description": "Specifies the text color of the component's `selectionMode` selection dismiss chip when hovered."
            },
            {
              "name": "--calcite-table-selection-dismiss-button-text-color",
              "description": "Specifies the text color of the component's `selectionMode` selection dismiss chip."
            },
            {
              "name": "--calcite-table-pagination-color",
              "description": "Specifies the component's `pageSize` pagination item color."
            },
            {
              "name": "--calcite-table-pagination-color-hover",
              "description": "Specifies the component's `pageSize` pagination item color when hovered or selected."
            },
            {
              "name": "--calcite-table-pagination-color-border-hover",
              "description": "Specifies the component's `pageSize` pagination item bottom border color when hovered."
            },
            {
              "name": "--calcite-table-pagination-color-border-active",
              "description": "Specifies the component's `pageSize` pagination item bottom border color when selected."
            },
            {
              "name": "--calcite-table-pagination-background-color",
              "description": "Specifies the component's `pageSize` pagination item background color when active."
            },
            {
              "name": "--calcite-table-pagination-icon-color-background-hover",
              "description": "Specifies the component's `pageSize` pagination chevron item background color when hovered."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-table",
          "declaration": {
            "name": "Table",
            "module": "src/components/table/table.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table-cell/table-cell.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TableCell",
          "tagName": "calcite-table-cell",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTableCell",
          "importPath": "components/calcite-table-cell",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the alignment of the component.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "colSpan",
              "description": "Specifies the number of columns the component should span.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "col-span",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tableCell = document.querySelector(\"calcite-table-cell\");\ndocument.body.append(tableCell);\nawait tableCell.componentOnReady();\nconsole.log(\"calcite-table-cell is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "rowSpan",
              "description": "Specifies the number of rows the component should span.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "row-span",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "description": "Specifies the alignment of the component.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "alignment"
            },
            {
              "name": "col-span",
              "description": "Specifies the number of columns the component should span.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "colSpan"
            },
            {
              "name": "row-span",
              "description": "Specifies the number of rows the component should span.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "rowSpan"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding content, usually text content."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-table-cell-background",
              "description": "[Deprecated] Use `--calcite-table-cell-background-color` instead. Specifies the component's background color."
            },
            {
              "name": "--calcite-table-cell-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-table-cell-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-table-cell-text-color",
              "description": "Specifies the component's text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-table-cell",
          "declaration": {
            "name": "TableCell",
            "module": "src/components/table-cell/table-cell.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table-header/table-header.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TableHeader",
          "tagName": "calcite-table-header",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTableHeader",
          "importPath": "components/calcite-table-header",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the alignment of the component.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "colSpan",
              "description": "Specifies the number of columns the component should span.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "col-span",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tableHeader = document.querySelector(\"calcite-table-header\");\ndocument.body.append(tableHeader);\nawait tableHeader.componentOnReady();\nconsole.log(\"calcite-table-header is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description to display beneath heading content.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "A heading to display above description content.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "rowSpan",
              "description": "Specifies the number of rows the component should span.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "row-span",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "description": "Specifies the alignment of the component.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "alignment"
            },
            {
              "name": "col-span",
              "description": "Specifies the number of columns the component should span.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "colSpan"
            },
            {
              "name": "description",
              "description": "A description to display beneath heading content.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "heading",
              "description": "A heading to display above description content.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "row-span",
              "description": "Specifies the number of rows the component should span.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "rowSpan"
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-table-header-background",
              "description": "[Deprecated] Use the `--calcite-table-header-background-color` property instead. Specifies the component's background color."
            },
            {
              "name": "--calcite-table-header-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-table-header-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-table-header-heading-text-color",
              "description": "Specifies the component's `heading` text color."
            },
            {
              "name": "--calcite-table-header-description-text-color",
              "description": "Specifies the component's `description` text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-table-header",
          "declaration": {
            "name": "TableHeader",
            "module": "src/components/table-header/table-header.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/table-row/table-row.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TableRow",
          "tagName": "calcite-table-row",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTableRow",
          "importPath": "components/calcite-table-row",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the alignment of the component.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tableRow = document.querySelector(\"calcite-table-row\");\ndocument.body.append(tableRow);\nawait tableRow.componentOnReady();\nconsole.log(\"calcite-table-row is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "description": "Specifies the alignment of the component.",
              "type": {
                "text": "\"center\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "alignment"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            }
          ],
          "events": [
            {
              "name": "calciteTableRowSelect",
              "description": "Fires when the selected state of the component changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-table-cell` or `calcite-table-header` elements."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-table-row-background",
              "description": "[Deprecated] Use `--calcite-table-row-background-color` instead. Specifies the background color of the component."
            },
            {
              "name": "--calcite-table-row-background-color",
              "description": "Specifies the background color of the component."
            },
            {
              "name": "--calcite-table-row-background-color-striped",
              "description": "The background color of the component's `striped` rows, when specified."
            },
            {
              "name": "--calcite-table-row-background-color-selected",
              "description": "The background color of the component's `selected` rows, when specified."
            },
            {
              "name": "--calcite-table-row-accent-color-selected",
              "description": "Specifies the selected accent color of the component."
            },
            {
              "name": "--calcite-table-row-border-color",
              "description": "Specifies the border color of the component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-table-row",
          "declaration": {
            "name": "TableRow",
            "module": "src/components/table-row/table-row.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tabs/tabs.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Tabs",
          "tagName": "calcite-tabs",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTabs",
          "importPath": "components/calcite-tabs",
          "members": [
            {
              "kind": "field",
              "name": "bordered",
              "description": "When `true`, the component will display with a folder style menu.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "bordered"
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tabs = document.querySelector(\"calcite-tabs\");\ndocument.body.append(tabs);\nawait tabs.componentOnReady();\nconsole.log(\"calcite-tabs is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Specifies the layout of the `calcite-tab-nav`, justifying the `calcite-tab-title`s to the start (`\"inline\"`), or across and centered (`\"center\"`).",
              "type": {
                "text": "\"center\" | \"inline\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "inline",
                    "type": "string"
                  }
                ]
              },
              "default": "\"inline\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to the `calcite-tabs`.",
              "type": {
                "text": "\"bottom\" | \"top\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  }
                ]
              },
              "default": "\"top\"",
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "bordered",
              "description": "When `true`, the component will display with a folder style menu.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "bordered"
            },
            {
              "name": "layout",
              "description": "Specifies the layout of the `calcite-tab-nav`, justifying the `calcite-tab-title`s to the start (`\"inline\"`), or across and centered (`\"center\"`).",
              "type": {
                "text": "\"center\" | \"inline\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "inline",
                    "type": "string"
                  }
                ]
              },
              "default": "\"inline\"",
              "fieldName": "layout"
            },
            {
              "name": "position",
              "description": "Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to the `calcite-tabs`.",
              "type": {
                "text": "\"bottom\" | \"top\"",
                "values": [
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  }
                ]
              },
              "default": "\"top\"",
              "fieldName": "position"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-tab`s."
            },
            {
              "name": "title-group",
              "description": "A slot for adding a `calcite-tab-nav`."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-tab-background-color",
              "description": "When `bordered`, specifies the component's background color."
            },
            {
              "name": "--calcite-tab-border-color",
              "description": "Specifies the component's border color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tabs",
          "declaration": {
            "name": "Tabs",
            "module": "src/components/tabs/tabs.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/text-area/text-area.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TextArea",
          "tagName": "calcite-text-area",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTextArea",
          "importPath": "components/calcite-text-area",
          "members": [
            {
              "kind": "field",
              "name": "columns",
              "description": "Specifies the component's number of columns.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "columns",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[cols](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols)"
                }
              ]
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst textArea = document.querySelector(\"calcite-text-area\");\ndocument.body.append(textArea);\nawait textArea.componentOnReady();\nconsole.log(\"calcite-text-area is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "groupSeparator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "group-separator",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "labelText",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label-text"
            },
            {
              "kind": "field",
              "name": "limitText",
              "description": "When `true`, prevents input beyond the `maxLength` value, mimicking native text area behavior.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "limit-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "maxLength",
              "description": "When the component resides in a form,\nspecifies the maximum number of characters allowed.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "max-length",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-maxlength)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "minLength",
              "description": "When the component resides in a form,\nspecifies the minimum number of characters allowed.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "min-length",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-minlength)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-name)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Specifies the placeholder text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "placeholder",
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-placeholder)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "readOnly",
              "description": "When `true`, the component's `value` can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "read-only",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "required",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[required]https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "resize",
              "description": "Specifies if the component is resizable.",
              "type": {
                "text": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"both\"",
              "attribute": "resize",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rows",
              "description": "Specifies the component's number of rows.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "attribute": "rows",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[rows](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows)"
                }
              ]
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "selectText",
              "description": "Selects the text of the component's `value`.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "attribute": "status",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationIcon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "IconName | boolean",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ],
                "values": [
                  {
                    "type": "IconName"
                  },
                  {
                    "type": "boolean"
                  }
                ]
              },
              "attribute": "validation-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "validation-message"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "The current validation state of the component.",
              "type": {
                "text": "{\n    valid: boolean;\n    badInput: boolean;\n    customError: boolean;\n    patternMismatch: boolean;\n    rangeOverflow: boolean;\n    rangeUnderflow: boolean;\n    stepMismatch: boolean;\n    tooLong: boolean;\n    tooShort: boolean;\n    typeMismatch: boolean;\n    valueMissing: boolean;\n}"
              },
              "readonly": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)"
                }
              ],
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"\"",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "wrap",
              "description": "Specifies the wrapping mechanism for the text.",
              "type": {
                "text": "\"hard\" | \"soft\"",
                "values": [
                  {
                    "value": "hard",
                    "type": "string"
                  },
                  {
                    "value": "soft",
                    "type": "string"
                  }
                ]
              },
              "default": "\"soft\"",
              "attribute": "wrap",
              "reflects": true,
              "docsTags": [
                {
                  "name": "mdn",
                  "text": "[wrap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-wrap)"
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "columns",
              "description": "Specifies the component's number of columns.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "columns"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "form",
              "description": "The `id` of the form that will be associated with the component.\n\nWhen not set, the component will be associated with its ancestor form element, if any.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "form"
            },
            {
              "name": "group-separator",
              "description": "When `true`, number values are displayed with a group separator corresponding to the language and country format.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "groupSeparator"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "label-text",
              "description": "When provided, displays label text on the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "labelText"
            },
            {
              "name": "limit-text",
              "description": "When `true`, prevents input beyond the `maxLength` value, mimicking native text area behavior.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "limitText"
            },
            {
              "name": "max-length",
              "description": "When the component resides in a form,\nspecifies the maximum number of characters allowed.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "maxLength"
            },
            {
              "name": "min-length",
              "description": "When the component resides in a form,\nspecifies the minimum number of characters allowed.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "minLength"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "placeholder",
              "description": "Specifies the placeholder text for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "placeholder"
            },
            {
              "name": "read-only",
              "description": "When `true`, the component's `value` can be read, but cannot be modified.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "readOnly"
            },
            {
              "name": "required",
              "description": "When `true` and the component resides in a form,\nthe component must have a value in order for the form to submit.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "required"
            },
            {
              "name": "resize",
              "description": "Specifies if the component is resizable.",
              "type": {
                "text": "\"both\" | \"horizontal\" | \"none\" | \"vertical\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"both\"",
              "fieldName": "resize"
            },
            {
              "name": "rows",
              "description": "Specifies the component's number of rows.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "fieldName": "rows"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "status",
              "description": "Specifies the status of the input field, which determines message and icons.",
              "type": {
                "text": "\"idle\" | \"invalid\" | \"valid\"",
                "values": [
                  {
                    "value": "idle",
                    "type": "string"
                  },
                  {
                    "value": "invalid",
                    "type": "string"
                  },
                  {
                    "value": "valid",
                    "type": "string"
                  }
                ]
              },
              "default": "\"idle\"",
              "fieldName": "status"
            },
            {
              "name": "validation-icon",
              "description": "Specifies the validation icon to display under the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "fieldName": "validationIcon"
            },
            {
              "name": "validation-message",
              "description": "Specifies the validation message to display under the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "validationMessage"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "default": "\"\"",
              "fieldName": "value"
            },
            {
              "name": "wrap",
              "description": "Specifies the wrapping mechanism for the text.",
              "type": {
                "text": "\"hard\" | \"soft\"",
                "values": [
                  {
                    "value": "hard",
                    "type": "string"
                  },
                  {
                    "value": "soft",
                    "type": "string"
                  }
                ]
              },
              "default": "\"soft\"",
              "fieldName": "wrap"
            }
          ],
          "events": [
            {
              "name": "calciteTextAreaChange",
              "description": "Fires each time a new `value` is typed and committed.",
              "type": {
                "text": "void"
              }
            },
            {
              "name": "calciteTextAreaInput",
              "description": "Fires each time a new `value` is typed.",
              "type": {
                "text": "void"
              }
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding text."
            },
            {
              "name": "label-content",
              "description": "A slot for rendering content next to the component's `labelText`."
            },
            {
              "name": "footer-start",
              "description": "A slot for adding content to the start of the component's footer."
            },
            {
              "name": "footer-end",
              "description": "A slot for adding content to the end of the component's footer."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-text-area-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-text-area-border-color",
              "description": "Specifies the component's text area border color."
            },
            {
              "name": "--calcite-text-area-character-limit-text-color",
              "description": "Specifies the color of the character limit text displayed in the footer of the component."
            },
            {
              "name": "--calcite-text-area-divider-color",
              "description": "Specifies the color of the divider between the text area and footer."
            },
            {
              "name": "--calcite-text-area-font-size",
              "description": "Specifies the font size of the text area and footer."
            },
            {
              "name": "--calcite-text-area-max-height",
              "description": "Specifies the component's text area maximum height."
            },
            {
              "name": "--calcite-text-area-min-height",
              "description": "Specifies the component's text area minimum height."
            },
            {
              "name": "--calcite-text-area-max-width",
              "description": "Specifies the component's text area maximum width."
            },
            {
              "name": "--calcite-text-area-min-width",
              "description": "Specifies the component's text area minimum width."
            },
            {
              "name": "--calcite-text-area-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-text-area-footer-border-color",
              "description": "Specifies the footer's border color."
            },
            {
              "name": "--calcite-text-area-corner-radius",
              "description": "Specifies component's corner radius."
            },
            {
              "name": "--calcite-text-area-shadow",
              "description": "Specifies the component's shadow."
            },
            {
              "name": "--calcite-text-area-footer-background-color",
              "description": "Specifies the footer's background color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-text-area",
          "declaration": {
            "name": "TextArea",
            "module": "src/components/text-area/text-area.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile/tile.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Tile",
          "tagName": "calcite-tile",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTile",
          "importPath": "components/calcite-tile",
          "members": [
            {
              "kind": "field",
              "name": "active",
              "description": "When `true`, the component is active.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "deprecated": true,
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the alignment of the Tile's content.",
              "type": {
                "text": "\"center\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tile = document.querySelector(\"calcite-tile\");\ndocument.body.append(tile);\nawait tile.componentOnReady();\nconsole.log(\"calcite-tile is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description for the component, which displays below the heading.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "embed",
              "description": "The component's embed mode.\n\nWhen `true`, renders without a border and padding for use by other components.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "deprecated": "No longer necessary.",
              "attribute": "embed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "The component header text, which displays between the icon and description.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "description": "When embed is `\"false\"`, the URL for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true` and the parent's `selectionMode` is `\"single\"`, `\"single-persist\"', or `\"multiple\"`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "active",
              "description": "When `true`, the component is active.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "active",
              "deprecated": true
            },
            {
              "name": "alignment",
              "description": "Specifies the alignment of the Tile's content.",
              "type": {
                "text": "\"center\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "alignment"
            },
            {
              "name": "description",
              "description": "A description for the component, which displays below the heading.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "embed",
              "description": "The component's embed mode.\n\nWhen `true`, renders without a border and padding for use by other components.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "embed",
              "deprecated": "No longer necessary."
            },
            {
              "name": "heading",
              "description": "The component header text, which displays between the icon and description.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "href",
              "description": "When embed is `\"false\"`, the URL for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "href"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selected",
              "description": "When `true` and the parent's `selectionMode` is `\"single\"`, `\"single-persist\"', or `\"multiple\"`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            }
          ],
          "events": [
            {
              "name": "calciteTileSelect",
              "description": "Fires when the selected state of the component changes.",
              "type": {
                "text": "void"
              }
            }
          ],
          "slots": [
            {
              "name": "content-top",
              "description": "A slot for adding non-actionable elements above the component's content.  Content slotted here will render in place of the `icon` property."
            },
            {
              "name": "content-bottom",
              "description": "A slot for adding non-actionable elements below the component's content."
            },
            {
              "name": "content-start",
              "description": "[Deprecated] use `content-top` slot instead.  A slot for adding non-actionable elements before the component's content."
            },
            {
              "name": "content-end",
              "description": "[Deprecated] use `content-bottom` slot instead. A slot for adding non-actionable elements after the component's content."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-tile-accent-color-press",
              "description": "When the parent `calcite-tile-group` has a `selectionMode` that is not `\"none\"`, specifies the color of the component's selection elements, such as the radio, checkbox, and border."
            },
            {
              "name": "--calcite-tile-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-tile-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-tile-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-tile-heading-text-color",
              "description": "Specifies the component's `heading` text color."
            },
            {
              "name": "--calcite-tile-link-color",
              "description": "When `href` is present, specifies the component's link color."
            },
            {
              "name": "--calcite-tile-shadow",
              "description": "Specifies the shadow around the component."
            },
            {
              "name": "--calcite-tile-text-color",
              "description": "Specifies the component's `description` and `icon` text color, but not the `heading` text color."
            },
            {
              "name": "--calcite-tile-link-text-color",
              "description": "Specifies the component's link text color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tile",
          "declaration": {
            "name": "Tile",
            "module": "src/components/tile/tile.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile-group/tile-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TileGroup",
          "tagName": "calcite-tile-group",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTileGroup",
          "importPath": "components/calcite-tile-group",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "description": "Specifies the alignment of each `calcite-tile`'s content.",
              "type": {
                "text": "\"center\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "alignment",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tileGroup = document.querySelector(\"calcite-tile-group\");\ndocument.body.append(tileGroup);\nawait tileGroup.componentOnReady();\nconsole.log(\"calcite-tile-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label",
              "docsTags": [
                {
                  "name": "required"
                }
              ]
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Defines the layout of the component.\n\nUse `\"horizontal\"` for rows, and `\"vertical\"` for a single column.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "attribute": "layout",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "description": "Specifies the component's selected items.",
              "type": {
                "text": "Array<HTMLCalciteTileElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteTileElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 28
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "selectionAppearance",
              "description": "Specifies the selection appearance, where:\n\n- `\"icon\"` (displays a checkmark or dot), or\n- `\"border\"` (displays a border).",
              "type": {
                "text": "\"border\" | \"icon\"",
                "values": [
                  {
                    "value": "border",
                    "type": "string"
                  },
                  {
                    "value": "icon",
                    "type": "string"
                  }
                ]
              },
              "default": "\"icon\"",
              "attribute": "selection-appearance",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "description": "Specifies the selection mode, where:\n\n- `\"multiple\"` (allows any number of selected items),\n- `\"single\"` (allows only one selected item),\n- `\"single-persist\"` (allows only one selected item and prevents de-selection),\n- `\"none\"` (allows no selected items).",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "attribute": "selection-mode",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "alignment",
              "description": "Specifies the alignment of each `calcite-tile`'s content.",
              "type": {
                "text": "\"center\" | \"start\"",
                "values": [
                  {
                    "value": "center",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "alignment"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "layout",
              "description": "Defines the layout of the component.\n\nUse `\"horizontal\"` for rows, and `\"vertical\"` for a single column.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "fieldName": "layout"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selection-appearance",
              "description": "Specifies the selection appearance, where:\n\n- `\"icon\"` (displays a checkmark or dot), or\n- `\"border\"` (displays a border).",
              "type": {
                "text": "\"border\" | \"icon\"",
                "values": [
                  {
                    "value": "border",
                    "type": "string"
                  },
                  {
                    "value": "icon",
                    "type": "string"
                  }
                ]
              },
              "default": "\"icon\"",
              "fieldName": "selectionAppearance"
            },
            {
              "name": "selection-mode",
              "description": "Specifies the selection mode, where:\n\n- `\"multiple\"` (allows any number of selected items),\n- `\"single\"` (allows only one selected item),\n- `\"single-persist\"` (allows only one selected item and prevents de-selection),\n- `\"none\"` (allows no selected items).",
              "type": {
                "text": "\"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"none\"",
              "fieldName": "selectionMode"
            }
          ],
          "events": [
            {
              "name": "calciteTileGroupSelect",
              "description": "Fires when the component's selection changes.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-tile` elements."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tile-group",
          "declaration": {
            "name": "TileGroup",
            "module": "src/components/tile-group/tile-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile-select/tile-select.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TileSelect",
          "tagName": "calcite-tile-select",
          "deprecated": "Use the `calcite-tile` component instead.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTileSelect",
          "importPath": "components/calcite-tile-select",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "description": "When `true`, the component is checked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tileSelect = document.querySelector(\"calcite-tile-select\");\ndocument.body.append(tileSelect);\nawait tileSelect.componentOnReady();\nconsole.log(\"calcite-tile-select is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "description",
              "description": "A description for the component, which displays below the heading.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "description",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "The component header text, which displays between the icon and description.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inputAlignment",
              "description": "When `inputEnabled` is `true`, specifies the placement of the interactive input on the component.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "attribute": "input-alignment",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inputEnabled",
              "description": "When `true`, displays an interactive input based on the `type` property.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "input-enabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Specifies the name of the component on form submission.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Specifies the selection mode of the component, where:\n\n`\"radio\"` is for single selection, and\n\n`\"checkbox\"` is for multiple selections.",
              "type": {
                "text": "\"checkbox\" | \"radio\"",
                "values": [
                  {
                    "value": "checkbox",
                    "type": "string"
                  },
                  {
                    "value": "radio",
                    "type": "string"
                  }
                ]
              },
              "default": "\"radio\"",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"auto\" | \"full\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "width",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "checked",
              "description": "When `true`, the component is checked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "description",
              "description": "A description for the component, which displays below the heading.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "description"
            },
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "heading",
              "description": "The component header text, which displays between the icon and description.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "icon",
              "description": "Specifies an icon to display.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "input-alignment",
              "description": "When `inputEnabled` is `true`, specifies the placement of the interactive input on the component.",
              "type": {
                "text": "\"end\" | \"start\"",
                "values": [
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"start\"",
              "fieldName": "inputAlignment"
            },
            {
              "name": "input-enabled",
              "description": "When `true`, displays an interactive input based on the `type` property.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "inputEnabled"
            },
            {
              "name": "name",
              "description": "Specifies the name of the component on form submission.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "name"
            },
            {
              "name": "type",
              "description": "Specifies the selection mode of the component, where:\n\n`\"radio\"` is for single selection, and\n\n`\"checkbox\"` is for multiple selections.",
              "type": {
                "text": "\"checkbox\" | \"radio\"",
                "values": [
                  {
                    "value": "checkbox",
                    "type": "string"
                  },
                  {
                    "value": "radio",
                    "type": "string"
                  }
                ]
              },
              "default": "\"radio\"",
              "fieldName": "type"
            },
            {
              "name": "value",
              "description": "The component's value.",
              "type": {
                "text": "any",
                "values": [
                  {
                    "type": "any"
                  }
                ]
              },
              "fieldName": "value"
            },
            {
              "name": "width",
              "description": "Specifies the width of the component.",
              "type": {
                "text": "\"auto\" | \"full\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "full",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "width"
            }
          ],
          "events": [
            {
              "name": "calciteTileSelectChange",
              "description": "Emits a custom change event.\n\nFor checkboxes it emits when checked or unchecked.\n\nFor radios it only emits when checked.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding custom content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tile-select",
          "declaration": {
            "name": "TileSelect",
            "module": "src/components/tile-select/tile-select.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tile-select-group/tile-select-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TileSelectGroup",
          "tagName": "calcite-tile-select-group",
          "deprecated": "Use the `calcite-tile-group` component instead.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTileSelectGroup",
          "importPath": "components/calcite-tile-select-group",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tileSelectGroup = document.querySelector(\"calcite-tile-select-group\");\ndocument.body.append(tileSelectGroup);\nawait tileSelectGroup.componentOnReady();\nconsole.log(\"calcite-tile-select-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "layout",
              "description": "Defines the layout of the component.\n\nUse `\"horizontal\"` for rows, and `\"vertical\"` for a single column.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "attribute": "layout",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "layout",
              "description": "Defines the layout of the component.\n\nUse `\"horizontal\"` for rows, and `\"vertical\"` for a single column.",
              "type": {
                "text": "\"horizontal\" | \"vertical\"",
                "values": [
                  {
                    "value": "horizontal",
                    "type": "string"
                  },
                  {
                    "value": "vertical",
                    "type": "string"
                  }
                ]
              },
              "default": "\"horizontal\"",
              "fieldName": "layout"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-tile-select` elements."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tile-select-group",
          "declaration": {
            "name": "TileSelectGroup",
            "module": "src/components/tile-select-group/tile-select-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/time-picker/time-picker.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TimePicker",
          "tagName": "calcite-time-picker",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTimePicker",
          "importPath": "components/calcite-time-picker",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst timePicker = document.querySelector(\"calcite-time-picker\");\ndocument.body.append(timePicker);\nawait timePicker.componentOnReady();\nconsole.log(\"calcite-time-picker is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "hourFormat",
              "description": "Specifies the component's hour format, where:\n\n`\"user\"` displays the user's locale format,\n`\"12\"` displays a 12-hour format, and\n`\"24\"` displays a 24-hour format.",
              "type": {
                "text": "\"12\" | \"24\" | \"user\"",
                "values": [
                  {
                    "value": "12",
                    "type": "string"
                  },
                  {
                    "value": "24",
                    "type": "string"
                  },
                  {
                    "value": "user",
                    "type": "string"
                  }
                ]
              },
              "default": "\"user\"",
              "attribute": "hour-format",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "numberingSystem",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "attribute": "numbering-system"
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "setFocus",
              "description": "Sets focus on the component's first focusable element.",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions",
                    "references": [
                      {
                        "name": "FocusOptions",
                        "package": "typescript",
                        "module": "lib/lib.dom.d.ts",
                        "start": 0,
                        "end": 12
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "options - When specified an optional object customizes the component's focusing process. When `preventScroll` is `true`, scrolling will not occur on the component."
                },
                {
                  "name": "mdn",
                  "text": "[focus(options)](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#options)"
                }
              ],
              "signature": "(options?: FocusOptions): Promise<void>",
              "async": true
            },
            {
              "kind": "field",
              "name": "step",
              "description": "Specifies the granularity the `value` must adhere to (in seconds).",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "60",
              "attribute": "step",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "time",
              "type": {
                "text": "TimeController",
                "references": [
                  {
                    "name": "TimeController",
                    "module": "docs/controllers/useTime.d.ts",
                    "start": 0,
                    "end": 14
                  }
                ]
              },
              "docsTags": [
                {
                  "name": "internal"
                }
              ]
            },
            {
              "kind": "field",
              "name": "value",
              "description": "The component's value in UTC (always 24-hour format).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "value"
            }
          ],
          "attributes": [
            {
              "name": "hour-format",
              "description": "Specifies the component's hour format, where:\n\n`\"user\"` displays the user's locale format,\n`\"12\"` displays a 12-hour format, and\n`\"24\"` displays a 24-hour format.",
              "type": {
                "text": "\"12\" | \"24\" | \"user\"",
                "values": [
                  {
                    "value": "12",
                    "type": "string"
                  },
                  {
                    "value": "24",
                    "type": "string"
                  },
                  {
                    "value": "user",
                    "type": "string"
                  }
                ]
              },
              "default": "\"user\"",
              "fieldName": "hourFormat"
            },
            {
              "name": "numbering-system",
              "description": "Specifies the Unicode numeral system used by the component for localization.",
              "type": {
                "text": "\"arab\" | \"arabext\" | \"latn\"",
                "values": [
                  {
                    "value": "arab",
                    "type": "string"
                  },
                  {
                    "value": "arabext",
                    "type": "string"
                  },
                  {
                    "value": "latn",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "numberingSystem"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "step",
              "description": "Specifies the granularity the `value` must adhere to (in seconds).",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "60",
              "fieldName": "step"
            },
            {
              "name": "value",
              "description": "The component's value in UTC (always 24-hour format).",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "value"
            }
          ],
          "events": [
            {
              "name": "calciteTimePickerChange",
              "description": "Fires when a user changes the component's time",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-time-picker-background-color",
              "description": "Specifies the background color of the time picker."
            },
            {
              "name": "--calcite-time-picker-border-color",
              "description": "Specifies the border color of the time picker."
            },
            {
              "name": "--calcite-time-picker-corner-radius",
              "description": "Specifies the border radius of the time picker."
            },
            {
              "name": "--calcite-time-picker-button-background-color-hover",
              "description": "Specifies the button's background color when hovered or focused."
            },
            {
              "name": "--calcite-time-picker-button-background-color-press",
              "description": "Specifies the button's background color when active."
            },
            {
              "name": "--calcite-time-picker-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-time-picker-icon-color",
              "description": "Specifies the component's icon color."
            },
            {
              "name": "--calcite-time-picker-input-border-color-press",
              "description": "Specifies the input's border color when active."
            },
            {
              "name": "--calcite-time-picker-input-border-color-hover",
              "description": "Specifies the input's border color when hovered."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-time-picker",
          "declaration": {
            "name": "TimePicker",
            "module": "src/components/time-picker/time-picker.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tip/tip.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Tip",
          "tagName": "calcite-tip",
          "deprecated": "Use the `calcite-card`, `calcite-notice`, `calcite-panel`, or `calcite-tile` component instead.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTip",
          "importPath": "components/calcite-tip",
          "members": [
            {
              "kind": "field",
              "name": "closed",
              "description": "When `true`, the component does not display.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closed",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closeDisabled",
              "description": "When `true`, the close button is not present on the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "close-disabled",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tip = document.querySelector(\"calcite-tip\");\ndocument.body.append(tip);\nawait tip.componentOnReady();\nconsole.log(\"calcite-tip is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "heading"
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected if it has a parent `calcite-tip-manager`.\n\nOnly one tip can be selected within the `calcite-tip-manager` parent.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "close-disabled",
              "description": "When `true`, the close button is not present on the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closeDisabled"
            },
            {
              "name": "closed",
              "description": "When `true`, the component does not display.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closed"
            },
            {
              "name": "heading",
              "description": "The component header text.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "heading"
            },
            {
              "name": "heading-level",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected if it has a parent `calcite-tip-manager`.\n\nOnly one tip can be selected within the `calcite-tip-manager` parent.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            }
          ],
          "events": [
            {
              "name": "calciteTipDismiss",
              "description": "Emits when the component has been closed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding text and a hyperlink."
            },
            {
              "name": "thumbnail",
              "description": "A slot for adding an HTML image element."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tip",
          "declaration": {
            "name": "Tip",
            "module": "src/components/tip/tip.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tip-group/tip-group.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TipGroup",
          "tagName": "calcite-tip-group",
          "deprecated": "Use the `calcite-carousel` and `calcite-carousel-item` components instead.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTipGroup",
          "importPath": "components/calcite-tip-group",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tipGroup = document.querySelector(\"calcite-tip-group\");\ndocument.body.append(tipGroup);\nawait tipGroup.componentOnReady();\nconsole.log(\"calcite-tip-group is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "groupTitle",
              "description": "The component header text for all nested `calcite-tip`s.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "group-title"
            }
          ],
          "attributes": [
            {
              "name": "group-title",
              "description": "The component header text for all nested `calcite-tip`s.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "groupTitle"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-tip`s."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tip-group",
          "declaration": {
            "name": "TipGroup",
            "module": "src/components/tip-group/tip-group.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tip-manager/tip-manager.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TipManager",
          "tagName": "calcite-tip-manager",
          "deprecated": "Use the `calcite-carousel` and `calcite-carousel-item` components instead.",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTipManager",
          "importPath": "components/calcite-tip-manager",
          "members": [
            {
              "kind": "field",
              "name": "closed",
              "description": "When `true`, does not display or position the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "closed",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tipManager = document.querySelector(\"calcite-tip-manager\");\ndocument.body.append(tipManager);\nawait tipManager.componentOnReady();\nconsole.log(\"calcite-tip-manager is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "headingLevel",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "attribute": "heading-level",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "messageOverrides",
              "description": "Use this property to override individual strings used by the component.",
              "type": {
                "text": "Record<string, unknown>"
              }
            },
            {
              "kind": "method",
              "name": "nextTip",
              "description": "Selects the next `calcite-tip` to display.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            },
            {
              "kind": "method",
              "name": "previousTip",
              "description": "Selects the previous `calcite-tip` to display.",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "signature": "(): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "closed",
              "description": "When `true`, does not display or position the component.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closed"
            },
            {
              "name": "heading-level",
              "description": "Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6",
                "values": [
                  {
                    "value": "1",
                    "type": "number"
                  },
                  {
                    "value": "2",
                    "type": "number"
                  },
                  {
                    "value": "3",
                    "type": "number"
                  },
                  {
                    "value": "4",
                    "type": "number"
                  },
                  {
                    "value": "5",
                    "type": "number"
                  },
                  {
                    "value": "6",
                    "type": "number"
                  }
                ]
              },
              "fieldName": "headingLevel"
            }
          ],
          "events": [
            {
              "name": "calciteTipManagerClose",
              "description": "Emits when the component has been closed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding `calcite-tip`s."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-tip-manager-height",
              "description": "The maximum height of the component."
            },
            {
              "name": "--calcite-tip-max-width",
              "description": "The maximum width of a slotted `calcite-tip` within the component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tip-manager",
          "declaration": {
            "name": "TipManager",
            "module": "src/components/tip-manager/tip-manager.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tooltip/tooltip.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Tooltip",
          "tagName": "calcite-tooltip",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTooltip",
          "importPath": "components/calcite-tooltip",
          "members": [
            {
              "kind": "field",
              "name": "closeOnClick",
              "description": "Closes the component when the `referenceElement` is clicked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "close-on-click",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tooltip = document.querySelector(\"calcite-tooltip\");\ndocument.body.append(tooltip);\nawait tooltip.componentOnReady();\nconsole.log(\"calcite-tooltip is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "deprecated": "No longer necessary. Overrides the context of the component's description, which could confuse assistive technology users.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "offsetDistance",
              "description": "Offset the position of the component away from the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "6",
              "attribute": "offset-distance",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "offsetSkidding",
              "description": "Offset the position of the component along the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "attribute": "offset-skidding",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When `true`, the component is open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "overlayPositioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\nThe `\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "attribute": "overlay-positioning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the `referenceElement`.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "attribute": "placement",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "referenceElement",
              "description": "The `referenceElement` to position the component according to its `\"placement\"` value.\n\nSetting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.\n\nHowever, a string ID of the reference element can be used.\n\nThe component should not be placed within its own `referenceElement` to avoid unintended behavior.",
              "type": {
                "text": "Element | VirtualElement | string",
                "references": [
                  {
                    "name": "Element",
                    "package": "typescript",
                    "module": "lib/lib.dom.d.ts",
                    "viewUrl": "https://developer.mozilla.org/docs/Web/API/Element",
                    "start": 0,
                    "end": 7
                  },
                  {
                    "name": "VirtualElement",
                    "package": "@floating-ui/dom",
                    "module": "dist/floating-ui.dom.d.mts",
                    "start": 10,
                    "end": 24
                  }
                ],
                "values": [
                  {
                    "type": "Element"
                  },
                  {
                    "type": "VirtualElement"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "reference-element"
            },
            {
              "kind": "method",
              "name": "reposition",
              "description": "Updates the position of the component.",
              "parameters": [
                {
                  "name": "delayed",
                  "default": "false",
                  "type": {
                    "text": "boolean",
                    "values": [
                      {
                        "type": "boolean"
                      }
                    ]
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "name": "Promise",
                      "package": "typescript",
                      "module": "lib/lib.es5.d.ts",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "docsTags": [
                {
                  "name": "param",
                  "text": "delayed"
                }
              ],
              "signature": "(delayed?: boolean): Promise<void>",
              "async": true
            }
          ],
          "attributes": [
            {
              "name": "close-on-click",
              "description": "Closes the component when the `referenceElement` is clicked.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "closeOnClick"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label",
              "deprecated": "No longer necessary. Overrides the context of the component's description, which could confuse assistive technology users."
            },
            {
              "name": "offset-distance",
              "description": "Offset the position of the component away from the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "6",
              "fieldName": "offsetDistance"
            },
            {
              "name": "offset-skidding",
              "description": "Offset the position of the component along the `referenceElement`.",
              "type": {
                "text": "number",
                "values": [
                  {
                    "type": "number"
                  }
                ]
              },
              "default": "0",
              "fieldName": "offsetSkidding"
            },
            {
              "name": "open",
              "description": "When `true`, the component is open.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "overlay-positioning",
              "description": "Determines the type of positioning to use for the overlaid content.\n\nUsing `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n\nThe `\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.",
              "type": {
                "text": "\"absolute\" | \"fixed\"",
                "values": [
                  {
                    "value": "absolute",
                    "type": "string"
                  },
                  {
                    "value": "fixed",
                    "type": "string"
                  }
                ]
              },
              "default": "\"absolute\"",
              "fieldName": "overlayPositioning"
            },
            {
              "name": "placement",
              "description": "Determines where the component will be positioned relative to the `referenceElement`.",
              "type": {
                "text": "\"auto\" | \"auto-end\" | \"auto-start\" | \"bottom\" | \"bottom-end\" | \"bottom-start\" | \"leading\" | \"leading-end\" | \"leading-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\" | \"trailing\" | \"trailing-end\" | \"trailing-start\"",
                "values": [
                  {
                    "value": "auto",
                    "type": "string"
                  },
                  {
                    "value": "auto-end",
                    "type": "string"
                  },
                  {
                    "value": "auto-start",
                    "type": "string"
                  },
                  {
                    "value": "bottom",
                    "type": "string"
                  },
                  {
                    "value": "bottom-end",
                    "type": "string"
                  },
                  {
                    "value": "bottom-start",
                    "type": "string"
                  },
                  {
                    "value": "leading",
                    "type": "string"
                  },
                  {
                    "value": "leading-end",
                    "type": "string"
                  },
                  {
                    "value": "leading-start",
                    "type": "string"
                  },
                  {
                    "value": "left",
                    "type": "string"
                  },
                  {
                    "value": "left-end",
                    "type": "string"
                  },
                  {
                    "value": "left-start",
                    "type": "string"
                  },
                  {
                    "value": "right",
                    "type": "string"
                  },
                  {
                    "value": "right-end",
                    "type": "string"
                  },
                  {
                    "value": "right-start",
                    "type": "string"
                  },
                  {
                    "value": "top",
                    "type": "string"
                  },
                  {
                    "value": "top-end",
                    "type": "string"
                  },
                  {
                    "value": "top-start",
                    "type": "string"
                  },
                  {
                    "value": "trailing",
                    "type": "string"
                  },
                  {
                    "value": "trailing-end",
                    "type": "string"
                  },
                  {
                    "value": "trailing-start",
                    "type": "string"
                  }
                ]
              },
              "default": "\"auto\"",
              "fieldName": "placement"
            },
            {
              "name": "reference-element",
              "description": "The `referenceElement` to position the component according to its `\"placement\"` value.\n\nSetting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.\n\nHowever, a string ID of the reference element can be used.\n\nThe component should not be placed within its own `referenceElement` to avoid unintended behavior.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "referenceElement"
            }
          ],
          "events": [
            {
              "name": "calciteTooltipBeforeClose",
              "description": "Fires when the component is requested to be closed and before the closing transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteTooltipBeforeOpen",
              "description": "Fires when the component is added to the DOM but not rendered, and before the opening transition begins.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteTooltipClose",
              "description": "Fires when the component is closed and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteTooltipOpen",
              "description": "Fires when the component is open and animation is complete.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding text."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-tooltip-background-color",
              "description": "Specifies the component's background color."
            },
            {
              "name": "--calcite-tooltip-border-color",
              "description": "Specifies the component's border color."
            },
            {
              "name": "--calcite-tooltip-corner-radius",
              "description": "Specifies the component's corner radius."
            },
            {
              "name": "--calcite-tooltip-max-size-x",
              "description": "Specifies the component's maximum width."
            },
            {
              "name": "--calcite-tooltip-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-tooltip-z-index",
              "description": "Specifies the z-index value for the component."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tooltip",
          "declaration": {
            "name": "Tooltip",
            "module": "src/components/tooltip/tooltip.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree/tree.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "Tree",
          "tagName": "calcite-tree",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTree",
          "importPath": "components/calcite-tree",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst tree = document.querySelector(\"calcite-tree\");\ndocument.body.append(tree);\nawait tree.componentOnReady();\nconsole.log(\"calcite-tree is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "lines",
              "description": "When `true`, displays indentation guide lines.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "lines",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "attribute": "scale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "description": "Specifies the component's selected items.",
              "type": {
                "text": "Array<HTMLCalciteTreeItemElement>",
                "references": [
                  {
                    "name": "Array",
                    "package": "typescript",
                    "module": "lib/lib.es5.d.ts",
                    "start": 0,
                    "end": 5
                  },
                  {
                    "name": "HTMLCalciteTreeItemElement",
                    "module": "index.js",
                    "start": 6,
                    "end": 32
                  }
                ]
              },
              "readonly": true,
              "docsOnlyReadonly": true
            },
            {
              "kind": "field",
              "name": "selectionMode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"ancestors\"` displays with a checkbox and allows any number of selections from corresponding parent and child selections,\n\n`\"children\"` allows any number of selections from one parent from corresponding parent and child selections,\n\n`\"multichildren\"` allows any number of selections from corresponding parent and child selections,\n\n`\"multiple\"` allows any number of selections,\n\n`\"none\"` allows no selections,\n\n`\"single\"` allows one selection, and\n\n`\"single-persist\"` allows and requires one selection.",
              "type": {
                "text": "\"ancestors\" | \"children\" | \"multichildren\" | \"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "ancestors",
                    "type": "string"
                  },
                  {
                    "value": "children",
                    "type": "string"
                  },
                  {
                    "value": "multichildren",
                    "type": "string"
                  },
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"single\"",
              "attribute": "selection-mode",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "lines",
              "description": "When `true`, displays indentation guide lines.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "lines"
            },
            {
              "name": "scale",
              "description": "Specifies the size of the component.",
              "type": {
                "text": "\"l\" | \"m\" | \"s\"",
                "values": [
                  {
                    "value": "l",
                    "type": "string"
                  },
                  {
                    "value": "m",
                    "type": "string"
                  },
                  {
                    "value": "s",
                    "type": "string"
                  }
                ]
              },
              "default": "\"m\"",
              "fieldName": "scale"
            },
            {
              "name": "selection-mode",
              "description": "Specifies the selection mode of the component, where:\n\n`\"ancestors\"` displays with a checkbox and allows any number of selections from corresponding parent and child selections,\n\n`\"children\"` allows any number of selections from one parent from corresponding parent and child selections,\n\n`\"multichildren\"` allows any number of selections from corresponding parent and child selections,\n\n`\"multiple\"` allows any number of selections,\n\n`\"none\"` allows no selections,\n\n`\"single\"` allows one selection, and\n\n`\"single-persist\"` allows and requires one selection.",
              "type": {
                "text": "\"ancestors\" | \"children\" | \"multichildren\" | \"multiple\" | \"none\" | \"single\" | \"single-persist\"",
                "values": [
                  {
                    "value": "ancestors",
                    "type": "string"
                  },
                  {
                    "value": "children",
                    "type": "string"
                  },
                  {
                    "value": "multichildren",
                    "type": "string"
                  },
                  {
                    "value": "multiple",
                    "type": "string"
                  },
                  {
                    "value": "none",
                    "type": "string"
                  },
                  {
                    "value": "single",
                    "type": "string"
                  },
                  {
                    "value": "single-persist",
                    "type": "string"
                  }
                ]
              },
              "default": "\"single\"",
              "fieldName": "selectionMode"
            }
          ],
          "events": [
            {
              "name": "calciteTreeSelect",
              "description": "Fires when the user selects/deselects `calcite-tree-items`.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for `calcite-tree-item` elements."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tree",
          "declaration": {
            "name": "Tree",
            "module": "src/components/tree/tree.tsx"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/tree-item/tree-item.tsx",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "name": "TreeItem",
          "tagName": "calcite-tree-item",
          "superclass": {
            "name": "LitElement",
            "package": "@arcgis/lumina"
          },
          "pascalCaseName": "CalciteTreeItem",
          "importPath": "components/calcite-tree-item",
          "members": [
            {
              "kind": "method",
              "name": "componentOnReady",
              "return": {
                "type": {
                  "text": "Promise<void>",
                  "references": [
                    {
                      "module": "lib/lib.es5.d.ts",
                      "name": "Promise",
                      "package": "typescript",
                      "start": 0,
                      "end": 7
                    }
                  ]
                }
              },
              "description": "Create a promise that resolves once component is fully loaded.",
              "signature": "(): Promise<void>",
              "async": true,
              "inheritedFrom": {
                "name": "LitElement",
                "package": "@arcgis/lumina"
              },
              "docsTags": [
                {
                  "name": "example",
                  "text": "```js\nconst treeItem = document.querySelector(\"calcite-tree-item\");\ndocument.body.append(treeItem);\nawait treeItem.componentOnReady();\nconsole.log(\"calcite-tree-item is ready to go!\");\n```"
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconFlipRtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "attribute": "icon-flip-rtl",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconStart",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "attribute": "icon-start",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "description": "When `true`, interaction is prevented and the component is displayed with lower opacity.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "expanded",
              "description": "When `true`, expands the component and its contents.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "icon-flip-rtl",
              "description": "When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).",
              "type": {
                "text": "\"both\" | \"end\" | \"start\"",
                "values": [
                  {
                    "value": "both",
                    "type": "string"
                  },
                  {
                    "value": "end",
                    "type": "string"
                  },
                  {
                    "value": "start",
                    "type": "string"
                  }
                ]
              },
              "fieldName": "iconFlipRtl"
            },
            {
              "name": "icon-start",
              "description": "Specifies an icon to display at the start of the component.",
              "type": {
                "text": "IconName",
                "references": [
                  {
                    "name": "IconName",
                    "module": "docs/components/icon/interfaces.d.ts",
                    "start": 0,
                    "end": 8
                  }
                ]
              },
              "fieldName": "iconStart"
            },
            {
              "name": "label",
              "description": "Accessible name for the component.",
              "type": {
                "text": "string",
                "values": [
                  {
                    "type": "string"
                  }
                ]
              },
              "fieldName": "label"
            },
            {
              "name": "selected",
              "description": "When `true`, the component is selected.",
              "type": {
                "text": "boolean",
                "values": [
                  {
                    "type": "boolean"
                  }
                ]
              },
              "default": "false",
              "fieldName": "selected"
            }
          ],
          "events": [
            {
              "name": "calciteTreeItemCollapse",
              "description": "Fires when the component's content area is collapsed.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteTreeItemExpand",
              "description": "Fires when the component's content area is expanded.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            },
            {
              "name": "calciteTreeItemSelect",
              "description": "Fires when the component is selected or deselected.",
              "type": {
                "text": "void"
              },
              "cancelable": false
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "A slot for adding text."
            },
            {
              "name": "children",
              "description": "A slot for adding nested `calcite-tree` elements."
            },
            {
              "name": "actions-end",
              "description": "A slot for adding actions to the end of the component. It is recommended to use two or fewer actions."
            }
          ],
          "cssProperties": [
            {
              "name": "--calcite-tree-text-color",
              "description": "Specifies the component's text color."
            },
            {
              "name": "--calcite-tree-text-color-selected",
              "description": "Specifies the component's text color when selected."
            },
            {
              "name": "--calcite-tree-selected-icon-color",
              "description": "Specifies the component's selection icon color."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "calcite-tree-item",
          "declaration": {
            "name": "TreeItem",
            "module": "src/components/tree-item/tree-item.tsx"
          }
        }
      ]
    }
  ]
}