/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-tab-icon-color-end: Specifies the component's `iconEnd` color. Fallback to `--calcite-icon-color`.
 * @prop --calcite-tab-icon-color-start: Specifies the component's `iconStart` color. Fallback to `--calcite-icon-color`.
 */

:host {
  @apply block outline-none;
  margin-inline-start: theme("margin.0");
}

:host([layout="inline"]) {
  @apply flex-initial;
}

:host([layout="center"]) {
  @apply flex-auto;
}

.content {
  @apply flex items-center justify-center h-full mb-0.5 relative box-border;
}

.scale-s {
  .content {
    @apply text-n2h py-1;
  }
  .close-button {
    @apply w-5;
  }
}

.scale-m {
  .content {
    @apply text-n1h py-2;
  }
  .close-button {
    @apply w-7;
  }
}

.scale-l {
  .content {
    @apply text-0h py-2.5;
  }
  .close-button {
    @apply w-8;
  }
}

:host([closable]) .content {
  @apply border-b-color-transparent;
}

:host([layout="inline"]),
:host([layout="center"]) {
  .content {
    @apply px-1;
  }
}

:host([layout="center"]) .scale-s,
:host([layout="center"]) .scale-m,
:host([layout="center"]) .scale-l {
  @apply justify-center my-0 text-center;

  .content {
    @apply flex-auto flex-grow;
  }
}

.container {
  @apply relative
  box-border
  content-center
  cursor-pointer
  flex
  focus-base
  h-full
  justify-between
  px-0
  text-color-3
  text-n1h
  transition-default
  w-full;
}

.selected-indicator {
  @apply absolute
    block
    w-full
    h-0.5
    transition-default;
  inset-block-end: 0;
  inset-inline-start: 0;
  inset-inline-end: 0;
  inline-size: 100%;
}

.container--bottom .selected-indicator {
  inset-block-end: unset;
  inset-block-start: 0;
}

:host([bordered]) .selected-indicator {
  inset-block-start: 0;
  inset-block-end: unset;
  inset-inline-start: -1px;
  inset-inline-end: 0;
  inline-size: calc(100% + var(--calcite-spacing-base));
}

:host([bordered]) .container:not(.container--bottom) {
  border-block-end: 1px solid transparent;
}

:host([bordered]:not([selected]):hover) .container:not(.container--bottom) {
  border-block-end: 1px solid var(--calcite-color-border-1);
}

:host([bordered]:not([selected]):hover:not(:focus)) {
  .selected-indicator {
    background-color: var(--calcite-color-foreground-2);
  }
  .container:not(.container--bottom) .selected-indicator {
    box-shadow: inset 0 1px var(--calcite-color-border-1);
  }
  .container.container--bottom .selected-indicator {
    box-shadow: inset 0 -1px var(--calcite-color-border-1);
  }
}

:host([bordered][selected]) .container::after {
  @apply absolute
    block
    w-full
    h-0.5
    transition-default;
  inset-block-end: -1px;
  inset-inline-start: 0;
  inset-inline-end: 0;
  inline-size: 100%;
  background: var(--calcite-color-foreground-1);
  content: "";
}

:host([bordered][selected]) .container.container--bottom::after {
  inset-block-start: -1px;
}

:host([bordered][selected]:hover) .container::after {
  background: var(--calcite-color-foreground-2);
}

:host([bordered][selected]:focus) .container::after {
  background: transparent;
}

:host([bordered]) .container--bottom .selected-indicator {
  inset-block-start: unset;
  inset-block-end: 0;
}

:host([selected]) .selected-indicator,
:host([selected]:hover) .selected-indicator {
  @apply bg-brand;
}

:host(:hover) .selected-indicator {
  background-color: var(--calcite-color-border-3);
}

:host(:focus) .selected-indicator,
:host(:active) .selected-indicator {
  background-color: var(--calcite-color-brand);
}

@media (forced-colors: active) {
  .selected-indicator {
    background-color: highlight;
  }
}

:host([closed]) {
  @apply hidden;
}

:host([selected]) .container {
  @apply text-color-1 border-color-transparent;
}

:host(:focus) .container {
  @apply focus-inset;

  &:focus-within {
    @apply focus-base;
  }
}

:host(:active),
:host(:focus),
:host(:hover) {
  a {
    @apply text-color-1 border-color-2 no-underline;
  }
}

@include disabled() {
  .container {
    @apply pointer-events-none opacity-50;
  }
}

.calcite-tab-title--icon {
  @apply relative
    m-0
    inline-flex
    self-center;
  & svg {
    @apply transition-default;
  }
}

.content--has-text {
  @apply p-1;
}

.content--has-text .calcite-tab-title--icon.icon-start {
  margin-inline-end: var(--calcite-spacing-sm);
  color: var(--calcite-tab-icon-color-start, var(--calcite-icon-color));
}

.content--has-text .calcite-tab-title--icon.icon-end {
  margin-inline-start: var(--calcite-spacing-sm);
  color: var(--calcite-tab-icon-color-end, var(--calcite-icon-color));
}

.close-button {
  @apply appearance-none
  bg-transparent
  border-none
  content-center
  cursor-pointer
  flex
  focus-base
  items-center
  justify-center
  h-full
  self-center
  text-color-3
  transition-default;
  margin-inline-start: var(--calcite-spacing-sm);
  margin-inline-end: var(--calcite-spacing-px);
  block-size: calc(100% - var(--calcite-spacing-xxs));

  &:focus {
    @apply focus-normal;
  }

  &:focus,
  &:hover {
    @apply text-color-1;
    background-color: var(--calcite-color-foreground-3);
  }

  &:active {
    @apply text-color-1;
    background-color: var(--calcite-color-foreground-3);
  }

  & calcite-icon {
    color: inherit;
  }
}

// compensate for spacing when no hastext and two icons
:host([icon-start][icon-end]) {
  .calcite-tab-title--icon:first-child {
    margin-inline-end: var(--calcite-spacing-sm);
  }
}

// bordered styles
:host([bordered]) .container {
  &:not(.container--bottom) .close-button {
    block-size: calc(100% - var(--calcite-spacing-px));
    margin-block-start: -1px;
  }
  .close-button {
    & calcite-icon {
      margin-block-start: var(--calcite-spacing-px);
    }

    &:focus,
    &:hover,
    &:active {
      box-shadow: 0 2px 0 0 var(--calcite-color-foreground-3);
    }
  }

  &.container--bottom .close-button {
    box-shadow: 0 -2px 0 0 transparent;
    & calcite-icon {
      margin-block-end: var(--calcite-spacing-px);
    }
    &:focus,
    &:hover,
    &:active {
      box-shadow: 0 -2px 0 0 var(--calcite-color-foreground-3);
    }
  }
}

:host([bordered][selected]) {
  box-shadow: inset 0 -1px var(--calcite-color-foreground-1);
}

:host([bordered]:not([selected])) .container .close-button {
  box-shadow: 0 2px 0 0 transparent;
}

:host([bordered]:hover) {
  .container {
    background-color: var(--calcite-color-foreground-2);
  }
}

:host([bordered]) .container {
  border-inline: var(--calcite-spacing-px) solid transparent;
}

:host([selected][bordered]) .container {
  border-inline-color: var(--calcite-color-border-1);
}

:host([layout="inline"][bordered]),
:host([layout="center"][bordered]) {
  .scale-m {
    .content {
      @apply px-3;
    }
  }

  .scale-s {
    .content {
      @apply px-2;
    }
  }

  .scale-l {
    .content {
      @apply px-4;
    }
  }
}

:host([layout="inline"][closable]) {
  .scale-s,
  .scale-m,
  .scale-l {
    .content {
      padding-inline-end: 0;
    }
  }
}

@media (forced-colors: active) {
  :host {
    outline-width: 0;
    outline-offset: 0;
  }

  :host(:focus) .container {
    outline-color: highlight;
  }

  :host([bordered]) .container {
    border-block-end-style: solid;
  }

  :host([bordered]) .container--bottom {
    border-block-start-style: solid;
  }

  :host([bordered][selected]) .container {
    border-block-end-style: none;
  }

  :host([bordered][selected]) .container--bottom {
    border-block-start-style: none;
  }

  .close-button {
    /* in high contrast the tab title outline covers the close button outline without a z-index */
    @apply z-default;
  }
}

@include base-component();
