// AUTO-GENERATED â€” do not modify. Changes will be overwritten.
//
// Internal CSS custom properties for component use only. Overwriting is not recommended.
//
// --calcite-internal-day-size

:host {
  @apply cursor-pointer flex relative;
  outline: none;
}

@include disabled();

.day-wrapper {
  @apply flex
    flex-col
    items-center
    justify-center
    relative
    w-full;
}

.day {
  @apply text-n2h
    flex
    items-center
    justify-center
    leading-none
    transition-default
    w-full
    relative;
  line-height: var(--calcite-font-line-height-fixed-base);
  block-size: var(--calcite-internal-day-size);
  outline-color: var(--calcite-color-transparent);
  background-color: var(--calcite-date-picker-day-background-color);
  color: var(--calcite-date-picker-day-text-color, var(--calcite-color-text-1));
}

.text {
  @apply mt-px mb-0;
  margin-inline-start: theme("spacing.0");
}

:host([scale="s"]) {
  --calcite-internal-day-size: #{$calcite-size-32};
  .day {
    @apply text-n2;
  }
}

:host([scale="m"]) {
  --calcite-internal-day-size: #{$calcite-size-40};
  .day {
    @apply text-n1;
  }
}

:host([scale="l"]) {
  --calcite-internal-day-size: #{$calcite-size-44};

  .day {
    @apply text-0;
  }
}

:host(:not([current-month])) .day {
  opacity: var(--calcite-opacity-full);
  color: var(--calcite-color-text-3);
}

:host(:focus:not([disabled]):not([selected]):not([current-month])) .day {
  color: var(--calcite-color-text-1);
}

:host(:hover:not([disabled]):not([selected])) {
  & .day {
    background-color: var(--calcite-date-picker-day-background-color-hover, var(--calcite-color-foreground-2));
    color: var(--calcite-date-picker-day-text-color-hover, var(--calcite-color-text-1));
  }
}

:host(:not([range]):not([selected]).current-day) {
  & .day {
    color: var(--calcite-date-picker-current-day-text-color, var(--calcite-color-brand));
    font-weight: var(--calcite-font-weight-bold);
  }
}

:host(:focus[selected]) .day {
  @apply focus-outset z-default;
  box-shadow: 0 0 0 2px var(--calcite-color-foreground-1);
}

:host(:focus:not([disabled]):not([selected])) .day {
  @apply focus-inset;
}

:host(:hover:not([disabled]):not([selected])) .day {
  @apply focus-inset;
}

:host([selected]) .day {
  @apply font-medium;
  background-color: var(--calcite-date-picker-day-background-color-selected, var(--calcite-color-brand));
  color: var(--calcite-date-picker-day-text-color-selected, var(--calcite-color-foreground-1));
}

:host([range-hover]:not([selected])) {
  .day {
    background-color: var(
      --calcite-date-picker-day-outside-range-background-color-hover,
      var(--calcite-color-foreground-2)
    );
    color: var(--calcite-date-picker-day-outside-range-text-color-hover, var(--calcite-color-text-1));
  }
}

:host([highlighted]:not([selected])),
:host(:hover[highlighted]:not([selected])) {
  .day {
    color: var(--calcite-date-picker-day-range-text-color, var(--calcite-color-text-highlight));
    background-color: var(--calcite-date-picker-day-range-background-color, var(--calcite-color-surface-highlight));
  }
}

:host([disabled]) .day {
  color: var(--calcite-color-text-2);
  text-decoration-line: line-through;
  opacity: var(--calcite-opacity-disabled);
}

@media (forced-colors: active) {
  .day {
    @apply rounded-none;
  }

  :host([selected]) {
    outline: 2px solid canvasText;
  }

  :host(:hover:not([selected])) {
    .day {
      border-radius: 50%;
    }
  }

  :host([range][selected]),
  :host([highlighted]),
  :host([range-hover]:not([selected])) {
    .day {
      background-color: highlight;
    }
  }

  :host([range-hover]),
  :host([range][selected][start-of-range]),
  :host([range][selected][end-of-range]) {
    .day {
      background-color: canvas;
    }
  }
}

@include base-component();
