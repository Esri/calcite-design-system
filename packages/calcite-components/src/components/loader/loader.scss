/**
 * CSS Custom Properties
 *
 * These properties can be overridden using the component's tag as selector.
 *
 * @prop --calcite-loader-font-size: Specifies the font size of the loading percentage when type is `"determinate"`.
 * @prop --calcite-loader-size: The width and height of a non-inline loader.
 * @prop --calcite-loader-size-inline: The width and height of an inline loader
 * @prop --calcite-loader-padding : Specifies the padding of the loader.
 */

@import "../../assets/styles/animation";

:host {
  @apply flex relative mx-auto items-center justify-center opacity-100;
  flex-direction: column;
  min-block-size: var(--calcite-loader-size);
  font-size: var(--calcite-loader-font-size);
  stroke-width: var(--calcite-internal-stroke-width);
  fill: none;
  transform: scale(1, 1);
  padding-block: var(--calcite-loader-padding, theme("spacing.16"));
}

:host([scale="s"]) {
  --calcite-internal-stroke-width: 3;
  --calcite-internal-text-offset: var(--calcite-spacing-xxs);
  --calcite-loader-font-size: var(--calcite-font-size--3);
  --calcite-loader-size: theme("spacing.8");
  --calcite-loader-size-inline: theme("spacing.3");
  --calcite-internal-loader-value-line-height: 0.625rem; // 10px
}

:host([scale="m"]) {
  --calcite-internal-stroke-width: 6;
  --calcite-internal-text-offset: var(--calcite-spacing-sm);
  --calcite-loader-font-size: theme("fontSize.0");
  --calcite-loader-size: theme("spacing.16");
  --calcite-loader-size-inline: theme("spacing.4");
  --calcite-internal-loader-value-line-height: 1.375rem; // 22px
}

:host([scale="l"]) {
  --calcite-internal-stroke-width: 8;
  --calcite-internal-text-offset: var(--calcite-spacing-md);
  --calcite-loader-font-size: theme("fontSize.2");
  --calcite-loader-size: theme("spacing.24");
  --calcite-loader-size-inline: theme("spacing.6");
  --calcite-internal-loader-value-line-height: 1.71875rem; // 27.5px
}

.text {
  @apply text-n2h
  text-color-1
  block
  text-center;
  margin-block-start: var(--calcite-internal-text-offset);
}

.percentage {
  @apply block text-center text-color-1;
  font-size: var(--calcite-loader-font-size);
  inline-size: var(--calcite-loader-size);
  line-height: var(--calcite-internal-loader-value-line-height);
  align-self: center;
}

.rings {
  @apply relative flex overflow-visible opacity-100;
  inline-size: var(--calcite-loader-size);
  block-size: var(--calcite-loader-size);
}

.ring {
  @apply absolute top-0 origin-center overflow-visible;
  inset-inline-start: 0;
  inline-size: var(--calcite-loader-size);
  block-size: var(--calcite-loader-size);
}

.ring--track {
  stroke: var(--calcite-color-transparent-press);
}

.ring--progress {
  stroke: var(--calcite-color-brand);
  transform: rotate(-90deg);
  transition: all var(--calcite-internal-animation-timing-fast) linear;
}

:host([type="indeterminate"]) {
  .ring--progress {
    animation: loader-clockwise scale-duration(--calcite-internal-animation-timing-slow, 2) linear infinite;
  }
}

:host([inline]) {
  --calcite-internal-stroke-width: 2;

  @apply relative m-0 stroke-current stroke-2 py-0;
  block-size: var(--calcite-loader-size-inline);
  min-block-size: var(--calcite-loader-size-inline);
  inline-size: var(--calcite-loader-size-inline);
  vertical-align: calc(var(--calcite-loader-size-inline) * -1 * 0.2);

  .rings {
    @apply top-0 m-0;
    inset-inline-start: 0;
    inline-size: var(--calcite-loader-size-inline);
    block-size: var(--calcite-loader-size-inline);
  }

  .ring {
    inline-size: var(--calcite-loader-size-inline);
    block-size: var(--calcite-loader-size-inline);
  }

  .ring--progress {
    stroke: currentColor;
  }
}

:host([complete]) {
  @apply opacity-0;
  transform: scale(0.75, 0.75);
  transform-origin: center;
  transition:
    opacity var(--calcite-internal-animation-timing-medium) linear 1000ms,
    transform var(--calcite-internal-animation-timing-medium) linear 1000ms;

  .rings {
    @apply opacity-0;
    transform: scale(0.75, 0.75);
    transform-origin: center;
    transition:
      opacity calc(180ms * var(--calcite-internal-duration-factor)) linear 800ms,
      transform calc(180ms * var(--calcite-internal-duration-factor)) linear 800ms;
  }

  .percentage {
    color: theme("colors.brand");
    transform: scale(1.05, 1.05);
    transform-origin: center;
    transition:
      color var(--calcite-internal-animation-timing-medium) linear,
      transform var(--calcite-internal-animation-timing-medium) linear;
  }
}

@keyframes loader-clockwise {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@include base-component();
