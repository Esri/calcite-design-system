/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Alignment, Appearance, CollapseDirection, FlipContext, IconType, Kind, Layout, LogicalFlowPosition, Position, Scale, SelectionAppearance as SelectionAppearance1, SelectionMode, Status, Width } from "./components/interfaces";
import { RequestedItem } from "./components/accordion/interfaces";
import { IconNameOrString } from "./components/icon/interfaces";
import { RequestedItem as RequestedItem1 } from "./components/accordion-item/interfaces";
import { ActionMessages } from "./components/action/assets/action/t9n";
import { FlipPlacement, LogicalPlacement, MenuPlacement, OverlayPositioning, ReferenceElement } from "./utils/floating-ui";
import { ActionBarMessages } from "./components/action-bar/assets/action-bar/t9n";
import { Columns } from "./components/action-group/interfaces";
import { ActionGroupMessages } from "./components/action-group/assets/action-group/t9n";
import { ActionPadMessages } from "./components/action-pad/assets/action-pad/t9n";
import { AlertDuration, AlertQueue } from "./components/alert/interfaces";
import { NumberingSystem } from "./utils/locale";
import { AlertMessages } from "./components/alert/assets/alert/t9n";
import { HeadingLevel } from "./components/functional/Heading";
import { BlockMessages } from "./components/block/assets/block/t9n";
import { BlockSectionToggleDisplay } from "./components/block-section/interfaces";
import { BlockSectionMessages } from "./components/block-section/assets/block-section/t9n";
import { ButtonAlignment, DropdownIconType } from "./components/button/interfaces";
import { ButtonMessages } from "./components/button/assets/button/t9n";
import { CardMessages } from "./components/card/assets/card/t9n";
import { ArrowType, AutoplayType } from "./components/carousel/interfaces";
import { CarouselMessages } from "./components/carousel/assets/carousel/t9n";
import { MutableValidityState } from "./utils/form";
import { ChipMessages } from "./components/chip/assets/chip/t9n";
import { ColorValue, InternalColor } from "./components/color-picker/interfaces";
import { Format } from "./components/color-picker/utils";
import { ColorPickerMessages } from "./components/color-picker/assets/color-picker/t9n";
import { ComboboxChildElement, SelectionDisplay } from "./components/combobox/interfaces";
import { ComboboxMessages } from "./components/combobox/assets/combobox/t9n";
import { DatePickerMessages } from "./components/date-picker/assets/date-picker/t9n";
import { DateLocaleData } from "./components/date-picker/utils";
import { HoverRange } from "./utils/date";
import { DialogMessages } from "./components/dialog/assets/dialog/t9n";
import { DialogPlacement } from "./components/dialog/interfaces";
import { RequestedItem as RequestedItem2 } from "./components/dropdown-group/interfaces";
import { ItemKeyboardEvent } from "./components/dropdown/interfaces";
import { FilterMessages } from "./components/filter/assets/filter/t9n";
import { FlowItemLikeElement } from "./components/flow/interfaces";
import { FlowItemMessages } from "./components/flow-item/assets/flow-item/t9n";
import { ColorStop, DataSeries } from "./components/graph/interfaces";
import { HandleMessages } from "./components/handle/assets/handle/t9n";
import { HandleChange, HandleNudge } from "./components/handle/interfaces";
import { InlineEditableMessages } from "./components/inline-editable/assets/inline-editable/t9n";
import { InputPlacement } from "./components/input/interfaces";
import { InputMessages } from "./components/input/assets/input/t9n";
import { InputDatePickerMessages } from "./components/input-date-picker/assets/input-date-picker/t9n";
import { InputNumberMessages } from "./components/input-number/assets/input-number/t9n";
import { InputTextMessages } from "./components/input-text/assets/input-text/t9n";
import { InputTimePickerMessages } from "./components/input-time-picker/assets/input-time-picker/t9n";
import { TimePickerMessages } from "./components/time-picker/assets/time-picker/t9n";
import { InputTimeZoneMessages } from "./components/input-time-zone/assets/input-time-zone/t9n";
import { OffsetStyle, TimeZoneMode } from "./components/input-time-zone/interfaces";
import { ListDragDetail } from "./components/list/interfaces";
import { ItemData } from "./components/list-item/interfaces";
import { ListMessages } from "./components/list/assets/list/t9n";
import { SelectionAppearance } from "./components/list/resources";
import { ListItemMessages } from "./components/list-item/assets/list-item/t9n";
import { MenuMessages } from "./components/menu/assets/menu/t9n";
import { MenuItemMessages } from "./components/menu-item/assets/menu-item/t9n";
import { MenuItemCustomEvent } from "./components/menu-item/interfaces";
import { MeterFillType, MeterLabelType } from "./components/meter/interfaces";
import { ModalMessages } from "./components/modal/assets/modal/t9n";
import { NoticeMessages } from "./components/notice/assets/notice/t9n";
import { PaginationMessages } from "./components/pagination/assets/pagination/t9n";
import { PanelMessages } from "./components/panel/assets/panel/t9n";
import { ItemData as ItemData1, ListFocusId } from "./components/pick-list/shared-list-logic";
import { ICON_TYPES } from "./components/pick-list/resources";
import { PickListItemMessages } from "./components/pick-list-item/assets/pick-list-item/t9n";
import { PopoverMessages } from "./components/popover/assets/popover/t9n";
import { RatingMessages } from "./components/rating/assets/rating/t9n";
import { ScrimMessages } from "./components/scrim/assets/scrim/t9n";
import { DisplayMode } from "./components/sheet/interfaces";
import { DisplayMode as DisplayMode1 } from "./components/shell-panel/interfaces";
import { ShellPanelMessages } from "./components/shell-panel/assets/shell-panel/t9n";
import { DragDetail } from "./utils/sortableComponent";
import { StepperItemChangeEventDetail, StepperItemEventDetail, StepperItemKeyEventDetail, StepperLayout } from "./components/stepper/interfaces";
import { StepperMessages } from "./components/stepper/assets/stepper/t9n";
import { StepperItemMessages } from "./components/stepper-item/assets/stepper-item/t9n";
import { TabID, TabLayout, TabPosition } from "./components/tabs/interfaces";
import { TabNavMessages } from "./components/tab-nav/assets/tab-nav/t9n";
import { Element } from "@stencil/core";
import { TabChangeEventDetail, TabCloseEventDetail } from "./components/tab/interfaces";
import { TabTitleMessages } from "./components/tab-title/assets/tab-title/t9n";
import { RowType, TableInteractionMode, TableLayout, TableRowFocusEvent, TableSelectionDisplay } from "./components/table/interfaces";
import { TableMessages } from "./components/table/assets/table/t9n";
import { TableCellMessages } from "./components/table-cell/assets/table-cell/t9n";
import { TableHeaderMessages } from "./components/table-header/assets/table-header/t9n";
import { TextAreaMessages } from "./components/text-area/assets/text-area/t9n";
import { TileSelectType } from "./components/tile-select/interfaces";
import { TileSelectGroupLayout } from "./components/tile-select-group/interfaces";
import { TipMessages } from "./components/tip/assets/tip/t9n";
import { TipManagerMessages } from "./components/tip-manager/assets/tip-manager/t9n";
import { TreeItemSelectDetail } from "./components/tree-item/interfaces";
import { ValueListMessages } from "./components/value-list/assets/value-list/t9n";
import { ListItemAndHandle } from "./components/value-list-item/interfaces";
export { Alignment, Appearance, CollapseDirection, FlipContext, IconType, Kind, Layout, LogicalFlowPosition, Position, Scale, SelectionAppearance as SelectionAppearance1, SelectionMode, Status, Width } from "./components/interfaces";
export { RequestedItem } from "./components/accordion/interfaces";
export { IconNameOrString } from "./components/icon/interfaces";
export { RequestedItem as RequestedItem1 } from "./components/accordion-item/interfaces";
export { ActionMessages } from "./components/action/assets/action/t9n";
export { FlipPlacement, LogicalPlacement, MenuPlacement, OverlayPositioning, ReferenceElement } from "./utils/floating-ui";
export { ActionBarMessages } from "./components/action-bar/assets/action-bar/t9n";
export { Columns } from "./components/action-group/interfaces";
export { ActionGroupMessages } from "./components/action-group/assets/action-group/t9n";
export { ActionPadMessages } from "./components/action-pad/assets/action-pad/t9n";
export { AlertDuration, AlertQueue } from "./components/alert/interfaces";
export { NumberingSystem } from "./utils/locale";
export { AlertMessages } from "./components/alert/assets/alert/t9n";
export { HeadingLevel } from "./components/functional/Heading";
export { BlockMessages } from "./components/block/assets/block/t9n";
export { BlockSectionToggleDisplay } from "./components/block-section/interfaces";
export { BlockSectionMessages } from "./components/block-section/assets/block-section/t9n";
export { ButtonAlignment, DropdownIconType } from "./components/button/interfaces";
export { ButtonMessages } from "./components/button/assets/button/t9n";
export { CardMessages } from "./components/card/assets/card/t9n";
export { ArrowType, AutoplayType } from "./components/carousel/interfaces";
export { CarouselMessages } from "./components/carousel/assets/carousel/t9n";
export { MutableValidityState } from "./utils/form";
export { ChipMessages } from "./components/chip/assets/chip/t9n";
export { ColorValue, InternalColor } from "./components/color-picker/interfaces";
export { Format } from "./components/color-picker/utils";
export { ColorPickerMessages } from "./components/color-picker/assets/color-picker/t9n";
export { ComboboxChildElement, SelectionDisplay } from "./components/combobox/interfaces";
export { ComboboxMessages } from "./components/combobox/assets/combobox/t9n";
export { DatePickerMessages } from "./components/date-picker/assets/date-picker/t9n";
export { DateLocaleData } from "./components/date-picker/utils";
export { HoverRange } from "./utils/date";
export { DialogMessages } from "./components/dialog/assets/dialog/t9n";
export { DialogPlacement } from "./components/dialog/interfaces";
export { RequestedItem as RequestedItem2 } from "./components/dropdown-group/interfaces";
export { ItemKeyboardEvent } from "./components/dropdown/interfaces";
export { FilterMessages } from "./components/filter/assets/filter/t9n";
export { FlowItemLikeElement } from "./components/flow/interfaces";
export { FlowItemMessages } from "./components/flow-item/assets/flow-item/t9n";
export { ColorStop, DataSeries } from "./components/graph/interfaces";
export { HandleMessages } from "./components/handle/assets/handle/t9n";
export { HandleChange, HandleNudge } from "./components/handle/interfaces";
export { InlineEditableMessages } from "./components/inline-editable/assets/inline-editable/t9n";
export { InputPlacement } from "./components/input/interfaces";
export { InputMessages } from "./components/input/assets/input/t9n";
export { InputDatePickerMessages } from "./components/input-date-picker/assets/input-date-picker/t9n";
export { InputNumberMessages } from "./components/input-number/assets/input-number/t9n";
export { InputTextMessages } from "./components/input-text/assets/input-text/t9n";
export { InputTimePickerMessages } from "./components/input-time-picker/assets/input-time-picker/t9n";
export { TimePickerMessages } from "./components/time-picker/assets/time-picker/t9n";
export { InputTimeZoneMessages } from "./components/input-time-zone/assets/input-time-zone/t9n";
export { OffsetStyle, TimeZoneMode } from "./components/input-time-zone/interfaces";
export { ListDragDetail } from "./components/list/interfaces";
export { ItemData } from "./components/list-item/interfaces";
export { ListMessages } from "./components/list/assets/list/t9n";
export { SelectionAppearance } from "./components/list/resources";
export { ListItemMessages } from "./components/list-item/assets/list-item/t9n";
export { MenuMessages } from "./components/menu/assets/menu/t9n";
export { MenuItemMessages } from "./components/menu-item/assets/menu-item/t9n";
export { MenuItemCustomEvent } from "./components/menu-item/interfaces";
export { MeterFillType, MeterLabelType } from "./components/meter/interfaces";
export { ModalMessages } from "./components/modal/assets/modal/t9n";
export { NoticeMessages } from "./components/notice/assets/notice/t9n";
export { PaginationMessages } from "./components/pagination/assets/pagination/t9n";
export { PanelMessages } from "./components/panel/assets/panel/t9n";
export { ItemData as ItemData1, ListFocusId } from "./components/pick-list/shared-list-logic";
export { ICON_TYPES } from "./components/pick-list/resources";
export { PickListItemMessages } from "./components/pick-list-item/assets/pick-list-item/t9n";
export { PopoverMessages } from "./components/popover/assets/popover/t9n";
export { RatingMessages } from "./components/rating/assets/rating/t9n";
export { ScrimMessages } from "./components/scrim/assets/scrim/t9n";
export { DisplayMode } from "./components/sheet/interfaces";
export { DisplayMode as DisplayMode1 } from "./components/shell-panel/interfaces";
export { ShellPanelMessages } from "./components/shell-panel/assets/shell-panel/t9n";
export { DragDetail } from "./utils/sortableComponent";
export { StepperItemChangeEventDetail, StepperItemEventDetail, StepperItemKeyEventDetail, StepperLayout } from "./components/stepper/interfaces";
export { StepperMessages } from "./components/stepper/assets/stepper/t9n";
export { StepperItemMessages } from "./components/stepper-item/assets/stepper-item/t9n";
export { TabID, TabLayout, TabPosition } from "./components/tabs/interfaces";
export { TabNavMessages } from "./components/tab-nav/assets/tab-nav/t9n";
export { Element } from "@stencil/core";
export { TabChangeEventDetail, TabCloseEventDetail } from "./components/tab/interfaces";
export { TabTitleMessages } from "./components/tab-title/assets/tab-title/t9n";
export { RowType, TableInteractionMode, TableLayout, TableRowFocusEvent, TableSelectionDisplay } from "./components/table/interfaces";
export { TableMessages } from "./components/table/assets/table/t9n";
export { TableCellMessages } from "./components/table-cell/assets/table-cell/t9n";
export { TableHeaderMessages } from "./components/table-header/assets/table-header/t9n";
export { TextAreaMessages } from "./components/text-area/assets/text-area/t9n";
export { TileSelectType } from "./components/tile-select/interfaces";
export { TileSelectGroupLayout } from "./components/tile-select-group/interfaces";
export { TipMessages } from "./components/tip/assets/tip/t9n";
export { TipManagerMessages } from "./components/tip-manager/assets/tip-manager/t9n";
export { TreeItemSelectDetail } from "./components/tree-item/interfaces";
export { ValueListMessages } from "./components/value-list/assets/value-list/t9n";
export { ListItemAndHandle } from "./components/value-list-item/interfaces";
export namespace Components {
    interface CalciteAccordion {
        /**
          * Specifies the appearance of the component.
         */
        "appearance": Extract<"solid" | "transparent", Appearance>;
        /**
          * Specifies the placement of the icon in the header.
         */
        "iconPosition": Extract<"start" | "end", Position>;
        /**
          * Specifies the type of the icon in the header.
         */
        "iconType": Extract<"chevron" | "caret" | "plus-minus", IconType>;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection, and  `"single-persist"` allows one selection and prevents de-selection.
         */
        "selectionMode": Extract<
    "single" | "single-persist" | "multiple",
    SelectionMode
  >;
    }
    interface CalciteAccordionItem {
        /**
          * The containing `accordion` element.
         */
        "accordionParent": HTMLCalciteAccordionElement;
        /**
          * Specifies a description for the component.
         */
        "description": string;
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Specifies heading text for the component.
         */
        "heading": string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies the placement of the icon in the header inherited from the `calcite-accordion`.
         */
        "iconPosition": Extract<"start" | "end", Position>;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": IconNameOrString;
        /**
          * Specifies the type of the icon in the header inherited from the `calcite-accordion`.
         */
        "iconType": Extract<"chevron" | "caret" | "plus-minus", IconType>;
        /**
          * Specifies the size of the component inherited from the `calcite-accordion`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteAction {
        /**
          * When `true`, the component is highlighted.
         */
        "active": boolean;
        /**
          * Specifies the horizontal alignment of button elements with text content.
         */
        "alignment": Alignment;
        /**
          * Specifies the appearance of the component.
         */
        "appearance": Extract<"solid" | "transparent", Appearance>;
        /**
          * When `true`, the side padding of the component is reduced.
          * @deprecated No longer necessary.
         */
        "compact": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies an icon to display.
         */
        "icon": IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * When `true`, displays a visual indicator.
         */
        "indicator": boolean;
        /**
          * Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label": string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ActionMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ActionMessages;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies text that accompanies the icon.
         */
        "text": string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled": boolean;
    }
    interface CalciteActionBar {
        /**
          * Specifies the accessible label for the last `calcite-action-group`.
         */
        "actionsEndGroupLabel": string;
        /**
          * When `true`, the expand-toggling behavior is disabled.
         */
        "expandDisabled": boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Specifies the layout direction of the actions.
         */
        "layout": Extract<"horizontal" | "vertical", Layout>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ActionBarMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ActionBarMessages;
        /**
          * Overflows actions that won't fit into menus.
         */
        "overflowActions": () => Promise<void>;
        /**
          * Disables automatically overflowing `calcite-action`s that won't fit into menus.
         */
        "overflowActionsDisabled": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position": Extract<"start" | "end", Position>;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteActionGroup {
        /**
          * Indicates number of columns.
         */
        "columns": Columns;
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Indicates the layout of the component.
          * @deprecated Use the `layout` property on the component's parent instead.
         */
        "layout": Extract<"horizontal" | "vertical" | "grid", Layout>;
        /**
          * Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "menuFlipPlacements": FlipPlacement[];
        /**
          * When `true`, the `calcite-action-menu` is open.
         */
        "menuOpen": boolean;
        /**
          * Determines where the action menu will be positioned.
         */
        "menuPlacement": LogicalPlacement;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ActionGroupMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ActionGroupMessages;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout. `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Specifies the size of the `calcite-action-menu`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteActionMenu {
        /**
          * Specifies the appearance of the component.
         */
        "appearance": Extract<"solid" | "transparent", Appearance>;
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Specifies the component's fallback slotted content `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "flipPlacements": FlipPlacement[];
        /**
          * Specifies the text string for the component.
         */
        "label": string;
        /**
          * When `true`, the component is open.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout. `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement": LogicalPlacement;
        /**
          * Specifies the size of the component's trigger `calcite-action`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteActionPad {
        /**
          * Specifies the accessible label for the last `calcite-action-group`.
         */
        "actionsEndGroupLabel": string;
        /**
          * When `true`, the expand-toggling behavior is disabled.
         */
        "expandDisabled": boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Indicates the layout of the component.
         */
        "layout": Extract<"horizontal" | "vertical" | "grid", Layout>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ActionPadMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ActionPadMessages;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position": Extract<"start" | "end", Position>;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteAlert {
        /**
          * This internal property, managed by the AlertManager, is used to inform the component if it is the active open Alert.
         */
        "active": boolean;
        /**
          * When `true`, the component closes automatically. Recommended for passive, non-blocking alerts.
         */
        "autoClose": boolean;
        /**
          * Specifies the duration before the component automatically closes - only use with `autoClose`.
         */
        "autoCloseDuration": AlertDuration;
        /**
          * This internal property, managed by a containing calcite-shell, is used to inform the component if special configuration or styles are needed
         */
        "embedded": boolean;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon": IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the kind of the component, which will apply to top border and icon.
         */
        "kind": Extract<
    "brand" | "danger" | "info" | "success" | "warning",
    Kind
  >;
        /**
          * Specifies an accessible name for the component.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<AlertMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": AlertMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * This internal property, managed by the AlertManager, is used to inform the component of how many alerts are currently open.
         */
        "openAlertCount": number;
        /**
          * Specifies the placement of the component.
         */
        "placement": MenuPlacement;
        /**
          * Specifies the ordering priority of the component when opened.
         */
        "queue": AlertQueue;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's "close" button, the first focusable item.
          * @returns
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteAvatar {
        /**
          * Specifies the full name of the user. When `label` and `thumbnail` are not defined, specifies the accessible name for the component.
         */
        "fullName": string;
        /**
          * Specifies alternative text when `thumbnail` is defined, otherwise specifies an accessible label.
         */
        "label": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the `src` to an image (remember to add a token if the user is private).
         */
        "thumbnail": string;
        /**
          * Specifies the unique id of the user.
         */
        "userId": string;
        /**
          * Specifies the username of the user.
         */
        "username": string;
    }
    interface CalciteBlock {
        /**
          * When `true`, the component is collapsible.
         */
        "collapsible": boolean;
        /**
          * A description for the component, which displays below the heading.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, displays a drag handle in the header.
         */
        "dragHandle": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": IconNameOrString;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "menuFlipPlacements": FlipPlacement[];
        /**
          * Determines where the action menu will be positioned.
         */
        "menuPlacement": LogicalPlacement;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<BlockMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": BlockMessages;
        /**
          * When `true`, expands the component and its contents.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Sets focus on the component's first tabbable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Displays a status-related indicator icon.
          * @deprecated Use `icon-start` instead.
         */
        "status": Status;
    }
    interface CalciteBlockSection {
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": IconNameOrString;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<BlockSectionMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": BlockSectionMessages;
        /**
          * When `true`, expands the component and its contents.
         */
        "open": boolean;
        /**
          * Sets focus on the component's first tabbable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Displays a status-related indicator icon.
          * @deprecated Use `icon-start` instead.
         */
        "status": Status;
        /**
          * The component header text.
         */
        "text": string;
        /**
          * Specifies how the component's toggle is displayed, where:  `"button"` sets the toggle to a selectable header, and  `"switch"` sets the toggle to a switch.
         */
        "toggleDisplay": BlockSectionToggleDisplay;
    }
    interface CalciteButton {
        /**
          * Specifies the alignment of the component's elements.
         */
        "alignment": ButtonAlignment;
        /**
          * Specifies the appearance style of the component.
         */
        "appearance": Extract<
    "outline" | "outline-fill" | "solid" | "transparent",
    Appearance
  >;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value: Without a value, the browser will suggest a filename/extension See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download.
         */
        "download": string | boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.
         */
        "href": string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": IconNameOrString;
        /**
          * Specifies the kind of the component, which will apply to the border and background if applicable.
         */
        "kind": Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, a busy indicator is displayed and interaction is disabled.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ButtonMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ButtonMessages;
        /**
          * Specifies the name of the component on form submission.
         */
        "name"?: string;
        /**
          * Defines the relationship between the `href` value and the current document.
          * @mdn [rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)
         */
        "rel": string;
        /**
          * When `true`, adds a round style to the component.
         */
        "round": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies if the component is a child of a `calcite-split-button`.
         */
        "splitChild": "primary" | "secondary" | false;
        /**
          * Specifies where to open the linked document defined in the `href` property.
          * @mdn [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)
         */
        "target": string;
        /**
          * Specifies the default behavior of the component.
          * @mdn [type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)
         */
        "type": string;
        /**
          * Specifies the width of the component.
         */
        "width": Width;
    }
    interface CalciteCard {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<CardMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": CardMessages;
        /**
          * When `true`, the component is selectable.
          * @deprecated use `selectionMode` property on a parent `calcite-card-group` instead.
         */
        "selectable": boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * This internal property, managed by a containing `calcite-card-group`, is conditionally set based on the `selectionMode` of the parent
         */
        "selectionMode": Extract<"multiple" | "single" | "single-persist" | "none", SelectionMode>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets the placement of the thumbnail defined in the `thumbnail` slot.
         */
        "thumbnailPosition": LogicalFlowPosition;
    }
    interface CalciteCardGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteCardElement[];
        /**
          * Specifies the selection mode of the component.
         */
        "selectionMode": Extract<
    "multiple" | "single" | "single-persist" | "none",
    SelectionMode
  >;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteCarousel {
        /**
          * Specifies how and if the "previous" and "next" arrows are displayed.
         */
        "arrowType": ArrowType;
        /**
          * When `true`, the carousel will autoplay and controls will be displayed. When "paused" at time of initialization, the carousel will not autoplay, but controls will be displayed.
         */
        "autoplay": AutoplayType;
        /**
          * When `autoplay` is `true`, specifies in milliseconds the length of time to display each Carousel Item.
         */
        "autoplayDuration": number;
        /**
          * Specifies if the component's controls are positioned absolutely on top of slotted Carousel Items.
         */
        "controlOverlay": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<CarouselMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": CarouselMessages;
        /**
          * Made into a prop for testing purposes only
         */
        "paused": boolean;
        /**
          * Play the carousel. If `autoplay` is not enabled (initialized either to `true` or `"paused"`), these methods will have no effect.
         */
        "play": () => Promise<void>;
        /**
          * The component's selected `calcite-carousel-item`.
          * @readonly
         */
        "selectedItem": HTMLCalciteCarouselItemElement;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Stop the carousel. If `autoplay` is not enabled (initialized either to `true` or `"paused"`), these methods will have no effect.
         */
        "stop": () => Promise<void>;
    }
    interface CalciteCarouselItem {
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
    }
    interface CalciteCheckbox {
        /**
          * When `true`, the component is checked.
         */
        "checked": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * The `id` attribute of the component. When omitted, a globally unique identifier is used.
         */
        "guid": string;
        /**
          * The hovered state of the checkbox.
         */
        "hovered": boolean;
        /**
          * When `true`, the component is initially indeterminate, which is independent from its `checked` value.  The state is visual only, and can look different across browsers.
          * @mdn [indeterminate](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes)
         */
        "indeterminate": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity": MutableValidityState;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteChip {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance": Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, a close button is added to the component.
         */
        "closable": boolean;
        /**
          * When `true`, hides the component.
         */
        "closed": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies an icon to display.
         */
        "icon": IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * When true, enables the chip to be focused, and allows the `calciteChipSelect` to emit. This is set to `true` by a parent Chip Group component.
         */
        "interactive": boolean;
        /**
          * Specifies the kind of the component, which will apply to border and background if applicable.
         */
        "kind": Extract<"brand" | "inverse" | "neutral", Kind>;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ChipMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ChipMessages;
        "parentChipGroup": HTMLCalciteChipGroupElement;
        /**
          * Specifies the size of the component. When contained in a parent `calcite-chip-group` inherits the parent's `scale` value.
         */
        "scale": Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * This internal property, managed by a containing `calcite-chip-group`, is conditionally set based on the `selectionMode` of the parent
         */
        "selectionMode": Extract<"multiple" | "single" | "single-persist" | "none", SelectionMode>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteChipGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the size of the component. Child `calcite-chip`s inherit the component's value.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteChipElement[];
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection,  `"single-persist"` allows one selection and prevents de-selection, and  `"none"` does not allow any selections.
         */
        "selectionMode": Extract<
    "multiple" | "single" | "single-persist" | "none",
    SelectionMode
  >;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteColorPicker {
        /**
          * When `true`, an empty color (`null`) will be allowed as a `value`.  When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.
          * @deprecated Use `clearable` instead
         */
        "allowEmpty": boolean;
        /**
          * When `true`, the component will allow updates to the color's alpha value.
         */
        "alphaChannel": boolean;
        /**
          * When `true`, hides the RGB/HSV channel inputs.
         */
        "channelsDisabled": boolean;
        /**
          * When `true`, an empty color (`null`) will be allowed as a `value`.  When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.
         */
        "clearable": boolean;
        /**
          * Internal prop for advanced use-cases.
         */
        "color": InternalColor | null;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The format of `value`.  When `"auto"`, the format will be inferred from `value` when set.
          * @default "auto"
         */
        "format": Format;
        /**
          * When `true`, hides the hex input.
         */
        "hexDisabled": boolean;
        /**
          * When `true`, hides the RGB/HSV channel inputs.
          * @deprecated use `channelsDisabled` instead
         */
        "hideChannels": boolean;
        /**
          * When `true`, hides the hex input.
          * @deprecated use `hexDisabled` instead
         */
        "hideHex": boolean;
        /**
          * When `true`, hides the saved colors section.
          * @deprecated use `savedDisabled` instead
         */
        "hideSaved": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ColorPickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ColorPickerMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * When `true`, hides the saved colors section.
         */
        "savedDisabled": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the storage ID for colors.
         */
        "storageId": string;
        /**
          * The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.  The type will be preserved as the color is updated.
          * @default "#007ac2"
          * @see [CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)
          * @see [ColorValue](https://github.com/Esri/calcite-design-system/blob/dev/src/components/color-picker/interfaces.ts#L10)
         */
        "value": ColorValue | null;
    }
    interface CalciteColorPickerHexInput {
        /**
          * When `true`, an empty color (`undefined`) will be allowed as a `value`.  When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.
         */
        "allowEmpty": boolean;
        /**
          * When `true`, the component will allow updates to the color's alpha value.
         */
        "alphaChannel": boolean;
        /**
          * Specifies accessible label for the input field.
          * @deprecated use `messages` instead
         */
        "hexLabel": string;
        /**
          * Messages are passed by parent component for accessible labels.
         */
        "messages": ColorPickerMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The hex value.
         */
        "value": string;
    }
    interface CalciteColorPickerSwatch {
        /**
          * When `true`, the component is active.
         */
        "active": boolean;
        /**
          * The color value.
          * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
         */
        "color": string | null;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
    }
    interface CalciteCombobox {
        /**
          * When `true`, allows entry of custom values, which are not in the original set of items.
         */
        "allowCustomValues": boolean;
        /**
          * When `true`, the value-clearing will be disabled.
         */
        "clearDisabled": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Text for the component's filter input field.
         */
        "filterText": string;
        /**
          * Specifies the component's filtered items.
          * @readonly
         */
        "filteredItems": HTMLCalciteComboboxItemElement[];
        /**
          * Specifies the component's fallback slotted content placement when it's initial placement has insufficient space available.
         */
        "flipPlacements": FlipPlacement[];
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the maximum number of `calcite-combobox-item`s (including nested children) to display before displaying a scrollbar.
         */
        "maxItems": number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ComboboxMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ComboboxMessages;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Specifies the placeholder text for the input.
         */
        "placeholder": string;
        /**
          * Specifies the placeholder icon for the input.
         */
        "placeholderIcon": IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "placeholderIconFlipRtl": boolean;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
         */
        "readOnly": boolean;
        /**
          * Updates the position of the component.
          * @param delayed Reposition the component after a delay
          * @returns Promise
         */
        "reposition": (delayed?: boolean) => Promise<void>;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteComboboxItemElement[];
        /**
          * When `selectionMode` is `"ancestors"` or `"multiple"`, specifies the display of multiple `calcite-combobox-item` selections, where:  `"all"` displays all selections with individual `calcite-chip`s,  `"fit"` displays individual `calcite-chip`s that scale to the component's size, including a non-closable `calcite-chip`, which provides the number of additional `calcite-combobox-item` selections not visually displayed, and  `"single"` displays one `calcite-chip` with the total number of selections.
         */
        "selectionDisplay": SelectionDisplay;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection,  `"single-persist"` allows one selection and prevents de-selection, and  `"ancestors"` allows multiple selections, but shows ancestors of selected items as selected, with only deepest children shown in chips.
         */
        "selectionMode": Extract<
    "single" | "single-persist" | "ancestors" | "multiple",
    SelectionMode
  >;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon": IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage": string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity": MutableValidityState;
        /**
          * The component's value(s) from the selected `calcite-combobox-item`(s).
         */
        "value": string | string[];
    }
    interface CalciteComboboxItem {
        /**
          * When `true`, the component is active.
         */
        "active": boolean;
        /**
          * Specifies the parent and grandparent items, which are set on `calcite-combobox`.
         */
        "ancestors": ComboboxChildElement[];
        /**
          * A description for the component, which displays below the label.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, omits the component from the `calcite-combobox` filtered search results.
         */
        "filterDisabled": boolean;
        /**
          * Pattern for highlighting filter text matches.
         */
        "filterTextMatchPattern": RegExp;
        /**
          * The `id` attribute of the component. When omitted, a globally unique identifier is used.
         */
        "guid": string;
        /**
          * The component's text.
         */
        "heading": string;
        /**
          * Specifies an icon to display.
         */
        "icon": IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * The component's label.
         */
        "label": any;
        /**
          * Provides additional metadata to the component used in filtering.
         */
        "metadata": Record<string, unknown>;
        /**
          * Specifies the size of the component inherited from the `calcite-combobox`, defaults to `m`.
         */
        "scale": Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection,  `"single-persist"` allows one selection and prevents de-selection, and  `"ancestors"` allows multiple selections, but shows ancestors of selected items as selected, with only deepest children shown in chips.
         */
        "selectionMode": Extract<
    "single" | "single-persist" | "ancestors" | "multiple",
    SelectionMode
  >;
        /**
          * The component's short heading.  When provided, the short heading will be displayed in the component's selection.  It is recommended to use 5 characters or fewer.
         */
        "shortHeading": string;
        /**
          * The component's text.
          * @deprecated Use `heading` instead.
         */
        "textLabel": string;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteComboboxItemGroup {
        /**
          * When `true`, signifies that the group comes after another group without any children (items or sub-groups), otherwise indicates that the group comes after another group that has children. Used for styling.
         */
        "afterEmptyGroup": boolean;
        /**
          * Specifies the parent and grandparent `calcite-combobox-item`s, which are set on `calcite-combobox`.
         */
        "ancestors": ComboboxChildElement[];
        /**
          * Specifies the title of the component.
         */
        "label": string;
        /**
          * Specifies the size of the component inherited from the `calcite-combobox`, defaults to `m`.
         */
        "scale": Scale;
    }
    interface CalciteDatePicker {
        /**
          * Specifies the component's active date.
         */
        "activeDate": Date;
        /**
          * When `range` is true, specifies the active `range`. Where `"start"` specifies the starting range date and `"end"` the ending range date.
         */
        "activeRange": "start" | "end";
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max": string;
        /**
          * Specifies the latest allowed date as a full date object (`new Date("yyyy-mm-dd")`).
         */
        "maxAsDate": Date;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<DatePickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": DatePickerMessages;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min": string;
        /**
          * Specifies the earliest allowed date as a full date object (`new Date("yyyy-mm-dd")`).
         */
        "minAsDate": Date;
        /**
          * Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.
         */
        "numberingSystem": NumberingSystem;
        /**
          * When `true`, disables the default behavior on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled": boolean;
        /**
          * When `true`, activates the component's range mode to allow a start and end date.
         */
        "range": boolean;
        /**
          * Resets active date state.
         */
        "reset": () => Promise<void>;
        /**
          * Specifies the size of the component.
         */
        "scale": "s" | "m" | "l";
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the selected date as a string (`"yyyy-mm-dd"`), or an array of strings for `range` values (`["yyyy-mm-dd", "yyyy-mm-dd"]`).
         */
        "value": string | string[];
        /**
          * Specifies the selected date as a full date object (`new Date("yyyy-mm-dd")`), or an array containing full date objects (`[new Date("yyyy-mm-dd"), new Date("yyyy-mm-dd")]`).
         */
        "valueAsDate": Date | Date[];
    }
    interface CalciteDatePickerDay {
        /**
          * When `true`, the component is active.
         */
        "active": boolean;
        /**
          * Date is in the current month.
         */
        "currentMonth": boolean;
        /**
          * The DateTimeFormat used to provide screen reader labels.
         */
        "dateTimeFormat": Intl.DateTimeFormat;
        /**
          * Day of the month to be shown.
         */
        "day": number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Date is the end of date range.
         */
        "endOfRange": boolean;
        /**
          * Date is currently highlighted as part of the range,
         */
        "highlighted": boolean;
        /**
          * When `true`, activates the component's range mode to allow a start and end date.
         */
        "range": boolean;
        /**
          * When `true`, highlight styling for edge dates is applied.
         */
        "rangeEdge": "start" | "end" | undefined;
        /**
          * Date is being hovered and within the set range.
         */
        "rangeHover": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Date is the start of date range.
         */
        "startOfRange": boolean;
        /**
          * The component's value.
         */
        "value": Date;
    }
    interface CalciteDatePickerMonth {
        /**
          * The currently active Date.
         */
        "activeDate": Date;
        /**
          * The DateTimeFormat used to provide screen reader labels.
         */
        "dateTimeFormat": Intl.DateTimeFormat;
        /**
          * End date currently active.
         */
        "endDate"?: Date;
        /**
          * The range of dates currently being hovered.
         */
        "hoverRange": HoverRange;
        /**
          * CLDR locale data for current locale.
         */
        "localeData": DateLocaleData;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max": Date;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min": Date;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Already selected date.
         */
        "selectedDate": Date;
        /**
          * Start date currently active.
         */
        "startDate"?: Date;
    }
    interface CalciteDatePickerMonthHeader {
        /**
          * The focused date is indicated and will become the selected date if the user proceeds.
         */
        "activeDate": Date;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * CLDR locale data for translated calendar info.
         */
        "localeData": DateLocaleData;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max": Date;
        /**
          * This property specifies accessible strings for the component's previous month button ,next month button & year input elements. Made into a prop for testing purposes only.
          * @readonly
         */
        "messages": DatePickerMessages;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min": Date;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Already selected date.
         */
        "selectedDate": Date;
    }
    interface CalciteDialog {
        /**
          * Passes a function to run before the component closes.
         */
        "beforeClose": () => Promise<void>;
        /**
          * When `true`, disables the component's close button.
         */
        "closeDisabled": boolean;
        /**
          * A description for the component.
         */
        "description": string;
        /**
          * When `true`, the component is draggable.
         */
        "dragEnabled": boolean;
        /**
          * This internal property, managed by a containing calcite-shell, is used to inform the component if special configuration or styles are needed
         */
        "embedded": boolean;
        /**
          * When `true`, disables the default close on escape behavior.  By default, an open dialog can be dismissed by pressing the Esc key.
          * @see [Dialog Accessibility](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#accessibility)
         */
        "escapeDisabled": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
        /**
          * Specifies the kind of the component, which will style the top border.
         */
        "kind": Extract<"brand" | "danger" | "info" | "success" | "warning", Kind>;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * When `true`, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<DialogMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": DialogMessages;
        /**
          * When `true`, displays a scrim blocking interaction underneath the component.
         */
        "modal": boolean;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * When `true`, disables the closing of the component when clicked outside.
         */
        "outsideCloseDisabled": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Specifies the placement of the dialog.
         */
        "placement": DialogPlacement;
        /**
          * When `true`, the component is resizable.
         */
        "resizable": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Scrolls the component's content to a specified set of coordinates.
          * @example myCalciteFlowItem.scrollContentTo({   left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.   top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element   behavior: "auto" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value). });
          * @param options - allows specific coordinates to be defined.
          * @returns - promise that resolves once the content is scrolled to.
         */
        "scrollContentTo": (options?: ScrollToOptions) => Promise<void>;
        /**
          * Sets focus on the component's "close" button (the first focusable item).
          * @returns - A promise that is resolved when the operation has completed.
         */
        "setFocus": () => Promise<void>;
        /**
          * Updates the element(s) that are used within the focus-trap of the component.
         */
        "updateFocusTrapElements": () => Promise<void>;
        /**
          * Specifies the width of the component.
         */
        "widthScale": Scale;
    }
    interface CalciteDropdown {
        /**
          * When `true`, the component will remain open after a selection is made.  If the `selectionMode` of the selected `calcite-dropdown-item`'s containing `calcite-dropdown-group` is `"none"`, the component will always close.
         */
        "closeOnSelectDisabled": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies the component's fallback `calcite-dropdown-item` `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "flipPlacements": FlipPlacement[];
        /**
          * Specifies the maximum number of `calcite-dropdown-item`s to display before showing a scroller. Value must be greater than `0`, and does not include `groupTitle`'s from `calcite-dropdown-group`.
         */
        "maxItems": number;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the container element.
          * @default "bottom-start"
         */
        "placement": MenuPlacement;
        /**
          * Updates the position of the component.
          * @param delayed
         */
        "reposition": (delayed?: boolean) => Promise<void>;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteDropdownItemElement[];
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the action to open the component from the container element.
         */
        "type": "hover" | "click";
        /**
          * Specifies the width of the component.
         */
        "widthScale": Scale;
    }
    interface CalciteDropdownGroup {
        /**
          * Specifies and displays a group title.
         */
        "groupTitle": string;
        /**
          * Specifies the size of the component inherited from the parent `calcite-dropdown`, defaults to `m`.
         */
        "scale": Scale;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection, and  `"none"` does not allow any selections.
         */
        "selectionMode": Extract<"none" | "single" | "multiple", SelectionMode>;
    }
    interface CalciteDropdownItem {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.  Determines if the component will render as an anchor.
         */
        "href": string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": IconNameOrString;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the relationship to the linked document defined in `href`.
         */
        "rel": string;
        /**
          * Specifies the size of the component inherited from `calcite-dropdown`, defaults to `m`.
         */
        "scale": Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Specifies the selection mode inherited from `calcite-dropdown-group`, defaults to `single`: - `multiple` allows any number of selected items, - `single` allows only one selection (default), - `none` doesn't allow for any selection.
         */
        "selectionMode": Extract<"none" | "single" | "multiple", SelectionMode>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the frame or window to open the linked document.
         */
        "target": string;
    }
    interface CalciteFab {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance": Extract<"solid" | "outline-fill", Appearance>;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies an icon to display.
          * @default "plus"
         */
        "icon": IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the kind of the component, which will apply to border and background.
         */
        "kind": Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies text to accompany the component's icon.
         */
        "text": string;
        /**
          * When `true`, displays the `text` value in the component.
         */
        "textEnabled": boolean;
    }
    interface CalciteFilter {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Performs a filter on the component.  This method can be useful because filtering is delayed and asynchronous.
          * @param value - The filter text value.
          * @returns
         */
        "filter": (value?: string) => Promise<void>;
        /**
          * Specifies the properties to match against when filtering. This will only apply when `value` is an object. If not set, all properties will be matched.
         */
        "filterProps": string[];
        /**
          * The component's resulting items after filtering.
          * @readonly
         */
        "filteredItems": object[];
        /**
          * Defines the items to filter. The component uses the values as the starting point, and returns items  that contain the string entered in the input, using a partial match and recursive search.  This property is needed to conduct filtering.
         */
        "items": object[];
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<FilterMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": FilterMessages;
        /**
          * Specifies placeholder text for the input element.
         */
        "placeholder": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's value.
         */
        "value": string;
    }
    interface CalciteFlow {
        /**
          * Removes the currently active `calcite-flow-item`.
         */
        "back": () => Promise<HTMLCalciteFlowItemElement | FlowItemLikeElement>;
        /**
          * This property enables the component to consider other custom elements implementing flow-item's interface.
         */
        "customItemSelectors": string;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteFlowItem {
        /**
          * When provided, the method will be called before it is removed from its parent `calcite-flow`.
         */
        "beforeBack": () => Promise<void>;
        /**
          * Passes a function to run before the component closes.
         */
        "beforeClose": () => Promise<void>;
        /**
          * When `true`, displays a close button in the trailing side of the component's header.
         */
        "closable": boolean;
        /**
          * When `true`, the component will be hidden.
         */
        "closed": boolean;
        /**
          * Specifies the direction of the collapse.
         */
        "collapseDirection": CollapseDirection;
        /**
          * When `true`, hides the component's content area.
         */
        "collapsed": boolean;
        /**
          * When `true`, the component is collapsible.
         */
        "collapsible": boolean;
        /**
          * A description for the component.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * When `true`, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<FlowItemMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": FlowItemMessages;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Scrolls the component's content to a specified set of coordinates.
          * @example myCalciteFlowItem.scrollContentTo({   left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.   top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element   behavior: "auto" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value). });
          * @param options - allows specific coordinates to be defined.
          * @returns - promise that resolves once the content is scrolled to.
         */
        "scrollContentTo": (options?: ScrollToOptions) => Promise<void>;
        /**
          * Sets focus on the component.
          * @returns promise.
         */
        "setFocus": () => Promise<void>;
        /**
          * When `true`, displays a back button in the component's header.
         */
        "showBackButton": boolean;
    }
    interface CalciteGraph {
        /**
          * Array of values describing a single color stop ([offset, color, opacity]) These color stops should be sorted by offset value.
         */
        "colorStops": ColorStop[];
        /**
          * Array of tuples describing a single data point ([x, y]) These data points should be sorted by x-axis value.
         */
        "data": DataSeries;
        /**
          * End of highlight color if highlighting range.
         */
        "highlightMax": number;
        /**
          * Start of highlight color if highlighting range.
         */
        "highlightMin": number;
        /**
          * Highest point of the range.
         */
        "max": number;
        /**
          * Lowest point of the range.
         */
        "min": number;
    }
    interface CalciteHandle {
        /**
          * When `true`, disables unselecting the component when blurred.
         */
        "blurUnselectDisabled": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Value for the button title attribute.
         */
        "dragHandle": string;
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<HandleMessages>;
        /**
          * Made into a prop for testing purposes only.
          * @readonly
         */
        "messages": HandleMessages;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        "setPosition": number;
        "setSize": number;
    }
    interface CalciteIcon {
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "flipRtl": boolean;
        /**
          * Displays a specific icon.
          * @see [Icons](https://esri.github.io/calcite-ui-icons)
         */
        "icon": IconNameOrString;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Accessible name for the component.  It is recommended to set this value if your icon is semantic.
         */
        "textLabel": string;
    }
    interface CalciteInlineEditable {
        /**
          * Specifies a callback to be executed prior to disabling editing via the controls. When provided, the component's loading state will be handled automatically.
         */
        "afterConfirm": () => Promise<void>;
        /**
          * When `true` and `editingEnabled` is `true`, displays save and cancel controls on the component.
         */
        "controls": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, inline editing is enabled on the component.
         */
        "editingEnabled": boolean;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<InlineEditableMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": InlineEditableMessages;
        /**
          * Specifies the size of the component. Defaults to the scale of the wrapped `calcite-input` or the scale of the closest wrapping component with a set scale.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteInput {
        /**
          * Specifies a comma separated list of unique file type specifiers for limiting accepted file types. This property only has an effect when `type` is "file". Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "accept": string;
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment": Extract<"start" | "end", Alignment>;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete": string;
        /**
          * Adds global prop, missing from Stencil's `HTMLElement` type, see https://github.com/ionic-team/stencil/issues/5726
          * @ignore
         */
        "autofocus": boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value. The clear button shows by default for `"search"`, `"time"`, and `"date"` types, and will not display for the `"textarea"` type.
         */
        "clearable": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled": boolean;
        "editingEnabled": boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "enterKeyHint": string;
        /**
          * When `type` is `"file"`, specifies the component's selected files.
          * @mdn https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/files
         */
        "files": FileList | undefined;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon": IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "inputMode": string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * When `true`, uses locale formatting for numbers.
         */
        "localeFormat": boolean;
        /**
          * Specifies the maximum value for type "number".
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max": number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength": number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<InputMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": InputMessages;
        /**
          * Specifies the minimum value for `type="number"`.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min": number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength": number;
        /**
          * When `true`, the component can accept more than one value. This property only has an effect when `type` is "email" or "file". Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple)
         */
        "multiple": boolean;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name": string;
        /**
          * Specifies the placement of the buttons for `type="number"`.
         */
        "numberButtonType": InputPlacement;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies a regex pattern the component's `value` must match for validation. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "pattern": string;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder": string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText": string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Selects the text of the component's `value`.
         */
        "selectText": () => Promise<void>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the granularity the component's `value` must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step": number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText": string;
        /**
          * Specifies the component type.  Note that the following `type`s add type-specific icons by default: `"date"`, `"email"`, `"password"`, `"search"`, `"tel"`, `"time"`.
         */
        "type": | "color"
    | "date"
    | "datetime-local"
    | "email"
    | "file"
    | "image"
    | "month"
    | "number"
    | "password"
    | "search"
    | "tel"
    | "text"
    | "textarea"
    | "time"
    | "url"
    | "week";
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon": IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage": string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity": MutableValidityState;
        /**
          * The component's value.
         */
        "value": string;
    }
    interface CalciteInputDatePicker {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies the component's fallback `calcite-date-picker` `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "flipPlacements": FlipPlacement[];
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled": boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
        /**
          * Defines the layout of the component.
         */
        "layout": "horizontal" | "vertical";
        /**
          * Specifies the latest allowed date ("yyyy-mm-dd").
         */
        "max": string;
        /**
          * Specifies the latest allowed date as a full date object.
         */
        "maxAsDate": Date;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<InputDatePickerMessages & DatePickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": InputDatePickerMessages;
        /**
          * Specifies the earliest allowed date ("yyyy-mm-dd").
         */
        "min": string;
        /**
          * Specifies the earliest allowed date as a full date object.
         */
        "minAsDate": Date;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.
         */
        "numberingSystem": NumberingSystem;
        /**
          * When `true`, displays the `calcite-date-picker` component.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Specifies the placement of the `calcite-date-picker` relative to the component.
          * @default "bottom-start"
         */
        "placement": MenuPlacement;
        /**
          * When `true`, disables the default behavior on the third click of narrowing or extending the range. Instead starts a new range.
         */
        "proximitySelectionDisabled": boolean;
        /**
          * When `true`, activates a range for the component.
         */
        "range": boolean;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * Updates the position of the component.
          * @param delayed If true, the repositioning is delayed.
          * @returns void
         */
        "reposition": (delayed?: boolean) => Promise<void>;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": "s" | "m" | "l";
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon": IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage": string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity": MutableValidityState;
        /**
          * Selected date as a string in ISO format (`"yyyy-mm-dd"`).
         */
        "value": string | string[];
        /**
          * The component's value as a full date object.
         */
        "valueAsDate": Date | Date[];
    }
    interface CalciteInputMessage {
        /**
          * Specifies an icon to display.
         */
        "icon": IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
    }
    interface CalciteInputNumber {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment": Extract<"start" | "end", Alignment>;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete": string;
        /**
          * Adds global prop, missing from Stencil's `HTMLElement` type, see https://github.com/ionic-team/stencil/issues/5726
          * @ignore
         */
        "autofocus": boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value.
         */
        "clearable": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled": boolean;
        "editingEnabled": boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "enterKeyHint": string;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * Specifies an icon to display.
          * @futureBreaking Remove boolean type as it is not supported.
         */
        "icon": IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "inputMode": string;
        /**
          * When `true`, restricts the component to integer numbers only and disables exponential notation.
         */
        "integer": boolean;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label": string;
        /**
          * When `true`, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading": boolean;
        /**
          * Toggles locale formatting for numbers.
         */
        "localeFormat": boolean;
        /**
          * Specifies the maximum value.
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max": number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
          * @deprecated This property has no effect on the component.
         */
        "maxLength": number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<InputNumberMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": InputNumberMessages;
        /**
          * Specifies the minimum value.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min": number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
          * @deprecated This property has no effect on the component.
         */
        "minLength": number;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name": string;
        /**
          * Specifies the placement of the buttons.
         */
        "numberButtonType": InputPlacement;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder": string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText": string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Selects the text of the component's `value`.
         */
        "selectText": () => Promise<void>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the granularity that the component's value must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step": number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText": string;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon": IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage": string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity": MutableValidityState;
        /**
          * The component's value.
         */
        "value": string;
    }
    interface CalciteInputText {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment": Extract<"start" | "end", Alignment>;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete": string;
        /**
          * Adds global prop, missing from Stencil's `HTMLElement` type, see https://github.com/ionic-team/stencil/issues/5726
          * @ignore
         */
        "autofocus": boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value.
         */
        "clearable": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled": boolean;
        "editingEnabled": boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "enterKeyHint": string;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * Specifies an icon to display.
          * @futureBreaking Remove boolean type as it is not supported.
         */
        "icon": IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "inputMode": string;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label": string;
        /**
          * When `true`, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading": boolean;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength": number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<InputTextMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": InputTextMessages;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength": number;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name": string;
        /**
          * Specifies a regex pattern the component's `value` must match for validation. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "pattern": string;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder": string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText": string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Selects the text of the component's `value`.
         */
        "selectText": () => Promise<void>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Adds text to the end of the component.
         */
        "suffixText": string;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon": IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage": string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity": MutableValidityState;
        /**
          * The component's value.
         */
        "value": string;
    }
    interface CalciteInputTimePicker {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled": boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * Specifies the maximum value.
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#max)
         */
        "max": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<InputTimePickerMessages & TimePickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": InputTimePickerMessages;
        /**
          * Specifies the minimum value.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#min)
         */
        "min": string;
        /**
          * Specifies the name of the component on form submission.
         */
        "name": string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * When `true`, displays the `calcite-time-picker` component.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the popover will be positioned relative to the input.
         */
        "placement": LogicalPlacement;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * Updates the position of the component.
          * @param delayed If true, delay the repositioning.
         */
        "reposition": (delayed?: boolean) => Promise<void>;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the granularity the component's `value` must adhere to (in seconds).
         */
        "step": number;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon": IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage": string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity": MutableValidityState;
        /**
          * The time value in ISO (24-hour) format.
         */
        "value": string;
    }
    interface CalciteInputTimeZone {
        /**
          * When `true`, an empty value (`null`) will be allowed as a `value`.  When `false`, an offset or name value is enforced, and clearing the input or blurring will restore the last valid `value`.
         */
        "clearable": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * Specifies the component's maximum number of options to display before displaying a scrollbar.
         */
        "maxItems": number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<InputTimeZoneMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": InputTimeZoneMessages;
        /**
          * This specifies the type of `value` and the associated options presented to the user:  Using `"offset"` will provide options that show timezone offsets.  Using `"name"` will provide options that show the IANA time zone names.
          * @default "offset"
         */
        "mode": TimeZoneMode;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * Specifies how the offset will be displayed, where  `"user"` uses `UTC` or `GMT` depending on the user's locale, `"gmt"` always uses `GMT`, and `"utc"` always uses `UTC`.  This only applies to the `offset` mode.
          * @default "user"
         */
        "offsetStyle": OffsetStyle;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
         */
        "readOnly": boolean;
        /**
          * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.  It can be either a Date instance or a string in ISO format (`"YYYY-MM-DD"`, `"YYYY-MM-DDTHH:MM:SS.SSSZ"`).
          * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
         */
        "referenceDate": Date | string;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon": IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage": string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity": MutableValidityState;
        /**
          * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.  If no value is provided, the user's time zone offset will be selected by default.
          * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.
         */
        "value": string;
    }
    interface CalciteLabel {
        /**
          * Specifies the text alignment of the component.
         */
        "alignment": Alignment;
        /**
          * Specifies the `id` of the component the label is bound to. Use when the component the label is bound to does not reside within the component.
         */
        "for": string;
        /**
          * Defines the layout of the label in relation to the component. Use `"inline"` positions to wrap the label and component on the same line.
         */
        "layout": "inline" | "inline-space-between" | "default";
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
    }
    interface CalciteLink {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value: Without a value, the browser will suggest a filename/extension See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download.
         */
        "download": string | boolean;
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.
         */
        "href": string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": IconNameOrString;
        /**
          * Specifies the relationship to the linked document defined in `href`.
         */
        "rel": string;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the frame or window to open the linked document.
         */
        "target": string;
    }
    /**
     * A general purpose list that enables users to construct list items that conform to Calcite styling.
     */
    interface CalciteList {
        /**
          * When provided, the method will be called to determine whether the element can  move from the list.
         */
        "canPull": (detail: ListDragDetail) => boolean;
        /**
          * When provided, the method will be called to determine whether the element can be added from another list.
         */
        "canPut": (detail: ListDragDetail) => boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, `calcite-list-item`s are sortable via a draggable button.
         */
        "dragEnabled": boolean;
        /**
          * When `true`, an input appears at the top of the component that can be used by end users to filter `calcite-list-item`s.
         */
        "filterEnabled": boolean;
        /**
          * Placeholder text for the component's filter input field.
         */
        "filterPlaceholder": string;
        /**
          * Specifies the properties to match against when filtering. If not set, all properties will be matched (label, description, metadata, value).
         */
        "filterProps": string[];
        /**
          * Text for the component's filter input field.
         */
        "filterText": string;
        /**
          * The currently filtered `calcite-list-item` data.
          * @readonly
         */
        "filteredData": ItemData;
        /**
          * The currently filtered `calcite-list-item`s.
          * @readonly
         */
        "filteredItems": HTMLCalciteListItemElement[];
        /**
          * The list's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * Specifies an accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ListMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ListMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * One of the items within the list can be opened.
         */
        "openable": boolean;
        /**
          * The currently selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteListItemElement[];
        /**
          * Specifies the selection appearance - `"icon"` (displays a checkmark or dot) or `"border"` (displays a border).
         */
        "selectionAppearance": SelectionAppearance;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection,  `"single-persist"` allows one selection and prevents de-selection, and  `"none"` does not allow any selections.
         */
        "selectionMode": Extract<
    "none" | "multiple" | "single" | "single-persist",
    SelectionMode
  >;
        /**
          * Sets focus on the component's first focusable element.
          * @returns
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteListItem {
        /**
          * Sets the item as focusable. Only one item should be focusable within a list.
         */
        "active": boolean;
        /**
          * Sets the item to display a border.
         */
        "bordered": boolean;
        /**
          * When `true`, a close button is added to the component.
         */
        "closable": boolean;
        /**
          * When `true`, hides the component.
         */
        "closed": boolean;
        /**
          * A description for the component. Displays below the label text.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, the item is not draggable.
         */
        "dragDisabled": boolean;
        /**
          * When `true`, the component displays a draggable button.
         */
        "dragHandle": boolean;
        /**
          * When `true`, the component's drag handle is selected.
         */
        "dragSelected": boolean;
        /**
          * Hides the component when filtered.
         */
        "filterHidden": boolean;
        /**
          * The label text of the component. Displays above the description text.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ListItemMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ListItemMessages;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent `calcite-list`.
         */
        "metadata": Record<string, unknown>;
        /**
          * When `true`, the item is open to show child components.
         */
        "open": boolean;
        /**
          * When `true` and the parent `calcite-list`'s `selectionMode` is `"single"`, `"single-persist"', or `"multiple"`, the component is selected.
         */
        "selected": boolean;
        /**
          * Specifies the selection appearance - `"icon"` (displays a checkmark or dot) or `"border"` (displays a border).
         */
        "selectionAppearance": SelectionAppearance;
        /**
          * Specifies the selection mode - `"multiple"` (allow any number of selected items), `"single"` (allow one selected item), `"single-persist"` (allow one selected item and prevent de-selection), or `"none"` (no selected items).
         */
        "selectionMode": Extract<
    "none" | "multiple" | "single" | "single-persist",
    SelectionMode
  >;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Used to specify the aria-posinset attribute to define the number or position in the current set of list items for accessibility.
         */
        "setPosition": number;
        /**
          * Used to specify the aria-setsize attribute to define the number of items in the current set of list for accessibility.
         */
        "setSize": number;
        /**
          * When `true`, the component's content appears inactive.
         */
        "unavailable": boolean;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteListItemGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Hides the component when filtered.
         */
        "filterHidden": boolean;
        /**
          * The header text for all nested `calcite-list-item` rows.
         */
        "heading": string;
    }
    interface CalciteLoader {
        /**
          * Indicates whether the component is in a loading state.
         */
        "complete": boolean;
        /**
          * When `true`, displays smaller and appears to the left of the text.
         */
        "inline": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Text that displays under the component's indicator.
         */
        "text": string;
        /**
          * Specifies the component type.  Use `"indeterminate"` if finding actual progress value is impossible. Otherwise, use `"determinate"` to have the value indicate the progress or `"determinate-value"` to have the value label displayed along the progress.
         */
        "type": "indeterminate" | "determinate" | "determinate-value";
        /**
          * The component's value. Valid only for `"determinate"` indicators. Percent complete of 100.
         */
        "value": number;
    }
    interface CalciteMenu {
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the layout of the component.
         */
        "layout": Layout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<MenuMessages>;
        /**
          * Made into a prop for testing purposes only.
         */
        "messages": MenuMessages;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteMenuItem {
        /**
          * When `true`, the component is highlighted.
         */
        "active": boolean;
        /**
          * When `true`, the component displays a breadcrumb trail for use as a navigational aid.
         */
        "breadcrumb": boolean;
        /**
          * Specifies the URL destination of the component, which can be set as an absolute or relative path.
         */
        "href": string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": IconNameOrString;
        "isTopLevelItem": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        "layout": Layout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<MenuItemMessages>;
        /**
          * Made into a prop for testing purposes only.
         */
        "messages": MenuItemMessages;
        /**
          * When `true`, the component will display any slotted `calcite-menu-item` in an open overflow menu.
         */
        "open": boolean;
        /**
          * Defines the relationship between the `href` value and the current document.
          * @mdn [rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)
         */
        "rel": string;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies where to open the linked document defined in the `href` property.
          * @mdn [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)
         */
        "target": string;
        /**
          * Specifies the text to display.
         */
        "text": string;
        "topLevelMenuLayout": Layout;
    }
    interface CalciteMeter {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance": Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies the component's display, where `"single"` displays a single color and `"range"` displays a range of colors based on provided `low`, `high`, `min` or `max` values.
         */
        "fillType": MeterFillType;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * Specifies a high value.  When `fillType` is `"range"`, displays a different color when above the specified threshold.
         */
        "high": number;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies a low value.  When `fillType` is `"range"`, displays a different color when above the specified threshold.
         */
        "low": number;
        /**
          * Specifies the highest allowed value of the component.
         */
        "max": number;
        /**
          * Specifies the lowest allowed value of the component.
         */
        "min": number;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * When `rangeLabels` is `true`, specifies the format of displayed labels.
         */
        "rangeLabelType": MeterLabelType;
        /**
          * When `true`, displays the values of `high`, `low`, `min`, and `max`.
         */
        "rangeLabels": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * When `rangeLabelType` is `"units"` and either `valueLabel` or `rangeLabels` are `true`, displays beside the `value` and/or  `min` values.
         */
        "unitLabel": string;
        /**
          * Specifies the current value of the component.
         */
        "value": number;
        /**
          * When `true`, displays the current value.
         */
        "valueLabel": boolean;
        /**
          * When `valueLabel` is `true`, specifies the format of displayed label.
         */
        "valueLabelType": MeterLabelType;
    }
    /**
     * @deprecated Use the `calcite-dialog` component instead.
     */
    interface CalciteModal {
        /**
          * Passes a function to run before the component closes.
         */
        "beforeClose": (el: HTMLCalciteModalElement) => Promise<void>;
        /**
          * When `true`, disables the component's close button.
         */
        "closeButtonDisabled": boolean;
        /**
          * When `true`, prevents the component from expanding to the entire screen on mobile devices.
         */
        "docked": boolean;
        /**
          * This internal property, managed by a containing calcite-shell, is used to inform the component if special configuration or styles are needed
         */
        "embedded": boolean;
        /**
          * When `true`, disables the default close on escape behavior.
         */
        "escapeDisabled": boolean;
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled": boolean;
        /**
          * Sets the component to always be fullscreen. Overrides `widthScale` and `--calcite-modal-width` / `--calcite-modal-height`.
         */
        "fullscreen": boolean;
        /**
          * Specifies the kind of the component, which will apply to top border.
         */
        "kind": Extract<"brand" | "danger" | "info" | "success" | "warning", Kind>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ModalMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ModalMessages;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * We use an internal property to handle styles for when a modal is actually opened, not just when the open attribute is applied. This is a property because we need to apply styles to the host element and to keep the styles present while beforeClose is.
         */
        "opened": boolean;
        /**
          * When `true`, disables the closing of the component when clicked outside.
         */
        "outsideCloseDisabled": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets the scroll top of the component's content.
          * @param top
          * @param left
         */
        "scrollContent": (top?: number, left?: number) => Promise<void>;
        /**
          * Sets focus on the component's "close" button (the first focusable item).
         */
        "setFocus": () => Promise<void>;
        /**
          * Updates the element(s) that are used within the focus-trap of the component.
         */
        "updateFocusTrapElements": () => Promise<void>;
        /**
          * Specifies the width of the component.
         */
        "widthScale": Scale;
    }
    interface CalciteNavigation {
        /**
          * When `navigationAction` is `true`, specifies the label of the `calcite-action`.
         */
        "label": string;
        /**
          * When `true`, displays a `calcite-action` and emits a `calciteNavActionSelect` event on selection change.
         */
        "navigationAction": boolean;
        /**
          * When `navigationAction` is `true`, sets focus on the component's action element.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteNavigationLogo {
        /**
          * When `true`, the component is highlighted.
         */
        "active": boolean;
        /**
          * A description for the component, which displays below the `heading`.
         */
        "description": string;
        /**
          * Specifies heading text for the component, such as a product or organization name.
         */
        "heading": string;
        /**
          * Specifies the heading level of the component's heading for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
        /**
          * Specifies the URL destination of the component, which can be set as an absolute or relative path.
         */
        "href": string;
        /**
          * Specifies an icon to display.
         */
        "icon": IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Describes the appearance or function of the `thumbnail`. If no label is provided, context will not be provided to assistive technologies.
         */
        "label": string;
        /**
          * Defines the relationship between the `href` value and the current document.
          * @mdn [rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)
         */
        "rel": string;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies where to open the linked document defined in the `href` property.
          * @mdn [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)
         */
        "target": string;
        /**
          * Specifies the `src` to an image.
         */
        "thumbnail": string;
    }
    interface CalciteNavigationUser {
        /**
          * When `true`, the component is highlighted.
         */
        "active": boolean;
        /**
          * Specifies the full name of the user.
         */
        "fullName": string;
        /**
          * Describes the appearance of the avatar. If no label is provided, context will not be provided to assistive technologies.
         */
        "label": string;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * When `true`, hides the `fullName` and `username` contents.
         */
        "textDisabled": boolean;
        /**
          * Specifies the `src` to an image (remember to add a token if the user is private).
         */
        "thumbnail": string;
        /**
          * Specifies the unique id of the user.
         */
        "userId": string;
        /**
          * Specifies the username of the user.
         */
        "username": string;
    }
    interface CalciteNotice {
        /**
          * When `true`, a close button is added to the component.
         */
        "closable": boolean;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon": IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the kind of the component, which will apply to top border and icon.
         */
        "kind": Extract<
    "brand" | "danger" | "info" | "success" | "warning",
    Kind
  >;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<NoticeMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": NoticeMessages;
        /**
          * When `true`, the component is visible.
         */
        "open": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the width of the component.
         */
        "width": Width;
    }
    interface CalciteOption {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteOptionGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
    }
    interface CalcitePagination {
        /**
          * Set a specified page as active.
          * @param page
         */
        "goTo": (page: number | "start" | "end") => Promise<void>;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<PaginationMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": PaginationMessages;
        /**
          * Go to the next page of results.
         */
        "nextPage": () => Promise<void>;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies the number of items per page.
         */
        "pageSize": number;
        /**
          * Go to the previous page of results.
         */
        "previousPage": () => Promise<void>;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the starting item number.
         */
        "startItem": number;
        /**
          * Specifies the total number of items.
         */
        "totalItems": number;
    }
    interface CalcitePanel {
        /**
          * Passes a function to run before the component closes.
         */
        "beforeClose": () => Promise<void>;
        /**
          * When `true`, displays a close button in the trailing side of the header.
         */
        "closable": boolean;
        /**
          * When `true`, the component will be hidden.
         */
        "closed": boolean;
        /**
          * Specifies the direction of the collapse.
         */
        "collapseDirection": CollapseDirection;
        /**
          * When `true`, hides the component's content area.
         */
        "collapsed": boolean;
        /**
          * When `true`, the component is collapsible.
         */
        "collapsible": boolean;
        /**
          * A description for the component.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "menuFlipPlacements": FlipPlacement[];
        /**
          * When `true`, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen": boolean;
        /**
          * Determines where the action menu will be positioned.
         */
        "menuPlacement": LogicalPlacement;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<PanelMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": PanelMessages;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Scrolls the component's content to a specified set of coordinates.
          * @example myCalciteFlowItem.scrollContentTo({   left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.   top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element   behavior: "auto" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value). });
          * @param options - allows specific coordinates to be defined.
          * @returns - promise that resolves once the content is scrolled to.
         */
        "scrollContentTo": (options?: ScrollToOptions) => Promise<void>;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface CalcitePickList {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, an input appears at the top of the list that can be used by end users to filter items in the list.
         */
        "filterEnabled": boolean;
        /**
          * Placeholder text for the filter input field.
         */
        "filterPlaceholder": string;
        /**
          * Text for the filter input field.
         */
        "filterText": string;
        /**
          * The component's filtered data.
          * @readonly
         */
        "filteredData": ItemData1;
        /**
          * The component's filtered items.
          * @readonly
         */
        "filteredItems": HTMLCalcitePickListItemElement[];
        /**
          * Returns the component's selected `calcite-pick-list-item`s.
         */
        "getSelectedItems": () => Promise<Map<string, HTMLCalcitePickListItemElement>>;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Similar to standard radio buttons and checkboxes. When `true`, a user can select multiple `calcite-pick-list-item`s at a time. When `false`, only a single `calcite-pick-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple": boolean;
        /**
          * When `true` and single selection is enabled, the selection changes when navigating `calcite-pick-list-item`s via keyboard.
         */
        "selectionFollowsFocus": boolean;
        /**
          * Sets focus on the component's first focusable element.
          * @param focusId
         */
        "setFocus": (focusId?: ListFocusId) => Promise<void>;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface CalcitePickListGroup {
        /**
          * Specifies the title for all nested `calcite-pick-list-item`s.
         */
        "groupTitle": string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface CalcitePickListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description": string;
        /**
          * When `false`, the component cannot be deselected by user interaction.
         */
        "deselectDisabled": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are `"circle"`, `"square"`, `"grip"` or `null`.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-design-system/blob/dev/src/components/pick-list/resources.ts#L5)
         */
        "icon": ICON_TYPES | null;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<PickListItemMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": PickListItemMessages;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata": Record<string, unknown>;
        "nonInteractive": boolean;
        /**
          * When `true`, displays a remove action that removes the item from the list.
         */
        "removable": boolean;
        /**
          * When `true`, selects an item. Toggles when an item is checked/unchecked.
         */
        "selected": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Toggles the selection state. By default this won't trigger an event. The first argument allows the value to be coerced, rather than swapping values.
          * @param coerce
         */
        "toggleSelected": (coerce?: boolean) => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalcitePopover {
        /**
          * When `true`, clicking outside of the component automatically closes open `calcite-popover`s.
         */
        "autoClose": boolean;
        /**
          * When `true`, displays a close button within the component.
         */
        "closable": boolean;
        /**
          * When `true`, prevents flipping the component's placement when overlapping its `referenceElement`.
         */
        "flipDisabled": boolean;
        /**
          * Specifies the component's fallback `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "flipPlacements": FlipPlacement[];
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<PopoverMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": PopoverMessages;
        /**
          * Offsets the position of the popover away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance": number;
        /**
          * Offsets the position of the component along the `referenceElement`.
         */
        "offsetSkidding": number;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement": LogicalPlacement;
        /**
          * When `true`, removes the caret pointer.
         */
        "pointerDisabled": boolean;
        /**
          * The `referenceElement` used to position the component according to its `placement` value. Setting to an `HTMLElement` is preferred so the component does not need to query the DOM. However, a string `id` of the reference element can also be used.
         */
        "referenceElement": ReferenceElement | string;
        /**
          * Updates the position of the component.
          * @param delayed
         */
        "reposition": (delayed?: boolean) => Promise<void>;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * When `true`, disables automatically toggling the component when its `referenceElement` has been triggered.  This property can be set to `true` to manage when the component is open.
         */
        "triggerDisabled": boolean;
        /**
          * Updates the element(s) that are used within the focus-trap of the component.
         */
        "updateFocusTrapElements": () => Promise<void>;
    }
    interface CalciteProgress {
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true` and for `"indeterminate"` progress bars, reverses the animation direction.
         */
        "reversed": boolean;
        /**
          * Text that displays under the component's indicator.
         */
        "text": string;
        /**
          * Specifies the component type.  Use `"indeterminate"` if finding actual progress value is impossible.
         */
        "type": "indeterminate" | "determinate";
        /**
          * When `type` is `"determinate"`, the component's progress value with a range of 0.0 - 1.0.
         */
        "value": number;
    }
    interface CalciteRadioButton {
        /**
          * When `true`, the component is checked.
         */
        "checked": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        "emitCheckedChange": () => Promise<void>;
        /**
          * The focused state of the component.
         */
        "focused": boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * The `id` of the component. When omitted, a globally unique identifier is used.
         */
        "guid": string;
        /**
          * The hovered state of the component.
         */
        "hovered": boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Specifies the name of the component. Can be inherited from `calcite-radio-button-group`.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * When `true`, the component must have a value selected from the `calcite-radio-button-group` in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component inherited from the `calcite-radio-button-group`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteRadioButtonGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Defines the layout of the component.
         */
        "layout": Extract<"horizontal" | "vertical" | "grid", Layout>;
        /**
          * Specifies the name of the component on form submission. Must be unique to other component instances.
         */
        "name": string;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected item.
          * @readonly
         */
        "selectedItem": HTMLCalciteRadioButtonElement;
        /**
          * Sets focus on the fist focusable `calcite-radio-button` element in the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the validation message.
         */
        "status": Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon": IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage": string;
    }
    interface CalciteRating {
        /**
          * Specifies a cumulative average from previous ratings to display.
         */
        "average": number;
        /**
          * Specifies the number of previous ratings to display.
         */
        "count": number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<RatingMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": RatingMessages;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
         */
        "readOnly": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * When `true`, and if available, displays the `average` and/or `count` data summary in a `calcite-chip`.
         */
        "showChip": boolean;
        /**
          * The component's value.
         */
        "value": number;
    }
    interface CalciteScrim {
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ScrimMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ScrimMessages;
    }
    interface CalciteSegmentedControl {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance": Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * Defines the layout of the component.
         */
        "layout": Extract<"horizontal" | "vertical", Layout>;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * The component's selected item `HTMLElement`.
          * @readonly
         */
        "selectedItem": HTMLCalciteSegmentedControlItemElement;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the validation message.
         */
        "status": Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon": IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage": string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity": MutableValidityState;
        /**
          * The component's `selectedItem` value.
         */
        "value": string;
        /**
          * Specifies the width of the component.
         */
        "width": Extract<"auto" | "full", Width>;
    }
    interface CalciteSegmentedControlItem {
        /**
          * Specifies the appearance style of the component inherited from parent `calcite-segmented-control`, defaults to `solid`.
         */
        "appearance": Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, the component is checked.
         */
        "checked": boolean;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": IconNameOrString;
        /**
          * Defines the layout of the component inherited from parent `calcite-segmented-control`, defaults to `horizontal`.
         */
        "layout": Extract<"horizontal" | "vertical" | "grid", Layout>;
        /**
          * Specifies the size of the component inherited from the `calcite-segmented-control`, defaults to `m`.
         */
        "scale": Scale;
        /**
          * The component's value.
         */
        "value": any | null;
    }
    interface CalciteSelect {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * The component's selected option `HTMLElement`.
          * @readonly
         */
        "selectedOption": HTMLCalciteOptionElement;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon": IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage": string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity": MutableValidityState;
        /**
          * The component's `selectedOption` value.
         */
        "value": string;
        /**
          * Specifies the width of the component.
         */
        "width": Width;
    }
    interface CalciteSheet {
        /**
          * Passes a function to run before the component closes.
          * @returns
         */
        "beforeClose": (el: HTMLCalciteSheetElement) => Promise<void>;
        /**
          * Specifies the display mode - `"float"` (content is separated detached), or `"overlay"` (displays on top of center content).
         */
        "displayMode": DisplayMode;
        /**
          * This internal property, managed by a containing calcite-shell, is used to inform the component if special configuration or styles are needed
         */
        "embedded": boolean;
        /**
          * When `true`, disables the default close on escape behavior.
         */
        "escapeDisabled": boolean;
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled": boolean;
        /**
          * When `position` is `"block-start"` or `"block-end"`, specifies the height of the component.
         */
        "heightScale": Scale;
        /**
          * Specifies the label of the component.
         */
        "label": string;
        /**
          * When `true`, displays and positions the component.
         */
        "open": boolean;
        /**
          * We use an internal property to handle styles for when a modal is actually opened, not just when the open attribute is applied. This is a property because we need to apply styles to the host element and to keep the styles present while beforeClose is .
         */
        "opened": boolean;
        /**
          * When `true`, disables the closing of the component when clicked outside.
         */
        "outsideCloseDisabled": boolean;
        /**
          * Determines where the component will be positioned.
         */
        "position": LogicalFlowPosition;
        /**
          * Sets focus on the component's "close" button - the first focusable item.
         */
        "setFocus": () => Promise<void>;
        /**
          * Updates the element(s) that are used within the focus-trap of the component.
         */
        "updateFocusTrapElements": () => Promise<void>;
        /**
          * When `position` is `"inline-start"` or `"inline-end"`, specifies the width of the component.
         */
        "widthScale": Scale;
    }
    interface CalciteShell {
        /**
          * Positions the center content behind any `calcite-shell-panel`s.
         */
        "contentBehind": boolean;
    }
    interface CalciteShellCenterRow {
        /**
          * When `true`, the content area displays like a floating panel.
         */
        "detached": boolean;
        /**
          * Specifies the maximum height of the component.
         */
        "heightScale": Scale;
        /**
          * Specifies the component's position. Will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "position": Extract<"start" | "end", Position>;
    }
    interface CalciteShellPanel {
        /**
          * When `true`, hides the component's content area.
         */
        "collapsed": boolean;
        /**
          * When `true`, the content area displays like a floating panel.
          * @deprecated Use `displayMode` instead.
         */
        "detached": boolean;
        /**
          * When `displayMode` is `float-content` or `float`, specifies the maximum height of the component.
          * @deprecated Use `heightScale` instead.
         */
        "detachedHeightScale": Scale;
        /**
          * Specifies the display mode of the component, where:  `"dock"` displays at full height adjacent to center content,  `"overlay"` displays at full height on top of center content, and  `"float"` [Deprecated] does not display at full height with content separately detached from `calcite-action-bar` on top of center content.  `"float-content"` does not display at full height with content separately detached from `calcite-action-bar` on top of center content.  `"float-all"` detaches the `calcite-panel` and `calcite-action-bar` on top of center content.
         */
        "displayMode": DisplayMode1;
        /**
          * When `layout` is `horizontal`, specifies the maximum height of the component.
         */
        "heightScale": Scale;
        /**
          * The direction of the component.
         */
        "layout": Extract<"horizontal" | "vertical", Layout>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ShellPanelMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ShellPanelMessages;
        /**
          * Specifies the component's position. Will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "position": Extract<"start" | "end", Position>;
        /**
          * When `true` and `displayMode` is not `float-content` or `float`, the component's content area is resizable.
         */
        "resizable": boolean;
        /**
          * When `layout` is `vertical`, specifies the width of the component.
         */
        "widthScale": Scale;
    }
    interface CalciteSlider {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Used to configure where the fill is placed along the slider track in relation to the value handle.  Range mode will always display the fill between the min and max handles.
         */
        "fillPlacement": "start" | "none" | "end";
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * When `true`, indicates a histogram is present.
         */
        "hasHistogram": boolean;
        /**
          * A list of the histogram's x,y coordinates within the component's `min` and `max`. Displays above the component's track.
          * @see [DataSeries](https://github.com/Esri/calcite-design-system/blob/dev/src/components/graph/interfaces.ts#L5)
         */
        "histogram": DataSeries;
        /**
          * A set of single color stops for a histogram, sorted by offset ascending.
         */
        "histogramStops": ColorStop[];
        /**
          * When specified, allows users to customize handle labels.
         */
        "labelFormatter": (
    value: number,
    type: "value" | "min" | "max" | "tick",
    defaultFormatter: (value: number) => string,
  ) => string | undefined;
        /**
          * When `true`, displays label handles with their numeric value.
         */
        "labelHandles": boolean;
        /**
          * When `true` and `ticks` is specified, displays label tick marks with their numeric value.
         */
        "labelTicks": boolean;
        /**
          * The component's maximum selectable value.
         */
        "max": number;
        /**
          * For multiple selections, the accessible name for the second handle, such as `"Temperature, upper bound"`.
         */
        "maxLabel": string;
        /**
          * For multiple selections, the component's upper value.
         */
        "maxValue": number;
        /**
          * The component's minimum selectable value.
         */
        "min": number;
        /**
          * Accessible name for first (or only) handle, such as `"Temperature, lower bound"`.
         */
        "minLabel": string;
        /**
          * For multiple selections, the component's lower value.
         */
        "minValue": number;
        /**
          * When `true`, the slider will display values from high to low.  Note that this value will be ignored if the slider has an associated histogram.
         */
        "mirrored": boolean;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies the interval to move with the page up, or page down keys.
         */
        "pageStep": number;
        /**
          * When `true`, sets a finer point for handles.
         */
        "precise": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * When `true`, enables snap selection in coordination with `step` via a mouse.
         */
        "snap": boolean;
        /**
          * Specifies the interval to move with the up, or down keys.
         */
        "step": number;
        /**
          * Displays tick marks on the number line at a specified interval.
         */
        "ticks": number;
        /**
          * The component's value.
         */
        "value": null | number | number[];
    }
    interface CalciteSortableList {
        /**
          * When provided, the method will be called to determine whether the element can  move from the list.
         */
        "canPull": (detail: DragDetail) => boolean;
        /**
          * When provided, the method will be called to determine whether the element can be added from another list.
         */
        "canPut": (detail: DragDetail) => boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * Specifies which items inside the element should be draggable.
         */
        "dragSelector"?: string;
        /**
          * The list's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * The selector for the handle elements.
         */
        "handleSelector": string;
        /**
          * Indicates the horizontal or vertical orientation of the component.
         */
        "layout": Extract<"horizontal" | "vertical" | "grid", Layout>;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
    }
    interface CalciteSplitButton {
        /**
          * When `true`, the component is active.
         */
        "active": boolean;
        /**
          * Specifies the appearance style of the component.
         */
        "appearance": Extract<
    "outline" | "outline-fill" | "solid" | "transparent",
    Appearance
  >;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies the icon used for the dropdown menu.
         */
        "dropdownIconType": DropdownIconType;
        /**
          * Accessible name for the dropdown menu.
         */
        "dropdownLabel": string;
        /**
          * Specifies the component's fallback slotted content `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "flipPlacements": FlipPlacement[];
        /**
          * Specifies the kind of the component, which will apply to border and background, if applicable.
         */
        "kind": Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * When `true`, a busy indicator is displayed on the primary button.
         */
        "loading": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the container element.
          * @default "bottom-end"
         */
        "placement": MenuPlacement;
        /**
          * Specifies an icon to display at the end of the primary button.
         */
        "primaryIconEnd": IconNameOrString;
        /**
          * Displays the `primaryIconStart` and/or `primaryIconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "primaryIconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the primary button.
         */
        "primaryIconStart": IconNameOrString;
        /**
          * Accessible name for the primary button.
         */
        "primaryLabel": string;
        /**
          * Text displayed in the primary button.
         */
        "primaryText": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the width of the component.
         */
        "width": Width;
    }
    interface CalciteStack {
        /**
          * When `true`, content interaction is prevented and displayed with lower opacity.
         */
        "disabled": boolean;
    }
    interface CalciteStepper {
        /**
          * Set the last `calcite-stepper-item` as active.
         */
        "endStep": () => Promise<void>;
        /**
          * Set a specified `calcite-stepper-item` as active.
          * @param step
         */
        "goToStep": (step: number) => Promise<void>;
        /**
          * When `true`, displays a status icon in the `calcite-stepper-item` heading.
         */
        "icon": boolean;
        /**
          * Defines the layout of the component.
         */
        "layout": StepperLayout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<StepperMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": StepperMessages;
        /**
          * Set the next `calcite-stepper-item` as active.
         */
        "nextStep": () => Promise<void>;
        /**
          * When `true`, displays the step number in the `calcite-stepper-item` heading.
         */
        "numbered": boolean;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Set the previous `calcite-stepper-item` as active.
         */
        "prevStep": () => Promise<void>;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected item.
          * @readonly
         */
        "selectedItem": HTMLCalciteStepperItemElement;
        /**
          * Set the first `calcite-stepper-item` as active.
         */
        "startStep": () => Promise<void>;
    }
    interface CalciteStepperItem {
        /**
          * When `true`, the step has been completed.
         */
        "complete": boolean;
        /**
          * A description for the component. Displays below the header text.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, the component contains an error that requires resolution from the user.
         */
        "error": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * When `true`, displays a status icon in the `calcite-stepper-item` heading inherited from parent `calcite-stepper`.
         */
        "icon": boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Specifies the layout of the `calcite-stepper-item` inherited from parent `calcite-stepper`, defaults to `horizontal`.
         */
        "layout": StepperLayout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<StepperItemMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": StepperItemMessages;
        /**
          * When `true`, displays the step number in the `calcite-stepper-item` heading inherited from parent `calcite-stepper`.
         */
        "numbered": boolean;
        "numberingSystem": NumberingSystem;
        /**
          * Specifies the size of the component inherited from the `calcite-stepper`, defaults to `m`.
         */
        "scale": Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteSwitch {
        /**
          * When `true`, the component is checked.
         */
        "checked": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteTab {
        /**
          * Returns the index of the component item within the tab array.
         */
        "getTabIndex": () => Promise<number>;
        /**
          * Specifies the size of the component inherited from the parent `calcite-tabs`, defaults to `m`.
         */
        "scale": Scale;
        /**
          * When `true`, the component's contents are selected.  Only one tab can be selected within the `calcite-tabs` parent.
         */
        "selected": boolean;
        /**
          * Specifies a unique name for the component.  When specified, use the same value on the `calcite-tab-title`.
         */
        "tab": string;
        /**
          * @param tabIds
          * @param titleIds
         */
        "updateAriaInfo": (tabIds?: string[], titleIds?: string[]) => Promise<void>;
    }
    interface CalciteTabNav {
        "bordered": boolean;
        "layout": TabLayout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TabNavMessages>;
        /**
          * Made into a prop for testing purposes only.
         */
        "messages": TabNavMessages;
        /**
          * Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to, and is inherited from the parent `calcite-tabs`, defaults to `top`.
         */
        "position": TabPosition;
        /**
          * Specifies the size of the component inherited from the parent `calcite-tabs`, defaults to `m`.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected `calcite-tab-title`.
          * @readonly
         */
        "selectedTitle": HTMLCalciteTabTitleElement;
        /**
          * Specifies the name when saving selected `calcite-tab` data to `localStorage`.
         */
        "storageId": string;
        /**
          * Specifies text to update multiple components to keep in sync if one changes.
         */
        "syncId": string;
    }
    interface CalciteTabTitle {
        /**
          * This activates a tab in order for it and its associated tab-title be selected.
          * @param userTriggered - when `true`, user-interaction events will be emitted in addition to internal events
         */
        "activateTab": (userTriggered?: boolean) => Promise<void>;
        "bordered": boolean;
        /**
          * When `true`, a close button is added to the component.
         */
        "closable": boolean;
        /**
          * When `true`, does not display or position the component.
         */
        "closed": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        "getTabIdentifier": () => Promise<TabID>;
        /**
          * Returns the index of the title within the `calcite-tab-nav`.
         */
        "getTabIndex": () => Promise<number>;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd": IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": IconNameOrString;
        "layout": TabLayout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TabTitleMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TabTitleMessages;
        /**
          * Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to, and is inherited from the parent `calcite-tabs`, defaults to `top`.
         */
        "position": TabPosition;
        /**
          * Specifies the size of the component inherited from the parent `calcite-tabs`, defaults to `m`.
         */
        "scale": Scale;
        /**
          * When `true`, the component and its respective `calcite-tab` contents are selected.  Only one tab can be selected within the `calcite-tabs` parent.
         */
        "selected": boolean;
        /**
          * Specifies a unique name for the component.  When specified, use the same value on the `calcite-tab`.
         */
        "tab": string;
        /**
          * @param tabIds
          * @param titleIds
         */
        "updateAriaInfo": (tabIds?: string[], titleIds?: string[]) => Promise<void>;
    }
    interface CalciteTable {
        /**
          * When `true`, displays borders in the component.
         */
        "bordered": boolean;
        /**
          * Specifies an accessible title for the component.
         */
        "caption": string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * When `"interactive"`, allows focus and keyboard navigation of `table-header`s and `table-cell`s.  When `"static"`, prevents focus and keyboard navigation of `table-header`s and `table-cell`s when assistive technologies are not active. Selection affordances and slotted content within `table-cell`s remain focusable.
         */
        "interactionMode": TableInteractionMode;
        /**
          * Specifies the layout of the component.
         */
        "layout": TableLayout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TableMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TableMessages;
        /**
          * When `true`, displays the position of the row in numeric form.
         */
        "numbered": boolean;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Specifies the page size of the component. When `true`, renders `calcite-pagination`.
         */
        "pageSize": number;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteTableRowElement[];
        /**
          * Specifies the display of the selection interface when `selection-mode` is not `"none"`. When `"none"`, content slotted the `selection-actions` slot will not be displayed.
         */
        "selectionDisplay": TableSelectionDisplay;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection, and  `"none"` does not allow any selections.
         */
        "selectionMode": Extract<"none" | "multiple" | "single", SelectionMode>;
        /**
          * When `true`, displays striped styling in the component.
         */
        "striped": boolean;
        /**
          * When `true`, displays striped styling in the component.
          * @deprecated Use the `striped` property instead.
         */
        "zebra": boolean;
    }
    interface CalciteTableCell {
        /**
          * Specifies the alignment of the component.
         */
        "alignment": Alignment;
        /**
          * Specifies the number of columns the component should span.
         */
        "colSpan": number;
        /**
          * When true, prevents user interaction.  Notes:  This prop should use the
         */
        "disabled": boolean;
        "interactionMode": TableInteractionMode;
        "lastCell": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TableCellMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TableCellMessages;
        "numberCell": boolean;
        "parentRowAlignment": Alignment;
        "parentRowIsSelected": boolean;
        "parentRowPositionLocalized": string;
        "parentRowType": RowType;
        "positionInRow": number;
        "readCellContentsToAT": boolean;
        /**
          * Specifies the number of rows the component should span.
         */
        "rowSpan": number;
        "scale": Scale;
        "selectionCell": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteTableHeader {
        /**
          * Specifies the alignment of the component.
         */
        "alignment": Alignment;
        "bodyRowCount": number;
        /**
          * Specifies the number of columns the component should span.
         */
        "colSpan": number;
        /**
          * A description to display beneath heading content.
         */
        "description": string;
        /**
          * A heading to display above description content.
         */
        "heading": string;
        "interactionMode": TableInteractionMode;
        "lastCell": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TableHeaderMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TableHeaderMessages;
        "numberCell": boolean;
        "parentRowAlignment": Alignment;
        "parentRowIsSelected": boolean;
        "parentRowType": RowType;
        "positionInRow": number;
        /**
          * Specifies the number of rows the component should span.
         */
        "rowSpan": number;
        "scale": Scale;
        "selectedRowCount": number;
        "selectedRowCountLocalized": string;
        "selectionCell": boolean;
        "selectionMode": SelectionMode;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteTableRow {
        /**
          * Specifies the alignment of the component.
         */
        "alignment": Alignment;
        "bodyRowCount": number;
        "cellCount": number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        "interactionMode": TableInteractionMode;
        "lastVisibleRow": boolean;
        "numbered": boolean;
        "positionAll": number;
        "positionSection": number;
        "positionSectionLocalized": string;
        "readCellContentsToAT": boolean;
        "rowType": RowType;
        "scale": Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        "selectedRowCount": number;
        "selectedRowCountLocalized": string;
        "selectionMode": Extract<"multiple" | "single" | "none", SelectionMode>;
    }
    interface CalciteTabs {
        /**
          * When `true`, the component will display with a folder style menu.
         */
        "bordered": boolean;
        /**
          * Specifies the layout of the `calcite-tab-nav`, justifying the `calcite-tab-title`s to the start (`"inline"`), or across and centered (`"center"`).
         */
        "layout": TabLayout;
        /**
          * Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to the `calcite-tabs`.
         */
        "position": TabPosition;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
    }
    interface CalciteTextArea {
        /**
          * Specifies the component's number of columns.
          * @mdn [cols](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols)
         */
        "columns": number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled": boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form": string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the maximum number of characters allowed.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-maxlength)
         */
        "maxLength": number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TextAreaMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TextAreaMessages;
        /**
          * Specifies the minimum number of characters allowed.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-minlength)
         */
        "minLength": number;
        /**
          * Specifies the name of the component.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-name)
         */
        "name": string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies the placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-placeholder)
         */
        "placeholder": string;
        /**
          * When `true`, the component's `value` can be read, but cannot be modified.
          * @readonly 
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
          * @mdn [required]https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required
         */
        "required": boolean;
        /**
          * Specifies if the component is resizable.
         */
        "resize": "both" | "horizontal" | "vertical" | "none";
        /**
          * Specifies the component's number of rows.
          * @mdn [rows](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows)
         */
        "rows": number;
        /**
          * Specifies the size of the component.
         */
        "scale": "l" | "m" | "s";
        /**
          * Selects the text of the component's `value`.
         */
        "selectText": () => Promise<void>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon": IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage": string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity": MutableValidityState;
        /**
          * The component's value.
         */
        "value": string;
        /**
          * Specifies the wrapping mechanism for the text.
          * @mdn [wrap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-wrap)
         */
        "wrap": "soft" | "hard";
    }
    interface CalciteTile {
        /**
          * When `true`, the component is active.
          * @deprecated
         */
        "active": boolean;
        /**
          * Specifies the alignment of the Tile's content.
         */
        "alignment": Exclude<Alignment, "end">;
        /**
          * A description for the component, which displays below the heading.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The component's embed mode.  When `true`, renders without a border and padding for use by other components.
          * @deprecated No longer necessary.
         */
        "embed": boolean;
        /**
          * The component header text, which displays between the icon and description.
         */
        "heading": string;
        /**
          * When embed is `"false"`, the URL for the component.
         */
        "href": string;
        /**
          * Specifies an icon to display.
         */
        "icon": IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * When true, enables the tile to be focused, and allows the `calciteTileSelect` to emit. This is set to `true` by a parent Tile Group component.
         */
        "interactive": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Defines the layout of the component.  Use `"horizontal"` for rows, and `"vertical"` for a single column.
         */
        "layout": Extract<Layout, "horizontal" | "vertical">;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * When `true` and the parent's `selectionMode` is `"single"`, `"single-persist"', or `"multiple"`, the component is selected.
         */
        "selected": boolean;
        /**
          * Specifies the selection appearance, where:  - `"icon"` (displays a checkmark or dot), or - `"border"` (displays a border).  This property is set by the parent tile-group.
         */
        "selectionAppearance": SelectionAppearance1;
        /**
          * Specifies the selection mode, where:  - `"multiple"` (allows any number of selected items), - `"single"` (allows only one selected item), - `"single-persist"` (allows only one selected item and prevents de-selection), - `"none"` (allows no selected items).  This property is set by the parent tile-group.
         */
        "selectionMode": Extract<
    "multiple" | "none" | "single" | "single-persist",
    SelectionMode
  >;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteTileGroup {
        /**
          * Specifies the alignment of each `calcite-tile`'s content.
         */
        "alignment": Exclude<Alignment, "end">;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Defines the layout of the component.  Use `"horizontal"` for rows, and `"vertical"` for a single column.
         */
        "layout": Extract<Layout, "horizontal" | "vertical">;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteTileElement[];
        /**
          * Specifies the selection appearance, where:  - `"icon"` (displays a checkmark or dot), or - `"border"` (displays a border).
         */
        "selectionAppearance": SelectionAppearance1;
        /**
          * Specifies the selection mode, where:  - `"multiple"` (allows any number of selected items), - `"single"` (allows only one selected item), - `"single-persist"` (allows only one selected item and prevents de-selection), - `"none"` (allows no selected items).
         */
        "selectionMode": Extract<
    "multiple" | "none" | "single" | "single-persist",
    SelectionMode
  >;
    }
    /**
     * @deprecated Use the `calcite-tile` component instead.
     */
    interface CalciteTileSelect {
        /**
          * When `true`, the component is checked.
         */
        "checked": boolean;
        /**
          * A description for the component, which displays below the heading.
         */
        "description": string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The component header text, which displays between the icon and description.
         */
        "heading": string;
        /**
          * Specifies an icon to display.
         */
        "icon": IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * When `inputEnabled` is `true`, specifies the placement of the interactive input on the component.
         */
        "inputAlignment": Extract<"end" | "start", Alignment>;
        /**
          * When `true`, displays an interactive input based on the `type` property.
         */
        "inputEnabled": boolean;
        /**
          * Specifies the name of the component on form submission.
         */
        "name": any;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the selection mode of the component, where:  `"radio"` is for single selection, and  `"checkbox"` is for multiple selections.
         */
        "type": TileSelectType;
        /**
          * The component's value.
         */
        "value": any;
        /**
          * Specifies the width of the component.
         */
        "width": Extract<"auto" | "full", Width>;
    }
    /**
     * @deprecated Use the `calcite-tile-group` component instead.
     */
    interface CalciteTileSelectGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Defines the layout of the component.  Use `"horizontal"` for rows, and `"vertical"` for a single column.
         */
        "layout": TileSelectGroupLayout;
    }
    interface CalciteTimePicker {
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TimePickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TimePickerMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem": NumberingSystem;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component's first focusable element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the granularity the `value` must adhere to (in seconds).
         */
        "step": number;
        /**
          * The component's value in UTC (always 24-hour format).
         */
        "value": string;
    }
    /**
     * @deprecated Use the `calcite-card`, `calcite-notice`, `calcite-panel`, or `calcite-tile` component instead.
     */
    interface CalciteTip {
        /**
          * When `true`, the close button is not present on the component.
         */
        "closeDisabled": boolean;
        /**
          * When `true`, the component does not display.
         */
        "closed": boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TipMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TipMessages;
        /**
          * When `true`, the component is selected if it has a parent `calcite-tip-manager`.  Only one tip can be selected within the `calcite-tip-manager` parent.
         */
        "selected": boolean;
    }
    /**
     * @deprecated Use the `calcite-carousel` and `calcite-carousel-item` components instead.
     */
    interface CalciteTipGroup {
        /**
          * The component header text for all nested `calcite-tip`s.
         */
        "groupTitle": string;
    }
    /**
     * @deprecated Use the `calcite-carousel` and `calcite-carousel-item` components instead.
     */
    interface CalciteTipManager {
        /**
          * When `true`, does not display or position the component.
         */
        "closed": boolean;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel": HeadingLevel;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<TipManagerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": TipManagerMessages;
        /**
          * Selects the next `calcite-tip` to display.
         */
        "nextTip": () => Promise<void>;
        /**
          * Selects the previous `calcite-tip` to display.
         */
        "previousTip": () => Promise<void>;
    }
    interface CalciteTooltip {
        /**
          * Closes the component when the `referenceElement` is clicked.
         */
        "closeOnClick": boolean;
        /**
          * Accessible name for the component.
          * @deprecated No longer necessary. Overrides the context of the component's description, which could confuse assistive technology users.
         */
        "label": string;
        /**
          * Offset the position of the component away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance": number;
        /**
          * Offset the position of the component along the `referenceElement`.
         */
        "offsetSkidding": number;
        /**
          * When `true`, the component is open.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  The `"fixed"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement": LogicalPlacement;
        /**
          * The `referenceElement` to position the component according to its `"placement"` value.  Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.  However, a string ID of the reference element can be used.
         */
        "referenceElement": ReferenceElement | string;
        /**
          * Updates the position of the component.
          * @param delayed
         */
        "reposition": (delayed?: boolean) => Promise<void>;
    }
    interface CalciteTree {
        "child": boolean;
        /**
          * When `true`, displays indentation guide lines.
         */
        "lines": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems": HTMLCalciteTreeItemElement[];
        /**
          * Specifies the selection mode of the component, where:  `"ancestors"` displays with a checkbox and allows any number of selections from corresponding parent and child selections,  `"children"` allows any number of selections from one parent from corresponding parent and child selections,  `"multichildren"` allows any number of selections from corresponding parent and child selections,  `"multiple"` allows any number of selections,  `"none"` allows no selections,  `"single"` allows one selection, and  `"single-persist"` allows and requires one selection.
          * @default "single"
         */
        "selectionMode": SelectionMode;
    }
    interface CalciteTreeItem {
        "depth": number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded": boolean;
        "hasChildren": boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart": IconNameOrString;
        /**
          * In ancestor selection mode, show as indeterminate when only some children are selected.
         */
        "indeterminate": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        "lines": boolean;
        "parentExpanded": boolean;
        "scale": Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        "selectionMode": SelectionMode;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface CalciteValueList {
        /**
          * When provided, the method will be called to determine whether the element can move from the list.
         */
        "canPull": (detail: DragDetail) => boolean;
        /**
          * When provided, the method will be called to determine whether the element can be added from another list.
         */
        "canPut": (detail: DragDetail) => boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When `true`, `calcite-value-list-item`s are sortable via a draggable button.
         */
        "dragEnabled": boolean;
        /**
          * When `true`, an input appears at the top of the component that can be used by end users to filter list items.
         */
        "filterEnabled": boolean;
        /**
          * Placeholder text for the filter's input field.
         */
        "filterPlaceholder": string;
        /**
          * Text for the filter input field.
         */
        "filterText": string;
        /**
          * The currently filtered data.
          * @readonly
         */
        "filteredData": ItemData1;
        /**
          * The currently filtered items.
          * @readonly
         */
        "filteredItems": HTMLCalciteValueListItemElement[];
        /**
          * Returns the component's selected items.
         */
        "getSelectedItems": () => Promise<Map<string, HTMLCalciteValueListItemElement>>;
        /**
          * The component's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides": Partial<ValueListMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages": ValueListMessages;
        /**
          * Similar to standard radio buttons and checkboxes. When `true`, a user can select multiple `calcite-value-list-item`s at a time. When `false`, only a single `calcite-value-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple": boolean;
        /**
          * When `true` and single-selection is enabled, the selection changes when navigating `calcite-value-list-item`s via keyboard.
         */
        "selectionFollowsFocus": boolean;
        /**
          * Sets focus on the component's first focusable element.
          * @param focusId
         */
        "setFocus": (focusId?: ListFocusId) => Promise<void>;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface CalciteValueListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description"?: string;
        "deselectDisabled": boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        "handleActivated"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-design-system/blob/dev/src/components/pick-list/resources.ts#L5)
         */
        "icon"?: ICON_TYPES | null;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl": boolean;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label": string;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata"?: Record<string, unknown>;
        /**
          * When `true`, prevents the content of the component from user interaction.
         */
        "nonInteractive": boolean;
        /**
          * When `true`, adds an action to remove the component.
         */
        "removable": boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected": boolean;
        /**
          * Set focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Toggle the selection state. By default this won't trigger an event. The first argument allows the value to be coerced, rather than swapping values.
          * @param coerce
         */
        "toggleSelected": (coerce?: boolean) => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
}
export interface CalciteAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteAccordionElement;
}
export interface CalciteAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteAccordionItemElement;
}
export interface CalciteActionBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteActionBarElement;
}
export interface CalciteActionMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteActionMenuElement;
}
export interface CalciteActionPadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteActionPadElement;
}
export interface CalciteAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteAlertElement;
}
export interface CalciteBlockCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteBlockElement;
}
export interface CalciteBlockSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteBlockSectionElement;
}
export interface CalciteCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteCardElement;
}
export interface CalciteCardGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteCardGroupElement;
}
export interface CalciteCarouselCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteCarouselElement;
}
export interface CalciteCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteCheckboxElement;
}
export interface CalciteChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteChipElement;
}
export interface CalciteChipGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteChipGroupElement;
}
export interface CalciteColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteColorPickerElement;
}
export interface CalciteColorPickerHexInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteColorPickerHexInputElement;
}
export interface CalciteComboboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteComboboxElement;
}
export interface CalciteComboboxItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteComboboxItemElement;
}
export interface CalciteDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerElement;
}
export interface CalciteDatePickerDayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerDayElement;
}
export interface CalciteDatePickerMonthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerMonthElement;
}
export interface CalciteDatePickerMonthHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerMonthHeaderElement;
}
export interface CalciteDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDialogElement;
}
export interface CalciteDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDropdownElement;
}
export interface CalciteDropdownGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDropdownGroupElement;
}
export interface CalciteDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDropdownItemElement;
}
export interface CalciteFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteFilterElement;
}
export interface CalciteFlowItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteFlowItemElement;
}
export interface CalciteHandleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteHandleElement;
}
export interface CalciteInlineEditableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInlineEditableElement;
}
export interface CalciteInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputElement;
}
export interface CalciteInputDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputDatePickerElement;
}
export interface CalciteInputNumberCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputNumberElement;
}
export interface CalciteInputTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputTextElement;
}
export interface CalciteInputTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputTimePickerElement;
}
export interface CalciteInputTimeZoneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputTimeZoneElement;
}
export interface CalciteLabelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteLabelElement;
}
export interface CalciteListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteListElement;
}
export interface CalciteListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteListItemElement;
}
export interface CalciteListItemGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteListItemGroupElement;
}
export interface CalciteMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteMenuItemElement;
}
export interface CalciteModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteModalElement;
}
export interface CalciteNavigationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteNavigationElement;
}
export interface CalciteNoticeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteNoticeElement;
}
export interface CalciteOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteOptionElement;
}
export interface CalciteOptionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteOptionGroupElement;
}
export interface CalcitePaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePaginationElement;
}
export interface CalcitePanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePanelElement;
}
export interface CalcitePickListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePickListElement;
}
export interface CalcitePickListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePickListItemElement;
}
export interface CalcitePopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePopoverElement;
}
export interface CalciteRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteRadioButtonElement;
}
export interface CalciteRadioButtonGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteRadioButtonGroupElement;
}
export interface CalciteRatingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteRatingElement;
}
export interface CalciteSegmentedControlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSegmentedControlElement;
}
export interface CalciteSegmentedControlItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSegmentedControlItemElement;
}
export interface CalciteSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSelectElement;
}
export interface CalciteSheetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSheetElement;
}
export interface CalciteShellPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteShellPanelElement;
}
export interface CalciteSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSliderElement;
}
export interface CalciteSortableListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSortableListElement;
}
export interface CalciteSplitButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSplitButtonElement;
}
export interface CalciteStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteStepperElement;
}
export interface CalciteStepperItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteStepperItemElement;
}
export interface CalciteSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSwitchElement;
}
export interface CalciteTabNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTabNavElement;
}
export interface CalciteTabTitleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTabTitleElement;
}
export interface CalciteTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTableElement;
}
export interface CalciteTableRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTableRowElement;
}
export interface CalciteTextAreaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTextAreaElement;
}
export interface CalciteTileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTileElement;
}
export interface CalciteTileGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTileGroupElement;
}
export interface CalciteTileSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTileSelectElement;
}
export interface CalciteTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTimePickerElement;
}
export interface CalciteTipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTipElement;
}
export interface CalciteTipManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTipManagerElement;
}
export interface CalciteTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTooltipElement;
}
export interface CalciteTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTreeElement;
}
export interface CalciteTreeItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTreeItemElement;
}
export interface CalciteValueListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteValueListElement;
}
export interface CalciteValueListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteValueListItemElement;
}
declare global {
    interface HTMLCalciteAccordionElementEventMap {
        "calciteInternalAccordionChange": RequestedItem;
    }
    interface HTMLCalciteAccordionElement extends Components.CalciteAccordion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteAccordionElementEventMap>(type: K, listener: (this: HTMLCalciteAccordionElement, ev: CalciteAccordionCustomEvent<HTMLCalciteAccordionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteAccordionElementEventMap>(type: K, listener: (this: HTMLCalciteAccordionElement, ev: CalciteAccordionCustomEvent<HTMLCalciteAccordionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteAccordionElement: {
        prototype: HTMLCalciteAccordionElement;
        new (): HTMLCalciteAccordionElement;
    };
    interface HTMLCalciteAccordionItemElementEventMap {
        "calciteInternalAccordionItemSelect": RequestedItem1;
        "calciteInternalAccordionItemClose": void;
    }
    interface HTMLCalciteAccordionItemElement extends Components.CalciteAccordionItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteAccordionItemElementEventMap>(type: K, listener: (this: HTMLCalciteAccordionItemElement, ev: CalciteAccordionItemCustomEvent<HTMLCalciteAccordionItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteAccordionItemElementEventMap>(type: K, listener: (this: HTMLCalciteAccordionItemElement, ev: CalciteAccordionItemCustomEvent<HTMLCalciteAccordionItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteAccordionItemElement: {
        prototype: HTMLCalciteAccordionItemElement;
        new (): HTMLCalciteAccordionItemElement;
    };
    interface HTMLCalciteActionElement extends Components.CalciteAction, HTMLStencilElement {
    }
    var HTMLCalciteActionElement: {
        prototype: HTMLCalciteActionElement;
        new (): HTMLCalciteActionElement;
    };
    interface HTMLCalciteActionBarElementEventMap {
        "calciteActionBarToggle": void;
    }
    interface HTMLCalciteActionBarElement extends Components.CalciteActionBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteActionBarElementEventMap>(type: K, listener: (this: HTMLCalciteActionBarElement, ev: CalciteActionBarCustomEvent<HTMLCalciteActionBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteActionBarElementEventMap>(type: K, listener: (this: HTMLCalciteActionBarElement, ev: CalciteActionBarCustomEvent<HTMLCalciteActionBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteActionBarElement: {
        prototype: HTMLCalciteActionBarElement;
        new (): HTMLCalciteActionBarElement;
    };
    interface HTMLCalciteActionGroupElement extends Components.CalciteActionGroup, HTMLStencilElement {
    }
    var HTMLCalciteActionGroupElement: {
        prototype: HTMLCalciteActionGroupElement;
        new (): HTMLCalciteActionGroupElement;
    };
    interface HTMLCalciteActionMenuElementEventMap {
        "calciteActionMenuOpen": void;
    }
    interface HTMLCalciteActionMenuElement extends Components.CalciteActionMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteActionMenuElementEventMap>(type: K, listener: (this: HTMLCalciteActionMenuElement, ev: CalciteActionMenuCustomEvent<HTMLCalciteActionMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteActionMenuElementEventMap>(type: K, listener: (this: HTMLCalciteActionMenuElement, ev: CalciteActionMenuCustomEvent<HTMLCalciteActionMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteActionMenuElement: {
        prototype: HTMLCalciteActionMenuElement;
        new (): HTMLCalciteActionMenuElement;
    };
    interface HTMLCalciteActionPadElementEventMap {
        "calciteActionPadToggle": void;
    }
    interface HTMLCalciteActionPadElement extends Components.CalciteActionPad, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteActionPadElementEventMap>(type: K, listener: (this: HTMLCalciteActionPadElement, ev: CalciteActionPadCustomEvent<HTMLCalciteActionPadElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteActionPadElementEventMap>(type: K, listener: (this: HTMLCalciteActionPadElement, ev: CalciteActionPadCustomEvent<HTMLCalciteActionPadElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteActionPadElement: {
        prototype: HTMLCalciteActionPadElement;
        new (): HTMLCalciteActionPadElement;
    };
    interface HTMLCalciteAlertElementEventMap {
        "calciteAlertBeforeClose": void;
        "calciteAlertClose": void;
        "calciteAlertBeforeOpen": void;
        "calciteAlertOpen": void;
    }
    interface HTMLCalciteAlertElement extends Components.CalciteAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteAlertElementEventMap>(type: K, listener: (this: HTMLCalciteAlertElement, ev: CalciteAlertCustomEvent<HTMLCalciteAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteAlertElementEventMap>(type: K, listener: (this: HTMLCalciteAlertElement, ev: CalciteAlertCustomEvent<HTMLCalciteAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteAlertElement: {
        prototype: HTMLCalciteAlertElement;
        new (): HTMLCalciteAlertElement;
    };
    interface HTMLCalciteAvatarElement extends Components.CalciteAvatar, HTMLStencilElement {
    }
    var HTMLCalciteAvatarElement: {
        prototype: HTMLCalciteAvatarElement;
        new (): HTMLCalciteAvatarElement;
    };
    interface HTMLCalciteBlockElementEventMap {
        "calciteBlockBeforeClose": void;
        "calciteBlockBeforeOpen": void;
        "calciteBlockClose": void;
        "calciteBlockOpen": void;
        "calciteBlockToggle": void;
    }
    interface HTMLCalciteBlockElement extends Components.CalciteBlock, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteBlockElementEventMap>(type: K, listener: (this: HTMLCalciteBlockElement, ev: CalciteBlockCustomEvent<HTMLCalciteBlockElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteBlockElementEventMap>(type: K, listener: (this: HTMLCalciteBlockElement, ev: CalciteBlockCustomEvent<HTMLCalciteBlockElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteBlockElement: {
        prototype: HTMLCalciteBlockElement;
        new (): HTMLCalciteBlockElement;
    };
    interface HTMLCalciteBlockSectionElementEventMap {
        "calciteBlockSectionToggle": void;
    }
    interface HTMLCalciteBlockSectionElement extends Components.CalciteBlockSection, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteBlockSectionElementEventMap>(type: K, listener: (this: HTMLCalciteBlockSectionElement, ev: CalciteBlockSectionCustomEvent<HTMLCalciteBlockSectionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteBlockSectionElementEventMap>(type: K, listener: (this: HTMLCalciteBlockSectionElement, ev: CalciteBlockSectionCustomEvent<HTMLCalciteBlockSectionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteBlockSectionElement: {
        prototype: HTMLCalciteBlockSectionElement;
        new (): HTMLCalciteBlockSectionElement;
    };
    interface HTMLCalciteButtonElement extends Components.CalciteButton, HTMLStencilElement {
    }
    var HTMLCalciteButtonElement: {
        prototype: HTMLCalciteButtonElement;
        new (): HTMLCalciteButtonElement;
    };
    interface HTMLCalciteCardElementEventMap {
        "calciteCardSelect": void;
        "calciteInternalCardKeyEvent": KeyboardEvent;
    }
    interface HTMLCalciteCardElement extends Components.CalciteCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteCardElementEventMap>(type: K, listener: (this: HTMLCalciteCardElement, ev: CalciteCardCustomEvent<HTMLCalciteCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteCardElementEventMap>(type: K, listener: (this: HTMLCalciteCardElement, ev: CalciteCardCustomEvent<HTMLCalciteCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteCardElement: {
        prototype: HTMLCalciteCardElement;
        new (): HTMLCalciteCardElement;
    };
    interface HTMLCalciteCardGroupElementEventMap {
        "calciteCardGroupSelect": void;
    }
    interface HTMLCalciteCardGroupElement extends Components.CalciteCardGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteCardGroupElementEventMap>(type: K, listener: (this: HTMLCalciteCardGroupElement, ev: CalciteCardGroupCustomEvent<HTMLCalciteCardGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteCardGroupElementEventMap>(type: K, listener: (this: HTMLCalciteCardGroupElement, ev: CalciteCardGroupCustomEvent<HTMLCalciteCardGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteCardGroupElement: {
        prototype: HTMLCalciteCardGroupElement;
        new (): HTMLCalciteCardGroupElement;
    };
    interface HTMLCalciteCarouselElementEventMap {
        "calciteCarouselChange": void;
        "calciteCarouselPlay": void;
        "calciteCarouselStop": void;
        "calciteCarouselPause": void;
        "calciteCarouselResume": void;
    }
    interface HTMLCalciteCarouselElement extends Components.CalciteCarousel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteCarouselElementEventMap>(type: K, listener: (this: HTMLCalciteCarouselElement, ev: CalciteCarouselCustomEvent<HTMLCalciteCarouselElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteCarouselElementEventMap>(type: K, listener: (this: HTMLCalciteCarouselElement, ev: CalciteCarouselCustomEvent<HTMLCalciteCarouselElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteCarouselElement: {
        prototype: HTMLCalciteCarouselElement;
        new (): HTMLCalciteCarouselElement;
    };
    interface HTMLCalciteCarouselItemElement extends Components.CalciteCarouselItem, HTMLStencilElement {
    }
    var HTMLCalciteCarouselItemElement: {
        prototype: HTMLCalciteCarouselItemElement;
        new (): HTMLCalciteCarouselItemElement;
    };
    interface HTMLCalciteCheckboxElementEventMap {
        "calciteInternalCheckboxBlur": boolean;
        "calciteCheckboxChange": void;
        "calciteInternalCheckboxFocus": boolean;
    }
    interface HTMLCalciteCheckboxElement extends Components.CalciteCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteCheckboxElementEventMap>(type: K, listener: (this: HTMLCalciteCheckboxElement, ev: CalciteCheckboxCustomEvent<HTMLCalciteCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteCheckboxElementEventMap>(type: K, listener: (this: HTMLCalciteCheckboxElement, ev: CalciteCheckboxCustomEvent<HTMLCalciteCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteCheckboxElement: {
        prototype: HTMLCalciteCheckboxElement;
        new (): HTMLCalciteCheckboxElement;
    };
    interface HTMLCalciteChipElementEventMap {
        "calciteChipClose": void;
        "calciteChipSelect": void;
        "calciteInternalChipKeyEvent": KeyboardEvent;
        "calciteInternalChipSelect": void;
        "calciteInternalSyncSelectedChips": void;
    }
    interface HTMLCalciteChipElement extends Components.CalciteChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteChipElementEventMap>(type: K, listener: (this: HTMLCalciteChipElement, ev: CalciteChipCustomEvent<HTMLCalciteChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteChipElementEventMap>(type: K, listener: (this: HTMLCalciteChipElement, ev: CalciteChipCustomEvent<HTMLCalciteChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteChipElement: {
        prototype: HTMLCalciteChipElement;
        new (): HTMLCalciteChipElement;
    };
    interface HTMLCalciteChipGroupElementEventMap {
        "calciteChipGroupSelect": void;
    }
    interface HTMLCalciteChipGroupElement extends Components.CalciteChipGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteChipGroupElementEventMap>(type: K, listener: (this: HTMLCalciteChipGroupElement, ev: CalciteChipGroupCustomEvent<HTMLCalciteChipGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteChipGroupElementEventMap>(type: K, listener: (this: HTMLCalciteChipGroupElement, ev: CalciteChipGroupCustomEvent<HTMLCalciteChipGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteChipGroupElement: {
        prototype: HTMLCalciteChipGroupElement;
        new (): HTMLCalciteChipGroupElement;
    };
    interface HTMLCalciteColorPickerElementEventMap {
        "calciteColorPickerChange": void;
        "calciteColorPickerInput": void;
    }
    interface HTMLCalciteColorPickerElement extends Components.CalciteColorPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteColorPickerElementEventMap>(type: K, listener: (this: HTMLCalciteColorPickerElement, ev: CalciteColorPickerCustomEvent<HTMLCalciteColorPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteColorPickerElementEventMap>(type: K, listener: (this: HTMLCalciteColorPickerElement, ev: CalciteColorPickerCustomEvent<HTMLCalciteColorPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteColorPickerElement: {
        prototype: HTMLCalciteColorPickerElement;
        new (): HTMLCalciteColorPickerElement;
    };
    interface HTMLCalciteColorPickerHexInputElementEventMap {
        "calciteColorPickerHexInputChange": void;
    }
    interface HTMLCalciteColorPickerHexInputElement extends Components.CalciteColorPickerHexInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteColorPickerHexInputElementEventMap>(type: K, listener: (this: HTMLCalciteColorPickerHexInputElement, ev: CalciteColorPickerHexInputCustomEvent<HTMLCalciteColorPickerHexInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteColorPickerHexInputElementEventMap>(type: K, listener: (this: HTMLCalciteColorPickerHexInputElement, ev: CalciteColorPickerHexInputCustomEvent<HTMLCalciteColorPickerHexInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteColorPickerHexInputElement: {
        prototype: HTMLCalciteColorPickerHexInputElement;
        new (): HTMLCalciteColorPickerHexInputElement;
    };
    interface HTMLCalciteColorPickerSwatchElement extends Components.CalciteColorPickerSwatch, HTMLStencilElement {
    }
    var HTMLCalciteColorPickerSwatchElement: {
        prototype: HTMLCalciteColorPickerSwatchElement;
        new (): HTMLCalciteColorPickerSwatchElement;
    };
    interface HTMLCalciteComboboxElementEventMap {
        "calciteComboboxChange": void;
        "calciteComboboxFilterChange": void;
        "calciteComboboxChipClose": void;
        "calciteComboboxBeforeClose": void;
        "calciteComboboxClose": void;
        "calciteComboboxBeforeOpen": void;
        "calciteComboboxOpen": void;
    }
    interface HTMLCalciteComboboxElement extends Components.CalciteCombobox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteComboboxElementEventMap>(type: K, listener: (this: HTMLCalciteComboboxElement, ev: CalciteComboboxCustomEvent<HTMLCalciteComboboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteComboboxElementEventMap>(type: K, listener: (this: HTMLCalciteComboboxElement, ev: CalciteComboboxCustomEvent<HTMLCalciteComboboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteComboboxElement: {
        prototype: HTMLCalciteComboboxElement;
        new (): HTMLCalciteComboboxElement;
    };
    interface HTMLCalciteComboboxItemElementEventMap {
        "calciteComboboxItemChange": void;
        "calciteInternalComboboxItemChange": void;
    }
    interface HTMLCalciteComboboxItemElement extends Components.CalciteComboboxItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteComboboxItemElementEventMap>(type: K, listener: (this: HTMLCalciteComboboxItemElement, ev: CalciteComboboxItemCustomEvent<HTMLCalciteComboboxItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteComboboxItemElementEventMap>(type: K, listener: (this: HTMLCalciteComboboxItemElement, ev: CalciteComboboxItemCustomEvent<HTMLCalciteComboboxItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteComboboxItemElement: {
        prototype: HTMLCalciteComboboxItemElement;
        new (): HTMLCalciteComboboxItemElement;
    };
    interface HTMLCalciteComboboxItemGroupElement extends Components.CalciteComboboxItemGroup, HTMLStencilElement {
    }
    var HTMLCalciteComboboxItemGroupElement: {
        prototype: HTMLCalciteComboboxItemGroupElement;
        new (): HTMLCalciteComboboxItemGroupElement;
    };
    interface HTMLCalciteDatePickerElementEventMap {
        "calciteDatePickerChange": void;
        "calciteDatePickerRangeChange": void;
    }
    interface HTMLCalciteDatePickerElement extends Components.CalciteDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteDatePickerElementEventMap>(type: K, listener: (this: HTMLCalciteDatePickerElement, ev: CalciteDatePickerCustomEvent<HTMLCalciteDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteDatePickerElementEventMap>(type: K, listener: (this: HTMLCalciteDatePickerElement, ev: CalciteDatePickerCustomEvent<HTMLCalciteDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteDatePickerElement: {
        prototype: HTMLCalciteDatePickerElement;
        new (): HTMLCalciteDatePickerElement;
    };
    interface HTMLCalciteDatePickerDayElementEventMap {
        "calciteDaySelect": void;
        "calciteInternalDayHover": void;
    }
    interface HTMLCalciteDatePickerDayElement extends Components.CalciteDatePickerDay, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteDatePickerDayElementEventMap>(type: K, listener: (this: HTMLCalciteDatePickerDayElement, ev: CalciteDatePickerDayCustomEvent<HTMLCalciteDatePickerDayElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteDatePickerDayElementEventMap>(type: K, listener: (this: HTMLCalciteDatePickerDayElement, ev: CalciteDatePickerDayCustomEvent<HTMLCalciteDatePickerDayElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteDatePickerDayElement: {
        prototype: HTMLCalciteDatePickerDayElement;
        new (): HTMLCalciteDatePickerDayElement;
    };
    interface HTMLCalciteDatePickerMonthElementEventMap {
        "calciteInternalDatePickerSelect": Date;
        "calciteInternalDatePickerHover": Date;
        "calciteInternalDatePickerActiveDateChange": Date;
        "calciteInternalDatePickerMouseOut": void;
    }
    interface HTMLCalciteDatePickerMonthElement extends Components.CalciteDatePickerMonth, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteDatePickerMonthElementEventMap>(type: K, listener: (this: HTMLCalciteDatePickerMonthElement, ev: CalciteDatePickerMonthCustomEvent<HTMLCalciteDatePickerMonthElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteDatePickerMonthElementEventMap>(type: K, listener: (this: HTMLCalciteDatePickerMonthElement, ev: CalciteDatePickerMonthCustomEvent<HTMLCalciteDatePickerMonthElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteDatePickerMonthElement: {
        prototype: HTMLCalciteDatePickerMonthElement;
        new (): HTMLCalciteDatePickerMonthElement;
    };
    interface HTMLCalciteDatePickerMonthHeaderElementEventMap {
        "calciteInternalDatePickerSelect": Date;
    }
    interface HTMLCalciteDatePickerMonthHeaderElement extends Components.CalciteDatePickerMonthHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteDatePickerMonthHeaderElementEventMap>(type: K, listener: (this: HTMLCalciteDatePickerMonthHeaderElement, ev: CalciteDatePickerMonthHeaderCustomEvent<HTMLCalciteDatePickerMonthHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteDatePickerMonthHeaderElementEventMap>(type: K, listener: (this: HTMLCalciteDatePickerMonthHeaderElement, ev: CalciteDatePickerMonthHeaderCustomEvent<HTMLCalciteDatePickerMonthHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteDatePickerMonthHeaderElement: {
        prototype: HTMLCalciteDatePickerMonthHeaderElement;
        new (): HTMLCalciteDatePickerMonthHeaderElement;
    };
    interface HTMLCalciteDialogElementEventMap {
        "calciteDialogBeforeClose": void;
        "calciteDialogClose": void;
        "calciteDialogBeforeOpen": void;
        "calciteDialogOpen": void;
        "calciteDialogScroll": void;
    }
    interface HTMLCalciteDialogElement extends Components.CalciteDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteDialogElementEventMap>(type: K, listener: (this: HTMLCalciteDialogElement, ev: CalciteDialogCustomEvent<HTMLCalciteDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteDialogElementEventMap>(type: K, listener: (this: HTMLCalciteDialogElement, ev: CalciteDialogCustomEvent<HTMLCalciteDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteDialogElement: {
        prototype: HTMLCalciteDialogElement;
        new (): HTMLCalciteDialogElement;
    };
    interface HTMLCalciteDropdownElementEventMap {
        "calciteDropdownSelect": void;
        "calciteDropdownBeforeClose": void;
        "calciteDropdownClose": void;
        "calciteDropdownBeforeOpen": void;
        "calciteDropdownOpen": void;
    }
    interface HTMLCalciteDropdownElement extends Components.CalciteDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteDropdownElementEventMap>(type: K, listener: (this: HTMLCalciteDropdownElement, ev: CalciteDropdownCustomEvent<HTMLCalciteDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteDropdownElementEventMap>(type: K, listener: (this: HTMLCalciteDropdownElement, ev: CalciteDropdownCustomEvent<HTMLCalciteDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteDropdownElement: {
        prototype: HTMLCalciteDropdownElement;
        new (): HTMLCalciteDropdownElement;
    };
    interface HTMLCalciteDropdownGroupElementEventMap {
        "calciteInternalDropdownItemChange": RequestedItem2;
    }
    interface HTMLCalciteDropdownGroupElement extends Components.CalciteDropdownGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteDropdownGroupElementEventMap>(type: K, listener: (this: HTMLCalciteDropdownGroupElement, ev: CalciteDropdownGroupCustomEvent<HTMLCalciteDropdownGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteDropdownGroupElementEventMap>(type: K, listener: (this: HTMLCalciteDropdownGroupElement, ev: CalciteDropdownGroupCustomEvent<HTMLCalciteDropdownGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteDropdownGroupElement: {
        prototype: HTMLCalciteDropdownGroupElement;
        new (): HTMLCalciteDropdownGroupElement;
    };
    interface HTMLCalciteDropdownItemElementEventMap {
        "calciteDropdownItemSelect": void;
        "calciteInternalDropdownItemSelect": RequestedItem2;
        "calciteInternalDropdownItemKeyEvent": ItemKeyboardEvent;
        "calciteInternalDropdownCloseRequest": void;
    }
    interface HTMLCalciteDropdownItemElement extends Components.CalciteDropdownItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteDropdownItemElementEventMap>(type: K, listener: (this: HTMLCalciteDropdownItemElement, ev: CalciteDropdownItemCustomEvent<HTMLCalciteDropdownItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteDropdownItemElementEventMap>(type: K, listener: (this: HTMLCalciteDropdownItemElement, ev: CalciteDropdownItemCustomEvent<HTMLCalciteDropdownItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteDropdownItemElement: {
        prototype: HTMLCalciteDropdownItemElement;
        new (): HTMLCalciteDropdownItemElement;
    };
    interface HTMLCalciteFabElement extends Components.CalciteFab, HTMLStencilElement {
    }
    var HTMLCalciteFabElement: {
        prototype: HTMLCalciteFabElement;
        new (): HTMLCalciteFabElement;
    };
    interface HTMLCalciteFilterElementEventMap {
        "calciteFilterChange": void;
    }
    interface HTMLCalciteFilterElement extends Components.CalciteFilter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteFilterElementEventMap>(type: K, listener: (this: HTMLCalciteFilterElement, ev: CalciteFilterCustomEvent<HTMLCalciteFilterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteFilterElementEventMap>(type: K, listener: (this: HTMLCalciteFilterElement, ev: CalciteFilterCustomEvent<HTMLCalciteFilterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteFilterElement: {
        prototype: HTMLCalciteFilterElement;
        new (): HTMLCalciteFilterElement;
    };
    interface HTMLCalciteFlowElement extends Components.CalciteFlow, HTMLStencilElement {
    }
    var HTMLCalciteFlowElement: {
        prototype: HTMLCalciteFlowElement;
        new (): HTMLCalciteFlowElement;
    };
    interface HTMLCalciteFlowItemElementEventMap {
        "calciteFlowItemBack": void;
        "calciteFlowItemScroll": void;
        "calciteFlowItemClose": void;
        "calciteFlowItemToggle": void;
    }
    interface HTMLCalciteFlowItemElement extends Components.CalciteFlowItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteFlowItemElementEventMap>(type: K, listener: (this: HTMLCalciteFlowItemElement, ev: CalciteFlowItemCustomEvent<HTMLCalciteFlowItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteFlowItemElementEventMap>(type: K, listener: (this: HTMLCalciteFlowItemElement, ev: CalciteFlowItemCustomEvent<HTMLCalciteFlowItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteFlowItemElement: {
        prototype: HTMLCalciteFlowItemElement;
        new (): HTMLCalciteFlowItemElement;
    };
    interface HTMLCalciteGraphElement extends Components.CalciteGraph, HTMLStencilElement {
    }
    var HTMLCalciteGraphElement: {
        prototype: HTMLCalciteGraphElement;
        new (): HTMLCalciteGraphElement;
    };
    interface HTMLCalciteHandleElementEventMap {
        "calciteHandleChange": void;
        "calciteHandleNudge": HandleNudge;
        "calciteInternalAssistiveTextChange": HandleChange;
    }
    interface HTMLCalciteHandleElement extends Components.CalciteHandle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteHandleElementEventMap>(type: K, listener: (this: HTMLCalciteHandleElement, ev: CalciteHandleCustomEvent<HTMLCalciteHandleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteHandleElementEventMap>(type: K, listener: (this: HTMLCalciteHandleElement, ev: CalciteHandleCustomEvent<HTMLCalciteHandleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteHandleElement: {
        prototype: HTMLCalciteHandleElement;
        new (): HTMLCalciteHandleElement;
    };
    interface HTMLCalciteIconElement extends Components.CalciteIcon, HTMLStencilElement {
    }
    var HTMLCalciteIconElement: {
        prototype: HTMLCalciteIconElement;
        new (): HTMLCalciteIconElement;
    };
    interface HTMLCalciteInlineEditableElementEventMap {
        "calciteInlineEditableEditCancel": void;
        "calciteInlineEditableEditConfirm": void;
        "calciteInternalInlineEditableEnableEditingChange": void;
    }
    interface HTMLCalciteInlineEditableElement extends Components.CalciteInlineEditable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteInlineEditableElementEventMap>(type: K, listener: (this: HTMLCalciteInlineEditableElement, ev: CalciteInlineEditableCustomEvent<HTMLCalciteInlineEditableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteInlineEditableElementEventMap>(type: K, listener: (this: HTMLCalciteInlineEditableElement, ev: CalciteInlineEditableCustomEvent<HTMLCalciteInlineEditableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteInlineEditableElement: {
        prototype: HTMLCalciteInlineEditableElement;
        new (): HTMLCalciteInlineEditableElement;
    };
    interface HTMLCalciteInputElementEventMap {
        "calciteInternalInputFocus": void;
        "calciteInternalInputBlur": void;
        "calciteInputInput": void;
        "calciteInputChange": void;
    }
    interface HTMLCalciteInputElement extends Components.CalciteInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteInputElementEventMap>(type: K, listener: (this: HTMLCalciteInputElement, ev: CalciteInputCustomEvent<HTMLCalciteInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteInputElementEventMap>(type: K, listener: (this: HTMLCalciteInputElement, ev: CalciteInputCustomEvent<HTMLCalciteInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteInputElement: {
        prototype: HTMLCalciteInputElement;
        new (): HTMLCalciteInputElement;
    };
    interface HTMLCalciteInputDatePickerElementEventMap {
        "calciteInputDatePickerChange": void;
        "calciteInputDatePickerBeforeClose": void;
        "calciteInputDatePickerClose": void;
        "calciteInputDatePickerBeforeOpen": void;
        "calciteInputDatePickerOpen": void;
    }
    interface HTMLCalciteInputDatePickerElement extends Components.CalciteInputDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteInputDatePickerElementEventMap>(type: K, listener: (this: HTMLCalciteInputDatePickerElement, ev: CalciteInputDatePickerCustomEvent<HTMLCalciteInputDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteInputDatePickerElementEventMap>(type: K, listener: (this: HTMLCalciteInputDatePickerElement, ev: CalciteInputDatePickerCustomEvent<HTMLCalciteInputDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteInputDatePickerElement: {
        prototype: HTMLCalciteInputDatePickerElement;
        new (): HTMLCalciteInputDatePickerElement;
    };
    interface HTMLCalciteInputMessageElement extends Components.CalciteInputMessage, HTMLStencilElement {
    }
    var HTMLCalciteInputMessageElement: {
        prototype: HTMLCalciteInputMessageElement;
        new (): HTMLCalciteInputMessageElement;
    };
    interface HTMLCalciteInputNumberElementEventMap {
        "calciteInternalInputNumberFocus": void;
        "calciteInternalInputNumberBlur": void;
        "calciteInputNumberInput": void;
        "calciteInputNumberChange": void;
    }
    interface HTMLCalciteInputNumberElement extends Components.CalciteInputNumber, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteInputNumberElementEventMap>(type: K, listener: (this: HTMLCalciteInputNumberElement, ev: CalciteInputNumberCustomEvent<HTMLCalciteInputNumberElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteInputNumberElementEventMap>(type: K, listener: (this: HTMLCalciteInputNumberElement, ev: CalciteInputNumberCustomEvent<HTMLCalciteInputNumberElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteInputNumberElement: {
        prototype: HTMLCalciteInputNumberElement;
        new (): HTMLCalciteInputNumberElement;
    };
    interface HTMLCalciteInputTextElementEventMap {
        "calciteInternalInputTextFocus": {
    element: HTMLInputElement;
    value: string;
  };
        "calciteInternalInputTextBlur": { element: HTMLInputElement; value: string };
        "calciteInputTextInput": void;
        "calciteInputTextChange": void;
    }
    interface HTMLCalciteInputTextElement extends Components.CalciteInputText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteInputTextElementEventMap>(type: K, listener: (this: HTMLCalciteInputTextElement, ev: CalciteInputTextCustomEvent<HTMLCalciteInputTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteInputTextElementEventMap>(type: K, listener: (this: HTMLCalciteInputTextElement, ev: CalciteInputTextCustomEvent<HTMLCalciteInputTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteInputTextElement: {
        prototype: HTMLCalciteInputTextElement;
        new (): HTMLCalciteInputTextElement;
    };
    interface HTMLCalciteInputTimePickerElementEventMap {
        "calciteInputTimePickerBeforeClose": void;
        "calciteInputTimePickerBeforeOpen": void;
        "calciteInputTimePickerChange": void;
        "calciteInputTimePickerClose": void;
        "calciteInputTimePickerOpen": void;
    }
    interface HTMLCalciteInputTimePickerElement extends Components.CalciteInputTimePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteInputTimePickerElementEventMap>(type: K, listener: (this: HTMLCalciteInputTimePickerElement, ev: CalciteInputTimePickerCustomEvent<HTMLCalciteInputTimePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteInputTimePickerElementEventMap>(type: K, listener: (this: HTMLCalciteInputTimePickerElement, ev: CalciteInputTimePickerCustomEvent<HTMLCalciteInputTimePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteInputTimePickerElement: {
        prototype: HTMLCalciteInputTimePickerElement;
        new (): HTMLCalciteInputTimePickerElement;
    };
    interface HTMLCalciteInputTimeZoneElementEventMap {
        "calciteInputTimeZoneBeforeClose": void;
        "calciteInputTimeZoneBeforeOpen": void;
        "calciteInputTimeZoneChange": void;
        "calciteInputTimeZoneClose": void;
        "calciteInputTimeZoneOpen": void;
    }
    interface HTMLCalciteInputTimeZoneElement extends Components.CalciteInputTimeZone, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteInputTimeZoneElementEventMap>(type: K, listener: (this: HTMLCalciteInputTimeZoneElement, ev: CalciteInputTimeZoneCustomEvent<HTMLCalciteInputTimeZoneElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteInputTimeZoneElementEventMap>(type: K, listener: (this: HTMLCalciteInputTimeZoneElement, ev: CalciteInputTimeZoneCustomEvent<HTMLCalciteInputTimeZoneElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteInputTimeZoneElement: {
        prototype: HTMLCalciteInputTimeZoneElement;
        new (): HTMLCalciteInputTimeZoneElement;
    };
    interface HTMLCalciteLabelElementEventMap {
        "calciteInternalLabelClick": {
    sourceEvent: MouseEvent;
  };
    }
    interface HTMLCalciteLabelElement extends Components.CalciteLabel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteLabelElementEventMap>(type: K, listener: (this: HTMLCalciteLabelElement, ev: CalciteLabelCustomEvent<HTMLCalciteLabelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteLabelElementEventMap>(type: K, listener: (this: HTMLCalciteLabelElement, ev: CalciteLabelCustomEvent<HTMLCalciteLabelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteLabelElement: {
        prototype: HTMLCalciteLabelElement;
        new (): HTMLCalciteLabelElement;
    };
    interface HTMLCalciteLinkElement extends Components.CalciteLink, HTMLStencilElement {
    }
    var HTMLCalciteLinkElement: {
        prototype: HTMLCalciteLinkElement;
        new (): HTMLCalciteLinkElement;
    };
    interface HTMLCalciteListElementEventMap {
        "calciteListChange": void;
        "calciteListDragEnd": ListDragDetail;
        "calciteListDragStart": ListDragDetail;
        "calciteListFilter": void;
        "calciteListOrderChange": ListDragDetail;
        "calciteInternalListDefaultSlotChange": void;
    }
    /**
     * A general purpose list that enables users to construct list items that conform to Calcite styling.
     */
    interface HTMLCalciteListElement extends Components.CalciteList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteListElementEventMap>(type: K, listener: (this: HTMLCalciteListElement, ev: CalciteListCustomEvent<HTMLCalciteListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteListElementEventMap>(type: K, listener: (this: HTMLCalciteListElement, ev: CalciteListCustomEvent<HTMLCalciteListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteListElement: {
        prototype: HTMLCalciteListElement;
        new (): HTMLCalciteListElement;
    };
    interface HTMLCalciteListItemElementEventMap {
        "calciteListItemSelect": void;
        "calciteListItemClose": void;
        "calciteListItemDragHandleChange": void;
        "calciteListItemToggle": void;
        "calciteInternalListItemSelect": void;
        "calciteInternalListItemSelectMultiple": {
    selectMultiple: boolean;
  };
        "calciteInternalListItemActive": void;
        "calciteInternalFocusPreviousItem": void;
        "calciteInternalListItemChange": void;
        "calciteInternalListItemToggle": void;
    }
    interface HTMLCalciteListItemElement extends Components.CalciteListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteListItemElementEventMap>(type: K, listener: (this: HTMLCalciteListItemElement, ev: CalciteListItemCustomEvent<HTMLCalciteListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteListItemElementEventMap>(type: K, listener: (this: HTMLCalciteListItemElement, ev: CalciteListItemCustomEvent<HTMLCalciteListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteListItemElement: {
        prototype: HTMLCalciteListItemElement;
        new (): HTMLCalciteListItemElement;
    };
    interface HTMLCalciteListItemGroupElementEventMap {
        "calciteInternalListItemGroupDefaultSlotChange": void;
    }
    interface HTMLCalciteListItemGroupElement extends Components.CalciteListItemGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteListItemGroupElementEventMap>(type: K, listener: (this: HTMLCalciteListItemGroupElement, ev: CalciteListItemGroupCustomEvent<HTMLCalciteListItemGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteListItemGroupElementEventMap>(type: K, listener: (this: HTMLCalciteListItemGroupElement, ev: CalciteListItemGroupCustomEvent<HTMLCalciteListItemGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteListItemGroupElement: {
        prototype: HTMLCalciteListItemGroupElement;
        new (): HTMLCalciteListItemGroupElement;
    };
    interface HTMLCalciteLoaderElement extends Components.CalciteLoader, HTMLStencilElement {
    }
    var HTMLCalciteLoaderElement: {
        prototype: HTMLCalciteLoaderElement;
        new (): HTMLCalciteLoaderElement;
    };
    interface HTMLCalciteMenuElement extends Components.CalciteMenu, HTMLStencilElement {
    }
    var HTMLCalciteMenuElement: {
        prototype: HTMLCalciteMenuElement;
        new (): HTMLCalciteMenuElement;
    };
    interface HTMLCalciteMenuItemElementEventMap {
        "calciteInternalMenuItemKeyEvent": MenuItemCustomEvent;
        "calciteMenuItemSelect": void;
    }
    interface HTMLCalciteMenuItemElement extends Components.CalciteMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteMenuItemElementEventMap>(type: K, listener: (this: HTMLCalciteMenuItemElement, ev: CalciteMenuItemCustomEvent<HTMLCalciteMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteMenuItemElementEventMap>(type: K, listener: (this: HTMLCalciteMenuItemElement, ev: CalciteMenuItemCustomEvent<HTMLCalciteMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteMenuItemElement: {
        prototype: HTMLCalciteMenuItemElement;
        new (): HTMLCalciteMenuItemElement;
    };
    interface HTMLCalciteMeterElement extends Components.CalciteMeter, HTMLStencilElement {
    }
    var HTMLCalciteMeterElement: {
        prototype: HTMLCalciteMeterElement;
        new (): HTMLCalciteMeterElement;
    };
    interface HTMLCalciteModalElementEventMap {
        "calciteModalBeforeClose": void;
        "calciteModalClose": void;
        "calciteModalBeforeOpen": void;
        "calciteModalOpen": void;
    }
    /**
     * @deprecated Use the `calcite-dialog` component instead.
     */
    interface HTMLCalciteModalElement extends Components.CalciteModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteModalElementEventMap>(type: K, listener: (this: HTMLCalciteModalElement, ev: CalciteModalCustomEvent<HTMLCalciteModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteModalElementEventMap>(type: K, listener: (this: HTMLCalciteModalElement, ev: CalciteModalCustomEvent<HTMLCalciteModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteModalElement: {
        prototype: HTMLCalciteModalElement;
        new (): HTMLCalciteModalElement;
    };
    interface HTMLCalciteNavigationElementEventMap {
        "calciteNavigationActionSelect": void;
    }
    interface HTMLCalciteNavigationElement extends Components.CalciteNavigation, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteNavigationElementEventMap>(type: K, listener: (this: HTMLCalciteNavigationElement, ev: CalciteNavigationCustomEvent<HTMLCalciteNavigationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteNavigationElementEventMap>(type: K, listener: (this: HTMLCalciteNavigationElement, ev: CalciteNavigationCustomEvent<HTMLCalciteNavigationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteNavigationElement: {
        prototype: HTMLCalciteNavigationElement;
        new (): HTMLCalciteNavigationElement;
    };
    interface HTMLCalciteNavigationLogoElement extends Components.CalciteNavigationLogo, HTMLStencilElement {
    }
    var HTMLCalciteNavigationLogoElement: {
        prototype: HTMLCalciteNavigationLogoElement;
        new (): HTMLCalciteNavigationLogoElement;
    };
    interface HTMLCalciteNavigationUserElement extends Components.CalciteNavigationUser, HTMLStencilElement {
    }
    var HTMLCalciteNavigationUserElement: {
        prototype: HTMLCalciteNavigationUserElement;
        new (): HTMLCalciteNavigationUserElement;
    };
    interface HTMLCalciteNoticeElementEventMap {
        "calciteNoticeBeforeClose": void;
        "calciteNoticeBeforeOpen": void;
        "calciteNoticeClose": void;
        "calciteNoticeOpen": void;
    }
    interface HTMLCalciteNoticeElement extends Components.CalciteNotice, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteNoticeElementEventMap>(type: K, listener: (this: HTMLCalciteNoticeElement, ev: CalciteNoticeCustomEvent<HTMLCalciteNoticeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteNoticeElementEventMap>(type: K, listener: (this: HTMLCalciteNoticeElement, ev: CalciteNoticeCustomEvent<HTMLCalciteNoticeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteNoticeElement: {
        prototype: HTMLCalciteNoticeElement;
        new (): HTMLCalciteNoticeElement;
    };
    interface HTMLCalciteOptionElementEventMap {
        "calciteInternalOptionChange": void;
    }
    interface HTMLCalciteOptionElement extends Components.CalciteOption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteOptionElementEventMap>(type: K, listener: (this: HTMLCalciteOptionElement, ev: CalciteOptionCustomEvent<HTMLCalciteOptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteOptionElementEventMap>(type: K, listener: (this: HTMLCalciteOptionElement, ev: CalciteOptionCustomEvent<HTMLCalciteOptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteOptionElement: {
        prototype: HTMLCalciteOptionElement;
        new (): HTMLCalciteOptionElement;
    };
    interface HTMLCalciteOptionGroupElementEventMap {
        "calciteInternalOptionGroupChange": void;
    }
    interface HTMLCalciteOptionGroupElement extends Components.CalciteOptionGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteOptionGroupElementEventMap>(type: K, listener: (this: HTMLCalciteOptionGroupElement, ev: CalciteOptionGroupCustomEvent<HTMLCalciteOptionGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteOptionGroupElementEventMap>(type: K, listener: (this: HTMLCalciteOptionGroupElement, ev: CalciteOptionGroupCustomEvent<HTMLCalciteOptionGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteOptionGroupElement: {
        prototype: HTMLCalciteOptionGroupElement;
        new (): HTMLCalciteOptionGroupElement;
    };
    interface HTMLCalcitePaginationElementEventMap {
        "calcitePaginationChange": void;
    }
    interface HTMLCalcitePaginationElement extends Components.CalcitePagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalcitePaginationElementEventMap>(type: K, listener: (this: HTMLCalcitePaginationElement, ev: CalcitePaginationCustomEvent<HTMLCalcitePaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalcitePaginationElementEventMap>(type: K, listener: (this: HTMLCalcitePaginationElement, ev: CalcitePaginationCustomEvent<HTMLCalcitePaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalcitePaginationElement: {
        prototype: HTMLCalcitePaginationElement;
        new (): HTMLCalcitePaginationElement;
    };
    interface HTMLCalcitePanelElementEventMap {
        "calcitePanelClose": void;
        "calcitePanelToggle": void;
        "calcitePanelScroll": void;
    }
    interface HTMLCalcitePanelElement extends Components.CalcitePanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalcitePanelElementEventMap>(type: K, listener: (this: HTMLCalcitePanelElement, ev: CalcitePanelCustomEvent<HTMLCalcitePanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalcitePanelElementEventMap>(type: K, listener: (this: HTMLCalcitePanelElement, ev: CalcitePanelCustomEvent<HTMLCalcitePanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalcitePanelElement: {
        prototype: HTMLCalcitePanelElement;
        new (): HTMLCalcitePanelElement;
    };
    interface HTMLCalcitePickListElementEventMap {
        "calciteListChange": Map<string, HTMLCalcitePickListItemElement>;
        "calciteListFilter": void;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface HTMLCalcitePickListElement extends Components.CalcitePickList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalcitePickListElementEventMap>(type: K, listener: (this: HTMLCalcitePickListElement, ev: CalcitePickListCustomEvent<HTMLCalcitePickListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalcitePickListElementEventMap>(type: K, listener: (this: HTMLCalcitePickListElement, ev: CalcitePickListCustomEvent<HTMLCalcitePickListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalcitePickListElement: {
        prototype: HTMLCalcitePickListElement;
        new (): HTMLCalcitePickListElement;
    };
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface HTMLCalcitePickListGroupElement extends Components.CalcitePickListGroup, HTMLStencilElement {
    }
    var HTMLCalcitePickListGroupElement: {
        prototype: HTMLCalcitePickListGroupElement;
        new (): HTMLCalcitePickListGroupElement;
    };
    interface HTMLCalcitePickListItemElementEventMap {
        "calciteListItemChange": {
    item: HTMLCalcitePickListItemElement;
    value: any;
    selected: boolean;
    shiftPressed: boolean;
  };
        "calciteListItemRemove": void;
        "calciteInternalListItemPropsChange": void;
        "calciteInternalListItemValueChange": {
    oldValue: any;
    newValue: any;
  };
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface HTMLCalcitePickListItemElement extends Components.CalcitePickListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalcitePickListItemElementEventMap>(type: K, listener: (this: HTMLCalcitePickListItemElement, ev: CalcitePickListItemCustomEvent<HTMLCalcitePickListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalcitePickListItemElementEventMap>(type: K, listener: (this: HTMLCalcitePickListItemElement, ev: CalcitePickListItemCustomEvent<HTMLCalcitePickListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalcitePickListItemElement: {
        prototype: HTMLCalcitePickListItemElement;
        new (): HTMLCalcitePickListItemElement;
    };
    interface HTMLCalcitePopoverElementEventMap {
        "calcitePopoverBeforeClose": void;
        "calcitePopoverClose": void;
        "calcitePopoverBeforeOpen": void;
        "calcitePopoverOpen": void;
    }
    interface HTMLCalcitePopoverElement extends Components.CalcitePopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalcitePopoverElementEventMap>(type: K, listener: (this: HTMLCalcitePopoverElement, ev: CalcitePopoverCustomEvent<HTMLCalcitePopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalcitePopoverElementEventMap>(type: K, listener: (this: HTMLCalcitePopoverElement, ev: CalcitePopoverCustomEvent<HTMLCalcitePopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalcitePopoverElement: {
        prototype: HTMLCalcitePopoverElement;
        new (): HTMLCalcitePopoverElement;
    };
    interface HTMLCalciteProgressElement extends Components.CalciteProgress, HTMLStencilElement {
    }
    var HTMLCalciteProgressElement: {
        prototype: HTMLCalciteProgressElement;
        new (): HTMLCalciteProgressElement;
    };
    interface HTMLCalciteRadioButtonElementEventMap {
        "calciteInternalRadioButtonBlur": void;
        "calciteRadioButtonChange": void;
        "calciteInternalRadioButtonCheckedChange": void;
        "calciteInternalRadioButtonFocus": void;
    }
    interface HTMLCalciteRadioButtonElement extends Components.CalciteRadioButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteRadioButtonElementEventMap>(type: K, listener: (this: HTMLCalciteRadioButtonElement, ev: CalciteRadioButtonCustomEvent<HTMLCalciteRadioButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteRadioButtonElementEventMap>(type: K, listener: (this: HTMLCalciteRadioButtonElement, ev: CalciteRadioButtonCustomEvent<HTMLCalciteRadioButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteRadioButtonElement: {
        prototype: HTMLCalciteRadioButtonElement;
        new (): HTMLCalciteRadioButtonElement;
    };
    interface HTMLCalciteRadioButtonGroupElementEventMap {
        "calciteRadioButtonGroupChange": void;
    }
    interface HTMLCalciteRadioButtonGroupElement extends Components.CalciteRadioButtonGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteRadioButtonGroupElementEventMap>(type: K, listener: (this: HTMLCalciteRadioButtonGroupElement, ev: CalciteRadioButtonGroupCustomEvent<HTMLCalciteRadioButtonGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteRadioButtonGroupElementEventMap>(type: K, listener: (this: HTMLCalciteRadioButtonGroupElement, ev: CalciteRadioButtonGroupCustomEvent<HTMLCalciteRadioButtonGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteRadioButtonGroupElement: {
        prototype: HTMLCalciteRadioButtonGroupElement;
        new (): HTMLCalciteRadioButtonGroupElement;
    };
    interface HTMLCalciteRatingElementEventMap {
        "calciteRatingChange": void;
    }
    interface HTMLCalciteRatingElement extends Components.CalciteRating, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteRatingElementEventMap>(type: K, listener: (this: HTMLCalciteRatingElement, ev: CalciteRatingCustomEvent<HTMLCalciteRatingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteRatingElementEventMap>(type: K, listener: (this: HTMLCalciteRatingElement, ev: CalciteRatingCustomEvent<HTMLCalciteRatingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteRatingElement: {
        prototype: HTMLCalciteRatingElement;
        new (): HTMLCalciteRatingElement;
    };
    interface HTMLCalciteScrimElement extends Components.CalciteScrim, HTMLStencilElement {
    }
    var HTMLCalciteScrimElement: {
        prototype: HTMLCalciteScrimElement;
        new (): HTMLCalciteScrimElement;
    };
    interface HTMLCalciteSegmentedControlElementEventMap {
        "calciteSegmentedControlChange": void;
    }
    interface HTMLCalciteSegmentedControlElement extends Components.CalciteSegmentedControl, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteSegmentedControlElementEventMap>(type: K, listener: (this: HTMLCalciteSegmentedControlElement, ev: CalciteSegmentedControlCustomEvent<HTMLCalciteSegmentedControlElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteSegmentedControlElementEventMap>(type: K, listener: (this: HTMLCalciteSegmentedControlElement, ev: CalciteSegmentedControlCustomEvent<HTMLCalciteSegmentedControlElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteSegmentedControlElement: {
        prototype: HTMLCalciteSegmentedControlElement;
        new (): HTMLCalciteSegmentedControlElement;
    };
    interface HTMLCalciteSegmentedControlItemElementEventMap {
        "calciteInternalSegmentedControlItemChange": void;
    }
    interface HTMLCalciteSegmentedControlItemElement extends Components.CalciteSegmentedControlItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteSegmentedControlItemElementEventMap>(type: K, listener: (this: HTMLCalciteSegmentedControlItemElement, ev: CalciteSegmentedControlItemCustomEvent<HTMLCalciteSegmentedControlItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteSegmentedControlItemElementEventMap>(type: K, listener: (this: HTMLCalciteSegmentedControlItemElement, ev: CalciteSegmentedControlItemCustomEvent<HTMLCalciteSegmentedControlItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteSegmentedControlItemElement: {
        prototype: HTMLCalciteSegmentedControlItemElement;
        new (): HTMLCalciteSegmentedControlItemElement;
    };
    interface HTMLCalciteSelectElementEventMap {
        "calciteSelectChange": void;
    }
    interface HTMLCalciteSelectElement extends Components.CalciteSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteSelectElementEventMap>(type: K, listener: (this: HTMLCalciteSelectElement, ev: CalciteSelectCustomEvent<HTMLCalciteSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteSelectElementEventMap>(type: K, listener: (this: HTMLCalciteSelectElement, ev: CalciteSelectCustomEvent<HTMLCalciteSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteSelectElement: {
        prototype: HTMLCalciteSelectElement;
        new (): HTMLCalciteSelectElement;
    };
    interface HTMLCalciteSheetElementEventMap {
        "calciteSheetBeforeClose": void;
        "calciteSheetClose": void;
        "calciteSheetBeforeOpen": void;
        "calciteSheetOpen": void;
    }
    interface HTMLCalciteSheetElement extends Components.CalciteSheet, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteSheetElementEventMap>(type: K, listener: (this: HTMLCalciteSheetElement, ev: CalciteSheetCustomEvent<HTMLCalciteSheetElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteSheetElementEventMap>(type: K, listener: (this: HTMLCalciteSheetElement, ev: CalciteSheetCustomEvent<HTMLCalciteSheetElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteSheetElement: {
        prototype: HTMLCalciteSheetElement;
        new (): HTMLCalciteSheetElement;
    };
    interface HTMLCalciteShellElement extends Components.CalciteShell, HTMLStencilElement {
    }
    var HTMLCalciteShellElement: {
        prototype: HTMLCalciteShellElement;
        new (): HTMLCalciteShellElement;
    };
    interface HTMLCalciteShellCenterRowElement extends Components.CalciteShellCenterRow, HTMLStencilElement {
    }
    var HTMLCalciteShellCenterRowElement: {
        prototype: HTMLCalciteShellCenterRowElement;
        new (): HTMLCalciteShellCenterRowElement;
    };
    interface HTMLCalciteShellPanelElementEventMap {
        "calciteInternalShellPanelResizeStart": void;
        "calciteInternalShellPanelResizeEnd": void;
    }
    interface HTMLCalciteShellPanelElement extends Components.CalciteShellPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteShellPanelElementEventMap>(type: K, listener: (this: HTMLCalciteShellPanelElement, ev: CalciteShellPanelCustomEvent<HTMLCalciteShellPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteShellPanelElementEventMap>(type: K, listener: (this: HTMLCalciteShellPanelElement, ev: CalciteShellPanelCustomEvent<HTMLCalciteShellPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteShellPanelElement: {
        prototype: HTMLCalciteShellPanelElement;
        new (): HTMLCalciteShellPanelElement;
    };
    interface HTMLCalciteSliderElementEventMap {
        "calciteSliderInput": void;
        "calciteSliderChange": void;
    }
    interface HTMLCalciteSliderElement extends Components.CalciteSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteSliderElementEventMap>(type: K, listener: (this: HTMLCalciteSliderElement, ev: CalciteSliderCustomEvent<HTMLCalciteSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteSliderElementEventMap>(type: K, listener: (this: HTMLCalciteSliderElement, ev: CalciteSliderCustomEvent<HTMLCalciteSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteSliderElement: {
        prototype: HTMLCalciteSliderElement;
        new (): HTMLCalciteSliderElement;
    };
    interface HTMLCalciteSortableListElementEventMap {
        "calciteListOrderChange": void;
    }
    interface HTMLCalciteSortableListElement extends Components.CalciteSortableList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteSortableListElementEventMap>(type: K, listener: (this: HTMLCalciteSortableListElement, ev: CalciteSortableListCustomEvent<HTMLCalciteSortableListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteSortableListElementEventMap>(type: K, listener: (this: HTMLCalciteSortableListElement, ev: CalciteSortableListCustomEvent<HTMLCalciteSortableListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteSortableListElement: {
        prototype: HTMLCalciteSortableListElement;
        new (): HTMLCalciteSortableListElement;
    };
    interface HTMLCalciteSplitButtonElementEventMap {
        "calciteSplitButtonPrimaryClick": void;
        "calciteSplitButtonSecondaryClick": void;
    }
    interface HTMLCalciteSplitButtonElement extends Components.CalciteSplitButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteSplitButtonElementEventMap>(type: K, listener: (this: HTMLCalciteSplitButtonElement, ev: CalciteSplitButtonCustomEvent<HTMLCalciteSplitButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteSplitButtonElementEventMap>(type: K, listener: (this: HTMLCalciteSplitButtonElement, ev: CalciteSplitButtonCustomEvent<HTMLCalciteSplitButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteSplitButtonElement: {
        prototype: HTMLCalciteSplitButtonElement;
        new (): HTMLCalciteSplitButtonElement;
    };
    interface HTMLCalciteStackElement extends Components.CalciteStack, HTMLStencilElement {
    }
    var HTMLCalciteStackElement: {
        prototype: HTMLCalciteStackElement;
        new (): HTMLCalciteStackElement;
    };
    interface HTMLCalciteStepperElementEventMap {
        "calciteStepperChange": void;
        "calciteStepperItemChange": void;
        "calciteInternalStepperItemChange": StepperItemChangeEventDetail;
    }
    interface HTMLCalciteStepperElement extends Components.CalciteStepper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteStepperElementEventMap>(type: K, listener: (this: HTMLCalciteStepperElement, ev: CalciteStepperCustomEvent<HTMLCalciteStepperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteStepperElementEventMap>(type: K, listener: (this: HTMLCalciteStepperElement, ev: CalciteStepperCustomEvent<HTMLCalciteStepperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteStepperElement: {
        prototype: HTMLCalciteStepperElement;
        new (): HTMLCalciteStepperElement;
    };
    interface HTMLCalciteStepperItemElementEventMap {
        "calciteInternalStepperItemKeyEvent": StepperItemKeyEventDetail;
        "calciteInternalStepperItemSelect": StepperItemEventDetail;
        "calciteInternalStepperItemRegister": StepperItemEventDetail;
        "calciteStepperItemSelect": void;
    }
    interface HTMLCalciteStepperItemElement extends Components.CalciteStepperItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteStepperItemElementEventMap>(type: K, listener: (this: HTMLCalciteStepperItemElement, ev: CalciteStepperItemCustomEvent<HTMLCalciteStepperItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteStepperItemElementEventMap>(type: K, listener: (this: HTMLCalciteStepperItemElement, ev: CalciteStepperItemCustomEvent<HTMLCalciteStepperItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteStepperItemElement: {
        prototype: HTMLCalciteStepperItemElement;
        new (): HTMLCalciteStepperItemElement;
    };
    interface HTMLCalciteSwitchElementEventMap {
        "calciteSwitchChange": void;
    }
    interface HTMLCalciteSwitchElement extends Components.CalciteSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteSwitchElementEventMap>(type: K, listener: (this: HTMLCalciteSwitchElement, ev: CalciteSwitchCustomEvent<HTMLCalciteSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteSwitchElementEventMap>(type: K, listener: (this: HTMLCalciteSwitchElement, ev: CalciteSwitchCustomEvent<HTMLCalciteSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteSwitchElement: {
        prototype: HTMLCalciteSwitchElement;
        new (): HTMLCalciteSwitchElement;
    };
    interface HTMLCalciteTabElement extends Components.CalciteTab, HTMLStencilElement {
    }
    var HTMLCalciteTabElement: {
        prototype: HTMLCalciteTabElement;
        new (): HTMLCalciteTabElement;
    };
    interface HTMLCalciteTabNavElementEventMap {
        "calciteTabChange": void;
        "calciteInternalTabNavSlotChange": Element[];
        "calciteInternalTabChange": TabChangeEventDetail;
    }
    interface HTMLCalciteTabNavElement extends Components.CalciteTabNav, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTabNavElementEventMap>(type: K, listener: (this: HTMLCalciteTabNavElement, ev: CalciteTabNavCustomEvent<HTMLCalciteTabNavElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTabNavElementEventMap>(type: K, listener: (this: HTMLCalciteTabNavElement, ev: CalciteTabNavCustomEvent<HTMLCalciteTabNavElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTabNavElement: {
        prototype: HTMLCalciteTabNavElement;
        new (): HTMLCalciteTabNavElement;
    };
    interface HTMLCalciteTabTitleElementEventMap {
        "calciteTabsActivate": void;
        "calciteInternalTabsActivate": TabChangeEventDetail;
        "calciteTabsClose": void;
        "calciteInternalTabsClose": TabCloseEventDetail;
        "calciteInternalTabsFocusNext": void;
        "calciteInternalTabsFocusPrevious": void;
        "calciteInternalTabsFocusFirst": void;
        "calciteInternalTabsFocusLast": void;
        "calciteInternalTabTitleRegister": TabID;
        "calciteInternalTabIconChanged": void;
    }
    interface HTMLCalciteTabTitleElement extends Components.CalciteTabTitle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTabTitleElementEventMap>(type: K, listener: (this: HTMLCalciteTabTitleElement, ev: CalciteTabTitleCustomEvent<HTMLCalciteTabTitleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTabTitleElementEventMap>(type: K, listener: (this: HTMLCalciteTabTitleElement, ev: CalciteTabTitleCustomEvent<HTMLCalciteTabTitleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTabTitleElement: {
        prototype: HTMLCalciteTabTitleElement;
        new (): HTMLCalciteTabTitleElement;
    };
    interface HTMLCalciteTableElementEventMap {
        "calciteTableSelect": void;
        "calciteTablePageChange": void;
        "calciteInternalTableRowFocusChange": TableRowFocusEvent;
    }
    interface HTMLCalciteTableElement extends Components.CalciteTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTableElementEventMap>(type: K, listener: (this: HTMLCalciteTableElement, ev: CalciteTableCustomEvent<HTMLCalciteTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTableElementEventMap>(type: K, listener: (this: HTMLCalciteTableElement, ev: CalciteTableCustomEvent<HTMLCalciteTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTableElement: {
        prototype: HTMLCalciteTableElement;
        new (): HTMLCalciteTableElement;
    };
    interface HTMLCalciteTableCellElement extends Components.CalciteTableCell, HTMLStencilElement {
    }
    var HTMLCalciteTableCellElement: {
        prototype: HTMLCalciteTableCellElement;
        new (): HTMLCalciteTableCellElement;
    };
    interface HTMLCalciteTableHeaderElement extends Components.CalciteTableHeader, HTMLStencilElement {
    }
    var HTMLCalciteTableHeaderElement: {
        prototype: HTMLCalciteTableHeaderElement;
        new (): HTMLCalciteTableHeaderElement;
    };
    interface HTMLCalciteTableRowElementEventMap {
        "calciteTableRowSelect": void;
        "calciteInternalTableRowFocusRequest": TableRowFocusEvent;
    }
    interface HTMLCalciteTableRowElement extends Components.CalciteTableRow, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTableRowElementEventMap>(type: K, listener: (this: HTMLCalciteTableRowElement, ev: CalciteTableRowCustomEvent<HTMLCalciteTableRowElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTableRowElementEventMap>(type: K, listener: (this: HTMLCalciteTableRowElement, ev: CalciteTableRowCustomEvent<HTMLCalciteTableRowElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTableRowElement: {
        prototype: HTMLCalciteTableRowElement;
        new (): HTMLCalciteTableRowElement;
    };
    interface HTMLCalciteTabsElement extends Components.CalciteTabs, HTMLStencilElement {
    }
    var HTMLCalciteTabsElement: {
        prototype: HTMLCalciteTabsElement;
        new (): HTMLCalciteTabsElement;
    };
    interface HTMLCalciteTextAreaElementEventMap {
        "calciteTextAreaInput": void;
        "calciteTextAreaChange": void;
    }
    interface HTMLCalciteTextAreaElement extends Components.CalciteTextArea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTextAreaElementEventMap>(type: K, listener: (this: HTMLCalciteTextAreaElement, ev: CalciteTextAreaCustomEvent<HTMLCalciteTextAreaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTextAreaElementEventMap>(type: K, listener: (this: HTMLCalciteTextAreaElement, ev: CalciteTextAreaCustomEvent<HTMLCalciteTextAreaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTextAreaElement: {
        prototype: HTMLCalciteTextAreaElement;
        new (): HTMLCalciteTextAreaElement;
    };
    interface HTMLCalciteTileElementEventMap {
        "calciteInternalTileKeyEvent": KeyboardEvent;
        "calciteTileSelect": void;
    }
    interface HTMLCalciteTileElement extends Components.CalciteTile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTileElementEventMap>(type: K, listener: (this: HTMLCalciteTileElement, ev: CalciteTileCustomEvent<HTMLCalciteTileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTileElementEventMap>(type: K, listener: (this: HTMLCalciteTileElement, ev: CalciteTileCustomEvent<HTMLCalciteTileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTileElement: {
        prototype: HTMLCalciteTileElement;
        new (): HTMLCalciteTileElement;
    };
    interface HTMLCalciteTileGroupElementEventMap {
        "calciteTileGroupSelect": void;
    }
    interface HTMLCalciteTileGroupElement extends Components.CalciteTileGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTileGroupElementEventMap>(type: K, listener: (this: HTMLCalciteTileGroupElement, ev: CalciteTileGroupCustomEvent<HTMLCalciteTileGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTileGroupElementEventMap>(type: K, listener: (this: HTMLCalciteTileGroupElement, ev: CalciteTileGroupCustomEvent<HTMLCalciteTileGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTileGroupElement: {
        prototype: HTMLCalciteTileGroupElement;
        new (): HTMLCalciteTileGroupElement;
    };
    interface HTMLCalciteTileSelectElementEventMap {
        "calciteTileSelectChange": void;
    }
    /**
     * @deprecated Use the `calcite-tile` component instead.
     */
    interface HTMLCalciteTileSelectElement extends Components.CalciteTileSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTileSelectElementEventMap>(type: K, listener: (this: HTMLCalciteTileSelectElement, ev: CalciteTileSelectCustomEvent<HTMLCalciteTileSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTileSelectElementEventMap>(type: K, listener: (this: HTMLCalciteTileSelectElement, ev: CalciteTileSelectCustomEvent<HTMLCalciteTileSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTileSelectElement: {
        prototype: HTMLCalciteTileSelectElement;
        new (): HTMLCalciteTileSelectElement;
    };
    /**
     * @deprecated Use the `calcite-tile-group` component instead.
     */
    interface HTMLCalciteTileSelectGroupElement extends Components.CalciteTileSelectGroup, HTMLStencilElement {
    }
    var HTMLCalciteTileSelectGroupElement: {
        prototype: HTMLCalciteTileSelectGroupElement;
        new (): HTMLCalciteTileSelectGroupElement;
    };
    interface HTMLCalciteTimePickerElementEventMap {
        "calciteInternalTimePickerChange": void;
    }
    interface HTMLCalciteTimePickerElement extends Components.CalciteTimePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTimePickerElementEventMap>(type: K, listener: (this: HTMLCalciteTimePickerElement, ev: CalciteTimePickerCustomEvent<HTMLCalciteTimePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTimePickerElementEventMap>(type: K, listener: (this: HTMLCalciteTimePickerElement, ev: CalciteTimePickerCustomEvent<HTMLCalciteTimePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTimePickerElement: {
        prototype: HTMLCalciteTimePickerElement;
        new (): HTMLCalciteTimePickerElement;
    };
    interface HTMLCalciteTipElementEventMap {
        "calciteTipDismiss": void;
    }
    /**
     * @deprecated Use the `calcite-card`, `calcite-notice`, `calcite-panel`, or `calcite-tile` component instead.
     */
    interface HTMLCalciteTipElement extends Components.CalciteTip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTipElementEventMap>(type: K, listener: (this: HTMLCalciteTipElement, ev: CalciteTipCustomEvent<HTMLCalciteTipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTipElementEventMap>(type: K, listener: (this: HTMLCalciteTipElement, ev: CalciteTipCustomEvent<HTMLCalciteTipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTipElement: {
        prototype: HTMLCalciteTipElement;
        new (): HTMLCalciteTipElement;
    };
    /**
     * @deprecated Use the `calcite-carousel` and `calcite-carousel-item` components instead.
     */
    interface HTMLCalciteTipGroupElement extends Components.CalciteTipGroup, HTMLStencilElement {
    }
    var HTMLCalciteTipGroupElement: {
        prototype: HTMLCalciteTipGroupElement;
        new (): HTMLCalciteTipGroupElement;
    };
    interface HTMLCalciteTipManagerElementEventMap {
        "calciteTipManagerClose": void;
    }
    /**
     * @deprecated Use the `calcite-carousel` and `calcite-carousel-item` components instead.
     */
    interface HTMLCalciteTipManagerElement extends Components.CalciteTipManager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTipManagerElementEventMap>(type: K, listener: (this: HTMLCalciteTipManagerElement, ev: CalciteTipManagerCustomEvent<HTMLCalciteTipManagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTipManagerElementEventMap>(type: K, listener: (this: HTMLCalciteTipManagerElement, ev: CalciteTipManagerCustomEvent<HTMLCalciteTipManagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTipManagerElement: {
        prototype: HTMLCalciteTipManagerElement;
        new (): HTMLCalciteTipManagerElement;
    };
    interface HTMLCalciteTooltipElementEventMap {
        "calciteTooltipBeforeClose": void;
        "calciteTooltipClose": void;
        "calciteTooltipBeforeOpen": void;
        "calciteTooltipOpen": void;
    }
    interface HTMLCalciteTooltipElement extends Components.CalciteTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTooltipElementEventMap>(type: K, listener: (this: HTMLCalciteTooltipElement, ev: CalciteTooltipCustomEvent<HTMLCalciteTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTooltipElementEventMap>(type: K, listener: (this: HTMLCalciteTooltipElement, ev: CalciteTooltipCustomEvent<HTMLCalciteTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTooltipElement: {
        prototype: HTMLCalciteTooltipElement;
        new (): HTMLCalciteTooltipElement;
    };
    interface HTMLCalciteTreeElementEventMap {
        "calciteTreeSelect": void;
    }
    interface HTMLCalciteTreeElement extends Components.CalciteTree, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTreeElementEventMap>(type: K, listener: (this: HTMLCalciteTreeElement, ev: CalciteTreeCustomEvent<HTMLCalciteTreeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTreeElementEventMap>(type: K, listener: (this: HTMLCalciteTreeElement, ev: CalciteTreeCustomEvent<HTMLCalciteTreeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTreeElement: {
        prototype: HTMLCalciteTreeElement;
        new (): HTMLCalciteTreeElement;
    };
    interface HTMLCalciteTreeItemElementEventMap {
        "calciteInternalTreeItemSelect": TreeItemSelectDetail;
    }
    interface HTMLCalciteTreeItemElement extends Components.CalciteTreeItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteTreeItemElementEventMap>(type: K, listener: (this: HTMLCalciteTreeItemElement, ev: CalciteTreeItemCustomEvent<HTMLCalciteTreeItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteTreeItemElementEventMap>(type: K, listener: (this: HTMLCalciteTreeItemElement, ev: CalciteTreeItemCustomEvent<HTMLCalciteTreeItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteTreeItemElement: {
        prototype: HTMLCalciteTreeItemElement;
        new (): HTMLCalciteTreeItemElement;
    };
    interface HTMLCalciteValueListElementEventMap {
        "calciteListChange": Map<string, HTMLCalciteValueListItemElement>;
        "calciteListOrderChange": any[];
        "calciteListFilter": void;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface HTMLCalciteValueListElement extends Components.CalciteValueList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteValueListElementEventMap>(type: K, listener: (this: HTMLCalciteValueListElement, ev: CalciteValueListCustomEvent<HTMLCalciteValueListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteValueListElementEventMap>(type: K, listener: (this: HTMLCalciteValueListElement, ev: CalciteValueListCustomEvent<HTMLCalciteValueListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteValueListElement: {
        prototype: HTMLCalciteValueListElement;
        new (): HTMLCalciteValueListElement;
    };
    interface HTMLCalciteValueListItemElementEventMap {
        "calciteListItemChange": {
    item: HTMLCalciteValueListItemElement;
    value: any;
    selected: boolean;
    shiftPressed: boolean;
  };
        "calciteListItemRemove": void;
        "calciteValueListItemDragHandleBlur": ListItemAndHandle;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface HTMLCalciteValueListItemElement extends Components.CalciteValueListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCalciteValueListItemElementEventMap>(type: K, listener: (this: HTMLCalciteValueListItemElement, ev: CalciteValueListItemCustomEvent<HTMLCalciteValueListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCalciteValueListItemElementEventMap>(type: K, listener: (this: HTMLCalciteValueListItemElement, ev: CalciteValueListItemCustomEvent<HTMLCalciteValueListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCalciteValueListItemElement: {
        prototype: HTMLCalciteValueListItemElement;
        new (): HTMLCalciteValueListItemElement;
    };
    interface HTMLElementTagNameMap {
        "calcite-accordion": HTMLCalciteAccordionElement;
        "calcite-accordion-item": HTMLCalciteAccordionItemElement;
        "calcite-action": HTMLCalciteActionElement;
        "calcite-action-bar": HTMLCalciteActionBarElement;
        "calcite-action-group": HTMLCalciteActionGroupElement;
        "calcite-action-menu": HTMLCalciteActionMenuElement;
        "calcite-action-pad": HTMLCalciteActionPadElement;
        "calcite-alert": HTMLCalciteAlertElement;
        "calcite-avatar": HTMLCalciteAvatarElement;
        "calcite-block": HTMLCalciteBlockElement;
        "calcite-block-section": HTMLCalciteBlockSectionElement;
        "calcite-button": HTMLCalciteButtonElement;
        "calcite-card": HTMLCalciteCardElement;
        "calcite-card-group": HTMLCalciteCardGroupElement;
        "calcite-carousel": HTMLCalciteCarouselElement;
        "calcite-carousel-item": HTMLCalciteCarouselItemElement;
        "calcite-checkbox": HTMLCalciteCheckboxElement;
        "calcite-chip": HTMLCalciteChipElement;
        "calcite-chip-group": HTMLCalciteChipGroupElement;
        "calcite-color-picker": HTMLCalciteColorPickerElement;
        "calcite-color-picker-hex-input": HTMLCalciteColorPickerHexInputElement;
        "calcite-color-picker-swatch": HTMLCalciteColorPickerSwatchElement;
        "calcite-combobox": HTMLCalciteComboboxElement;
        "calcite-combobox-item": HTMLCalciteComboboxItemElement;
        "calcite-combobox-item-group": HTMLCalciteComboboxItemGroupElement;
        "calcite-date-picker": HTMLCalciteDatePickerElement;
        "calcite-date-picker-day": HTMLCalciteDatePickerDayElement;
        "calcite-date-picker-month": HTMLCalciteDatePickerMonthElement;
        "calcite-date-picker-month-header": HTMLCalciteDatePickerMonthHeaderElement;
        "calcite-dialog": HTMLCalciteDialogElement;
        "calcite-dropdown": HTMLCalciteDropdownElement;
        "calcite-dropdown-group": HTMLCalciteDropdownGroupElement;
        "calcite-dropdown-item": HTMLCalciteDropdownItemElement;
        "calcite-fab": HTMLCalciteFabElement;
        "calcite-filter": HTMLCalciteFilterElement;
        "calcite-flow": HTMLCalciteFlowElement;
        "calcite-flow-item": HTMLCalciteFlowItemElement;
        "calcite-graph": HTMLCalciteGraphElement;
        "calcite-handle": HTMLCalciteHandleElement;
        "calcite-icon": HTMLCalciteIconElement;
        "calcite-inline-editable": HTMLCalciteInlineEditableElement;
        "calcite-input": HTMLCalciteInputElement;
        "calcite-input-date-picker": HTMLCalciteInputDatePickerElement;
        "calcite-input-message": HTMLCalciteInputMessageElement;
        "calcite-input-number": HTMLCalciteInputNumberElement;
        "calcite-input-text": HTMLCalciteInputTextElement;
        "calcite-input-time-picker": HTMLCalciteInputTimePickerElement;
        "calcite-input-time-zone": HTMLCalciteInputTimeZoneElement;
        "calcite-label": HTMLCalciteLabelElement;
        "calcite-link": HTMLCalciteLinkElement;
        "calcite-list": HTMLCalciteListElement;
        "calcite-list-item": HTMLCalciteListItemElement;
        "calcite-list-item-group": HTMLCalciteListItemGroupElement;
        "calcite-loader": HTMLCalciteLoaderElement;
        "calcite-menu": HTMLCalciteMenuElement;
        "calcite-menu-item": HTMLCalciteMenuItemElement;
        "calcite-meter": HTMLCalciteMeterElement;
        "calcite-modal": HTMLCalciteModalElement;
        "calcite-navigation": HTMLCalciteNavigationElement;
        "calcite-navigation-logo": HTMLCalciteNavigationLogoElement;
        "calcite-navigation-user": HTMLCalciteNavigationUserElement;
        "calcite-notice": HTMLCalciteNoticeElement;
        "calcite-option": HTMLCalciteOptionElement;
        "calcite-option-group": HTMLCalciteOptionGroupElement;
        "calcite-pagination": HTMLCalcitePaginationElement;
        "calcite-panel": HTMLCalcitePanelElement;
        "calcite-pick-list": HTMLCalcitePickListElement;
        "calcite-pick-list-group": HTMLCalcitePickListGroupElement;
        "calcite-pick-list-item": HTMLCalcitePickListItemElement;
        "calcite-popover": HTMLCalcitePopoverElement;
        "calcite-progress": HTMLCalciteProgressElement;
        "calcite-radio-button": HTMLCalciteRadioButtonElement;
        "calcite-radio-button-group": HTMLCalciteRadioButtonGroupElement;
        "calcite-rating": HTMLCalciteRatingElement;
        "calcite-scrim": HTMLCalciteScrimElement;
        "calcite-segmented-control": HTMLCalciteSegmentedControlElement;
        "calcite-segmented-control-item": HTMLCalciteSegmentedControlItemElement;
        "calcite-select": HTMLCalciteSelectElement;
        "calcite-sheet": HTMLCalciteSheetElement;
        "calcite-shell": HTMLCalciteShellElement;
        "calcite-shell-center-row": HTMLCalciteShellCenterRowElement;
        "calcite-shell-panel": HTMLCalciteShellPanelElement;
        "calcite-slider": HTMLCalciteSliderElement;
        "calcite-sortable-list": HTMLCalciteSortableListElement;
        "calcite-split-button": HTMLCalciteSplitButtonElement;
        "calcite-stack": HTMLCalciteStackElement;
        "calcite-stepper": HTMLCalciteStepperElement;
        "calcite-stepper-item": HTMLCalciteStepperItemElement;
        "calcite-switch": HTMLCalciteSwitchElement;
        "calcite-tab": HTMLCalciteTabElement;
        "calcite-tab-nav": HTMLCalciteTabNavElement;
        "calcite-tab-title": HTMLCalciteTabTitleElement;
        "calcite-table": HTMLCalciteTableElement;
        "calcite-table-cell": HTMLCalciteTableCellElement;
        "calcite-table-header": HTMLCalciteTableHeaderElement;
        "calcite-table-row": HTMLCalciteTableRowElement;
        "calcite-tabs": HTMLCalciteTabsElement;
        "calcite-text-area": HTMLCalciteTextAreaElement;
        "calcite-tile": HTMLCalciteTileElement;
        "calcite-tile-group": HTMLCalciteTileGroupElement;
        "calcite-tile-select": HTMLCalciteTileSelectElement;
        "calcite-tile-select-group": HTMLCalciteTileSelectGroupElement;
        "calcite-time-picker": HTMLCalciteTimePickerElement;
        "calcite-tip": HTMLCalciteTipElement;
        "calcite-tip-group": HTMLCalciteTipGroupElement;
        "calcite-tip-manager": HTMLCalciteTipManagerElement;
        "calcite-tooltip": HTMLCalciteTooltipElement;
        "calcite-tree": HTMLCalciteTreeElement;
        "calcite-tree-item": HTMLCalciteTreeItemElement;
        "calcite-value-list": HTMLCalciteValueListElement;
        "calcite-value-list-item": HTMLCalciteValueListItemElement;
    }
}
declare namespace LocalJSX {
    interface CalciteAccordion {
        /**
          * Specifies the appearance of the component.
         */
        "appearance"?: Extract<"solid" | "transparent", Appearance>;
        /**
          * Specifies the placement of the icon in the header.
         */
        "iconPosition"?: Extract<"start" | "end", Position>;
        /**
          * Specifies the type of the icon in the header.
         */
        "iconType"?: Extract<"chevron" | "caret" | "plus-minus", IconType>;
        "onCalciteInternalAccordionChange"?: (event: CalciteAccordionCustomEvent<RequestedItem>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection, and  `"single-persist"` allows one selection and prevents de-selection.
         */
        "selectionMode"?: Extract<
    "single" | "single-persist" | "multiple",
    SelectionMode
  >;
    }
    interface CalciteAccordionItem {
        /**
          * The containing `accordion` element.
         */
        "accordionParent"?: HTMLCalciteAccordionElement;
        /**
          * Specifies a description for the component.
         */
        "description"?: string;
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Specifies heading text for the component.
         */
        "heading"?: string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies the placement of the icon in the header inherited from the `calcite-accordion`.
         */
        "iconPosition"?: Extract<"start" | "end", Position>;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: IconNameOrString;
        /**
          * Specifies the type of the icon in the header inherited from the `calcite-accordion`.
         */
        "iconType"?: Extract<"chevron" | "caret" | "plus-minus", IconType>;
        "onCalciteInternalAccordionItemClose"?: (event: CalciteAccordionItemCustomEvent<void>) => void;
        "onCalciteInternalAccordionItemSelect"?: (event: CalciteAccordionItemCustomEvent<RequestedItem1>) => void;
        /**
          * Specifies the size of the component inherited from the `calcite-accordion`.
         */
        "scale"?: Scale;
    }
    interface CalciteAction {
        /**
          * When `true`, the component is highlighted.
         */
        "active"?: boolean;
        /**
          * Specifies the horizontal alignment of button elements with text content.
         */
        "alignment"?: Alignment;
        /**
          * Specifies the appearance of the component.
         */
        "appearance"?: Extract<"solid" | "transparent", Appearance>;
        /**
          * When `true`, the side padding of the component is reduced.
          * @deprecated No longer necessary.
         */
        "compact"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies an icon to display.
         */
        "icon"?: IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * When `true`, displays a visual indicator.
         */
        "indicator"?: boolean;
        /**
          * Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ActionMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ActionMessages;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies text that accompanies the icon.
         */
        "text": string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled"?: boolean;
    }
    interface CalciteActionBar {
        /**
          * Specifies the accessible label for the last `calcite-action-group`.
         */
        "actionsEndGroupLabel"?: string;
        /**
          * When `true`, the expand-toggling behavior is disabled.
         */
        "expandDisabled"?: boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Specifies the layout direction of the actions.
         */
        "layout"?: Extract<"horizontal" | "vertical", Layout>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ActionBarMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ActionBarMessages;
        /**
          * Fires when the `expanded` property is toggled.
         */
        "onCalciteActionBarToggle"?: (event: CalciteActionBarCustomEvent<void>) => void;
        /**
          * Disables automatically overflowing `calcite-action`s that won't fit into menus.
         */
        "overflowActionsDisabled"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position"?: Extract<"start" | "end", Position>;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale"?: Scale;
    }
    interface CalciteActionGroup {
        /**
          * Indicates number of columns.
         */
        "columns"?: Columns;
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Indicates the layout of the component.
          * @deprecated Use the `layout` property on the component's parent instead.
         */
        "layout"?: Extract<"horizontal" | "vertical" | "grid", Layout>;
        /**
          * Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "menuFlipPlacements"?: FlipPlacement[];
        /**
          * When `true`, the `calcite-action-menu` is open.
         */
        "menuOpen"?: boolean;
        /**
          * Determines where the action menu will be positioned.
         */
        "menuPlacement"?: LogicalPlacement;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ActionGroupMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ActionGroupMessages;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout. `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Specifies the size of the `calcite-action-menu`.
         */
        "scale"?: Scale;
    }
    interface CalciteActionMenu {
        /**
          * Specifies the appearance of the component.
         */
        "appearance"?: Extract<"solid" | "transparent", Appearance>;
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Specifies the component's fallback slotted content `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "flipPlacements"?: FlipPlacement[];
        /**
          * Specifies the text string for the component.
         */
        "label": string;
        /**
          * Fires when the `open` property is toggled.
         */
        "onCalciteActionMenuOpen"?: (event: CalciteActionMenuCustomEvent<void>) => void;
        /**
          * When `true`, the component is open.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout. `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement"?: LogicalPlacement;
        /**
          * Specifies the size of the component's trigger `calcite-action`.
         */
        "scale"?: Scale;
    }
    interface CalciteActionPad {
        /**
          * Specifies the accessible label for the last `calcite-action-group`.
         */
        "actionsEndGroupLabel"?: string;
        /**
          * When `true`, the expand-toggling behavior is disabled.
         */
        "expandDisabled"?: boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Indicates the layout of the component.
         */
        "layout"?: Extract<"horizontal" | "vertical" | "grid", Layout>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ActionPadMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ActionPadMessages;
        /**
          * Fires when the `expanded` property is toggled.
         */
        "onCalciteActionPadToggle"?: (event: CalciteActionPadCustomEvent<void>) => void;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position"?: Extract<"start" | "end", Position>;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale"?: Scale;
    }
    interface CalciteAlert {
        /**
          * This internal property, managed by the AlertManager, is used to inform the component if it is the active open Alert.
         */
        "active"?: boolean;
        /**
          * When `true`, the component closes automatically. Recommended for passive, non-blocking alerts.
         */
        "autoClose"?: boolean;
        /**
          * Specifies the duration before the component automatically closes - only use with `autoClose`.
         */
        "autoCloseDuration"?: AlertDuration;
        /**
          * This internal property, managed by a containing calcite-shell, is used to inform the component if special configuration or styles are needed
         */
        "embedded"?: boolean;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon"?: IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the kind of the component, which will apply to top border and icon.
         */
        "kind"?: Extract<
    "brand" | "danger" | "info" | "success" | "warning",
    Kind
  >;
        /**
          * Specifies an accessible name for the component.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<AlertMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: AlertMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteAlertBeforeClose"?: (event: CalciteAlertCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteAlertBeforeOpen"?: (event: CalciteAlertCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteAlertClose"?: (event: CalciteAlertCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteAlertOpen"?: (event: CalciteAlertCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * This internal property, managed by the AlertManager, is used to inform the component of how many alerts are currently open.
         */
        "openAlertCount"?: number;
        /**
          * Specifies the placement of the component.
         */
        "placement"?: MenuPlacement;
        /**
          * Specifies the ordering priority of the component when opened.
         */
        "queue"?: AlertQueue;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
    }
    interface CalciteAvatar {
        /**
          * Specifies the full name of the user. When `label` and `thumbnail` are not defined, specifies the accessible name for the component.
         */
        "fullName"?: string;
        /**
          * Specifies alternative text when `thumbnail` is defined, otherwise specifies an accessible label.
         */
        "label"?: string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the `src` to an image (remember to add a token if the user is private).
         */
        "thumbnail"?: string;
        /**
          * Specifies the unique id of the user.
         */
        "userId"?: string;
        /**
          * Specifies the username of the user.
         */
        "username"?: string;
    }
    interface CalciteBlock {
        /**
          * When `true`, the component is collapsible.
         */
        "collapsible"?: boolean;
        /**
          * A description for the component, which displays below the heading.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, displays a drag handle in the header.
         */
        "dragHandle"?: boolean;
        /**
          * The component header text.
         */
        "heading": string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: IconNameOrString;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "menuFlipPlacements"?: FlipPlacement[];
        /**
          * Determines where the action menu will be positioned.
         */
        "menuPlacement"?: LogicalPlacement;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<BlockMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: BlockMessages;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteBlockBeforeClose"?: (event: CalciteBlockCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteBlockBeforeOpen"?: (event: CalciteBlockCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteBlockClose"?: (event: CalciteBlockCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteBlockOpen"?: (event: CalciteBlockCustomEvent<void>) => void;
        /**
          * Fires when the component's header is clicked.
          * @deprecated Use `openClose` events such as `calciteBlockOpen`, `calciteBlockClose`, `calciteBlockBeforeOpen`, and `calciteBlockBeforeClose` instead.
         */
        "onCalciteBlockToggle"?: (event: CalciteBlockCustomEvent<void>) => void;
        /**
          * When `true`, expands the component and its contents.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Displays a status-related indicator icon.
          * @deprecated Use `icon-start` instead.
         */
        "status"?: Status;
    }
    interface CalciteBlockSection {
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: IconNameOrString;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<BlockSectionMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: BlockSectionMessages;
        /**
          * Fires when the header has been clicked.
         */
        "onCalciteBlockSectionToggle"?: (event: CalciteBlockSectionCustomEvent<void>) => void;
        /**
          * When `true`, expands the component and its contents.
         */
        "open"?: boolean;
        /**
          * Displays a status-related indicator icon.
          * @deprecated Use `icon-start` instead.
         */
        "status"?: Status;
        /**
          * The component header text.
         */
        "text"?: string;
        /**
          * Specifies how the component's toggle is displayed, where:  `"button"` sets the toggle to a selectable header, and  `"switch"` sets the toggle to a switch.
         */
        "toggleDisplay"?: BlockSectionToggleDisplay;
    }
    interface CalciteButton {
        /**
          * Specifies the alignment of the component's elements.
         */
        "alignment"?: ButtonAlignment;
        /**
          * Specifies the appearance style of the component.
         */
        "appearance"?: Extract<
    "outline" | "outline-fill" | "solid" | "transparent",
    Appearance
  >;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value: Without a value, the browser will suggest a filename/extension See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download.
         */
        "download"?: string | boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.
         */
        "href"?: string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: IconNameOrString;
        /**
          * Specifies the kind of the component, which will apply to the border and background if applicable.
         */
        "kind"?: Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true`, a busy indicator is displayed and interaction is disabled.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ButtonMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ButtonMessages;
        /**
          * Specifies the name of the component on form submission.
         */
        "name"?: string;
        /**
          * Defines the relationship between the `href` value and the current document.
          * @mdn [rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)
         */
        "rel"?: string;
        /**
          * When `true`, adds a round style to the component.
         */
        "round"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies if the component is a child of a `calcite-split-button`.
         */
        "splitChild"?: "primary" | "secondary" | false;
        /**
          * Specifies where to open the linked document defined in the `href` property.
          * @mdn [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)
         */
        "target"?: string;
        /**
          * Specifies the default behavior of the component.
          * @mdn [type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)
         */
        "type"?: string;
        /**
          * Specifies the width of the component.
         */
        "width"?: Width;
    }
    interface CalciteCard {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<CardMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: CardMessages;
        /**
          * Fires when the deprecated `selectable` is true, or `selectionMode` set on parent `calcite-card-group` is not `none` and the component is selected.
         */
        "onCalciteCardSelect"?: (event: CalciteCardCustomEvent<void>) => void;
        "onCalciteInternalCardKeyEvent"?: (event: CalciteCardCustomEvent<KeyboardEvent>) => void;
        /**
          * When `true`, the component is selectable.
          * @deprecated use `selectionMode` property on a parent `calcite-card-group` instead.
         */
        "selectable"?: boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * This internal property, managed by a containing `calcite-card-group`, is conditionally set based on the `selectionMode` of the parent
         */
        "selectionMode"?: Extract<"multiple" | "single" | "single-persist" | "none", SelectionMode>;
        /**
          * Sets the placement of the thumbnail defined in the `thumbnail` slot.
         */
        "thumbnailPosition"?: LogicalFlowPosition;
    }
    interface CalciteCardGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Emits when the component's selection changes and the `selectionMode` is not `none`.
         */
        "onCalciteCardGroupSelect"?: (event: CalciteCardGroupCustomEvent<void>) => void;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteCardElement[];
        /**
          * Specifies the selection mode of the component.
         */
        "selectionMode"?: Extract<
    "multiple" | "single" | "single-persist" | "none",
    SelectionMode
  >;
    }
    interface CalciteCarousel {
        /**
          * Specifies how and if the "previous" and "next" arrows are displayed.
         */
        "arrowType"?: ArrowType;
        /**
          * When `true`, the carousel will autoplay and controls will be displayed. When "paused" at time of initialization, the carousel will not autoplay, but controls will be displayed.
         */
        "autoplay"?: AutoplayType;
        /**
          * When `autoplay` is `true`, specifies in milliseconds the length of time to display each Carousel Item.
         */
        "autoplayDuration"?: number;
        /**
          * Specifies if the component's controls are positioned absolutely on top of slotted Carousel Items.
         */
        "controlOverlay"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<CarouselMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: CarouselMessages;
        /**
          * Fires when the selected `calcite-carousel-item` changes.
         */
        "onCalciteCarouselChange"?: (event: CalciteCarouselCustomEvent<void>) => void;
        /**
          * Fires when the carousel autoplay state pauses due to a user hovering over the component or focusing on the component or slotted content
         */
        "onCalciteCarouselPause"?: (event: CalciteCarouselCustomEvent<void>) => void;
        /**
          * Fires when the carousel autoplay is invoked by the user.
         */
        "onCalciteCarouselPlay"?: (event: CalciteCarouselCustomEvent<void>) => void;
        /**
          * Fires when the carousel autoplay state resumes due to a user no longer hovering over the component or focusing on the component or slotted content
         */
        "onCalciteCarouselResume"?: (event: CalciteCarouselCustomEvent<void>) => void;
        /**
          * Fires when the carousel autoplay state is stopped by a user.
         */
        "onCalciteCarouselStop"?: (event: CalciteCarouselCustomEvent<void>) => void;
        /**
          * Made into a prop for testing purposes only
         */
        "paused"?: boolean;
        /**
          * The component's selected `calcite-carousel-item`.
          * @readonly
         */
        "selectedItem"?: HTMLCalciteCarouselItemElement;
    }
    interface CalciteCarouselItem {
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
    }
    interface CalciteCheckbox {
        /**
          * When `true`, the component is checked.
         */
        "checked"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * The `id` attribute of the component. When omitted, a globally unique identifier is used.
         */
        "guid"?: string;
        /**
          * The hovered state of the checkbox.
         */
        "hovered"?: boolean;
        /**
          * When `true`, the component is initially indeterminate, which is independent from its `checked` value.  The state is visual only, and can look different across browsers.
          * @mdn [indeterminate](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes)
         */
        "indeterminate"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the component's `checked` status changes.
         */
        "onCalciteCheckboxChange"?: (event: CalciteCheckboxCustomEvent<void>) => void;
        /**
          * Fires when the component is blurred.
         */
        "onCalciteInternalCheckboxBlur"?: (event: CalciteCheckboxCustomEvent<boolean>) => void;
        /**
          * Fires when the component is focused.
         */
        "onCalciteInternalCheckboxFocus"?: (event: CalciteCheckboxCustomEvent<boolean>) => void;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity"?: MutableValidityState;
        /**
          * The component's value.
         */
        "value"?: any;
    }
    interface CalciteChip {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance"?: Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, a close button is added to the component.
         */
        "closable"?: boolean;
        /**
          * When `true`, hides the component.
         */
        "closed"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies an icon to display.
         */
        "icon"?: IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * When true, enables the chip to be focused, and allows the `calciteChipSelect` to emit. This is set to `true` by a parent Chip Group component.
         */
        "interactive"?: boolean;
        /**
          * Specifies the kind of the component, which will apply to border and background if applicable.
         */
        "kind"?: Extract<"brand" | "inverse" | "neutral", Kind>;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ChipMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ChipMessages;
        /**
          * Fires when the component's close button is selected.
         */
        "onCalciteChipClose"?: (event: CalciteChipCustomEvent<void>) => void;
        /**
          * Fires when the selected state of the component changes.
         */
        "onCalciteChipSelect"?: (event: CalciteChipCustomEvent<void>) => void;
        "onCalciteInternalChipKeyEvent"?: (event: CalciteChipCustomEvent<KeyboardEvent>) => void;
        "onCalciteInternalChipSelect"?: (event: CalciteChipCustomEvent<void>) => void;
        "onCalciteInternalSyncSelectedChips"?: (event: CalciteChipCustomEvent<void>) => void;
        "parentChipGroup"?: HTMLCalciteChipGroupElement;
        /**
          * Specifies the size of the component. When contained in a parent `calcite-chip-group` inherits the parent's `scale` value.
         */
        "scale"?: Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * This internal property, managed by a containing `calcite-chip-group`, is conditionally set based on the `selectionMode` of the parent
         */
        "selectionMode"?: Extract<"multiple" | "single" | "single-persist" | "none", SelectionMode>;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteChipGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Fires when the component's selection changes.
         */
        "onCalciteChipGroupSelect"?: (event: CalciteChipGroupCustomEvent<void>) => void;
        /**
          * Specifies the size of the component. Child `calcite-chip`s inherit the component's value.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteChipElement[];
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection,  `"single-persist"` allows one selection and prevents de-selection, and  `"none"` does not allow any selections.
         */
        "selectionMode"?: Extract<
    "multiple" | "single" | "single-persist" | "none",
    SelectionMode
  >;
    }
    interface CalciteColorPicker {
        /**
          * When `true`, an empty color (`null`) will be allowed as a `value`.  When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.
          * @deprecated Use `clearable` instead
         */
        "allowEmpty"?: boolean;
        /**
          * When `true`, the component will allow updates to the color's alpha value.
         */
        "alphaChannel"?: boolean;
        /**
          * When `true`, hides the RGB/HSV channel inputs.
         */
        "channelsDisabled"?: boolean;
        /**
          * When `true`, an empty color (`null`) will be allowed as a `value`.  When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.
         */
        "clearable"?: boolean;
        /**
          * Internal prop for advanced use-cases.
         */
        "color"?: InternalColor | null;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The format of `value`.  When `"auto"`, the format will be inferred from `value` when set.
          * @default "auto"
         */
        "format"?: Format;
        /**
          * When `true`, hides the hex input.
         */
        "hexDisabled"?: boolean;
        /**
          * When `true`, hides the RGB/HSV channel inputs.
          * @deprecated use `channelsDisabled` instead
         */
        "hideChannels"?: boolean;
        /**
          * When `true`, hides the hex input.
          * @deprecated use `hexDisabled` instead
         */
        "hideHex"?: boolean;
        /**
          * When `true`, hides the saved colors section.
          * @deprecated use `savedDisabled` instead
         */
        "hideSaved"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ColorPickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ColorPickerMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the color value has changed.
         */
        "onCalciteColorPickerChange"?: (event: CalciteColorPickerCustomEvent<void>) => void;
        /**
          * Fires as the color value changes.  Similar to the `calciteColorPickerChange` event with the exception of dragging. When dragging the color field or hue slider thumb, this event fires as the thumb is moved.
         */
        "onCalciteColorPickerInput"?: (event: CalciteColorPickerCustomEvent<void>) => void;
        /**
          * When `true`, hides the saved colors section.
         */
        "savedDisabled"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the storage ID for colors.
         */
        "storageId"?: string;
        /**
          * The component's value, where the value can be a CSS color string, or a RGB, HSL or HSV object.  The type will be preserved as the color is updated.
          * @default "#007ac2"
          * @see [CSS Color](https://developer.mozilla.org/en-US/docs/Web/CSS/color)
          * @see [ColorValue](https://github.com/Esri/calcite-design-system/blob/dev/src/components/color-picker/interfaces.ts#L10)
         */
        "value"?: ColorValue | null;
    }
    interface CalciteColorPickerHexInput {
        /**
          * When `true`, an empty color (`undefined`) will be allowed as a `value`.  When `false`, a color value is enforced, and clearing the input or blurring will restore the last valid `value`.
         */
        "allowEmpty"?: boolean;
        /**
          * When `true`, the component will allow updates to the color's alpha value.
         */
        "alphaChannel"?: boolean;
        /**
          * Specifies accessible label for the input field.
          * @deprecated use `messages` instead
         */
        "hexLabel"?: string;
        /**
          * Messages are passed by parent component for accessible labels.
         */
        "messages"?: ColorPickerMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Emitted when the hex value changes.
         */
        "onCalciteColorPickerHexInputChange"?: (event: CalciteColorPickerHexInputCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The hex value.
         */
        "value"?: string;
    }
    interface CalciteColorPickerSwatch {
        /**
          * When `true`, the component is active.
         */
        "active"?: boolean;
        /**
          * The color value.
          * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
         */
        "color"?: string | null;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
    }
    interface CalciteCombobox {
        /**
          * When `true`, allows entry of custom values, which are not in the original set of items.
         */
        "allowCustomValues"?: boolean;
        /**
          * When `true`, the value-clearing will be disabled.
         */
        "clearDisabled"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Text for the component's filter input field.
         */
        "filterText"?: string;
        /**
          * Specifies the component's filtered items.
          * @readonly
         */
        "filteredItems"?: HTMLCalciteComboboxItemElement[];
        /**
          * Specifies the component's fallback slotted content placement when it's initial placement has insufficient space available.
         */
        "flipPlacements"?: FlipPlacement[];
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the maximum number of `calcite-combobox-item`s (including nested children) to display before displaying a scrollbar.
         */
        "maxItems"?: number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ComboboxMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ComboboxMessages;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the component is requested to be closed, and before the closing transition begins.
         */
        "onCalciteComboboxBeforeClose"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteComboboxBeforeOpen"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when the selected item(s) changes.
         */
        "onCalciteComboboxChange"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when a selected item in the component is closed via its `calcite-chip`.
         */
        "onCalciteComboboxChipClose"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteComboboxClose"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when text is added to filter the options list.
         */
        "onCalciteComboboxFilterChange"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteComboboxOpen"?: (event: CalciteComboboxCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Specifies the placeholder text for the input.
         */
        "placeholder"?: string;
        /**
          * Specifies the placeholder icon for the input.
         */
        "placeholderIcon"?: IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "placeholderIconFlipRtl"?: boolean;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteComboboxItemElement[];
        /**
          * When `selectionMode` is `"ancestors"` or `"multiple"`, specifies the display of multiple `calcite-combobox-item` selections, where:  `"all"` displays all selections with individual `calcite-chip`s,  `"fit"` displays individual `calcite-chip`s that scale to the component's size, including a non-closable `calcite-chip`, which provides the number of additional `calcite-combobox-item` selections not visually displayed, and  `"single"` displays one `calcite-chip` with the total number of selections.
         */
        "selectionDisplay"?: SelectionDisplay;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection,  `"single-persist"` allows one selection and prevents de-selection, and  `"ancestors"` allows multiple selections, but shows ancestors of selected items as selected, with only deepest children shown in chips.
         */
        "selectionMode"?: Extract<
    "single" | "single-persist" | "ancestors" | "multiple",
    SelectionMode
  >;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon"?: IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage"?: string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity"?: MutableValidityState;
        /**
          * The component's value(s) from the selected `calcite-combobox-item`(s).
         */
        "value"?: string | string[];
    }
    interface CalciteComboboxItem {
        /**
          * When `true`, the component is active.
         */
        "active"?: boolean;
        /**
          * Specifies the parent and grandparent items, which are set on `calcite-combobox`.
         */
        "ancestors"?: ComboboxChildElement[];
        /**
          * A description for the component, which displays below the label.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, omits the component from the `calcite-combobox` filtered search results.
         */
        "filterDisabled"?: boolean;
        /**
          * Pattern for highlighting filter text matches.
         */
        "filterTextMatchPattern"?: RegExp;
        /**
          * The `id` attribute of the component. When omitted, a globally unique identifier is used.
         */
        "guid"?: string;
        /**
          * The component's text.
         */
        "heading"?: string;
        /**
          * Specifies an icon to display.
         */
        "icon"?: IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * The component's label.
         */
        "label"?: any;
        /**
          * Provides additional metadata to the component used in filtering.
         */
        "metadata"?: Record<string, unknown>;
        /**
          * Fires whenever the component is selected or unselected.
         */
        "onCalciteComboboxItemChange"?: (event: CalciteComboboxItemCustomEvent<void>) => void;
        /**
          * Fires whenever a property the parent combobox needs to know about is changed.
         */
        "onCalciteInternalComboboxItemChange"?: (event: CalciteComboboxItemCustomEvent<void>) => void;
        /**
          * Specifies the size of the component inherited from the `calcite-combobox`, defaults to `m`.
         */
        "scale"?: Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection,  `"single-persist"` allows one selection and prevents de-selection, and  `"ancestors"` allows multiple selections, but shows ancestors of selected items as selected, with only deepest children shown in chips.
         */
        "selectionMode"?: Extract<
    "single" | "single-persist" | "ancestors" | "multiple",
    SelectionMode
  >;
        /**
          * The component's short heading.  When provided, the short heading will be displayed in the component's selection.  It is recommended to use 5 characters or fewer.
         */
        "shortHeading"?: string;
        /**
          * The component's text.
          * @deprecated Use `heading` instead.
         */
        "textLabel": string;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteComboboxItemGroup {
        /**
          * When `true`, signifies that the group comes after another group without any children (items or sub-groups), otherwise indicates that the group comes after another group that has children. Used for styling.
         */
        "afterEmptyGroup"?: boolean;
        /**
          * Specifies the parent and grandparent `calcite-combobox-item`s, which are set on `calcite-combobox`.
         */
        "ancestors"?: ComboboxChildElement[];
        /**
          * Specifies the title of the component.
         */
        "label": string;
        /**
          * Specifies the size of the component inherited from the `calcite-combobox`, defaults to `m`.
         */
        "scale"?: Scale;
    }
    interface CalciteDatePicker {
        /**
          * Specifies the component's active date.
         */
        "activeDate"?: Date;
        /**
          * When `range` is true, specifies the active `range`. Where `"start"` specifies the starting range date and `"end"` the ending range date.
         */
        "activeRange"?: "start" | "end";
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max"?: string;
        /**
          * Specifies the latest allowed date as a full date object (`new Date("yyyy-mm-dd")`).
         */
        "maxAsDate"?: Date;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<DatePickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: DatePickerMessages;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min"?: string;
        /**
          * Specifies the earliest allowed date as a full date object (`new Date("yyyy-mm-dd")`).
         */
        "minAsDate"?: Date;
        /**
          * Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when a user changes the component's date. For `range` events, use `calciteDatePickerRangeChange`.
         */
        "onCalciteDatePickerChange"?: (event: CalciteDatePickerCustomEvent<void>) => void;
        /**
          * Fires when a user changes the component's date `range`. For components without `range` use `calciteDatePickerChange`.
         */
        "onCalciteDatePickerRangeChange"?: (event: CalciteDatePickerCustomEvent<void>) => void;
        /**
          * When `true`, disables the default behavior on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled"?: boolean;
        /**
          * When `true`, activates the component's range mode to allow a start and end date.
         */
        "range"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Specifies the selected date as a string (`"yyyy-mm-dd"`), or an array of strings for `range` values (`["yyyy-mm-dd", "yyyy-mm-dd"]`).
         */
        "value"?: string | string[];
        /**
          * Specifies the selected date as a full date object (`new Date("yyyy-mm-dd")`), or an array containing full date objects (`[new Date("yyyy-mm-dd"), new Date("yyyy-mm-dd")]`).
         */
        "valueAsDate"?: Date | Date[];
    }
    interface CalciteDatePickerDay {
        /**
          * When `true`, the component is active.
         */
        "active"?: boolean;
        /**
          * Date is in the current month.
         */
        "currentMonth"?: boolean;
        /**
          * The DateTimeFormat used to provide screen reader labels.
         */
        "dateTimeFormat"?: Intl.DateTimeFormat;
        /**
          * Day of the month to be shown.
         */
        "day": number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Date is the end of date range.
         */
        "endOfRange"?: boolean;
        /**
          * Date is currently highlighted as part of the range,
         */
        "highlighted"?: boolean;
        /**
          * Fires when user selects day.
         */
        "onCalciteDaySelect"?: (event: CalciteDatePickerDayCustomEvent<void>) => void;
        /**
          * Fires when user hovers over a day.
         */
        "onCalciteInternalDayHover"?: (event: CalciteDatePickerDayCustomEvent<void>) => void;
        /**
          * When `true`, activates the component's range mode to allow a start and end date.
         */
        "range"?: boolean;
        /**
          * When `true`, highlight styling for edge dates is applied.
         */
        "rangeEdge"?: "start" | "end" | undefined;
        /**
          * Date is being hovered and within the set range.
         */
        "rangeHover"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * Date is the start of date range.
         */
        "startOfRange"?: boolean;
        /**
          * The component's value.
         */
        "value"?: Date;
    }
    interface CalciteDatePickerMonth {
        /**
          * The currently active Date.
         */
        "activeDate"?: Date;
        /**
          * The DateTimeFormat used to provide screen reader labels.
         */
        "dateTimeFormat"?: Intl.DateTimeFormat;
        /**
          * End date currently active.
         */
        "endDate"?: Date;
        /**
          * The range of dates currently being hovered.
         */
        "hoverRange"?: HoverRange;
        /**
          * CLDR locale data for current locale.
         */
        "localeData"?: DateLocaleData;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max"?: Date;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min"?: Date;
        /**
          * Active date for the user keyboard access.
         */
        "onCalciteInternalDatePickerActiveDateChange"?: (event: CalciteDatePickerMonthCustomEvent<Date>) => void;
        /**
          * Fires when user hovers the date.
         */
        "onCalciteInternalDatePickerHover"?: (event: CalciteDatePickerMonthCustomEvent<Date>) => void;
        "onCalciteInternalDatePickerMouseOut"?: (event: CalciteDatePickerMonthCustomEvent<void>) => void;
        /**
          * Fires when user selects the date.
         */
        "onCalciteInternalDatePickerSelect"?: (event: CalciteDatePickerMonthCustomEvent<Date>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Already selected date.
         */
        "selectedDate"?: Date;
        /**
          * Start date currently active.
         */
        "startDate"?: Date;
    }
    interface CalciteDatePickerMonthHeader {
        /**
          * The focused date is indicated and will become the selected date if the user proceeds.
         */
        "activeDate"?: Date;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * CLDR locale data for translated calendar info.
         */
        "localeData"?: DateLocaleData;
        /**
          * Specifies the latest allowed date (`"yyyy-mm-dd"`).
         */
        "max"?: Date;
        /**
          * This property specifies accessible strings for the component's previous month button ,next month button & year input elements. Made into a prop for testing purposes only.
          * @readonly
         */
        "messages"?: DatePickerMessages;
        /**
          * Specifies the earliest allowed date (`"yyyy-mm-dd"`).
         */
        "min"?: Date;
        /**
          * Fires to active date
         */
        "onCalciteInternalDatePickerSelect"?: (event: CalciteDatePickerMonthHeaderCustomEvent<Date>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Already selected date.
         */
        "selectedDate"?: Date;
    }
    interface CalciteDialog {
        /**
          * Passes a function to run before the component closes.
         */
        "beforeClose"?: () => Promise<void>;
        /**
          * When `true`, disables the component's close button.
         */
        "closeDisabled"?: boolean;
        /**
          * A description for the component.
         */
        "description"?: string;
        /**
          * When `true`, the component is draggable.
         */
        "dragEnabled"?: boolean;
        /**
          * This internal property, managed by a containing calcite-shell, is used to inform the component if special configuration or styles are needed
         */
        "embedded"?: boolean;
        /**
          * When `true`, disables the default close on escape behavior.  By default, an open dialog can be dismissed by pressing the Esc key.
          * @see [Dialog Accessibility](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog#accessibility)
         */
        "escapeDisabled"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Specifies the kind of the component, which will style the top border.
         */
        "kind"?: Extract<"brand" | "danger" | "info" | "success" | "warning", Kind>;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * When `true`, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<DialogMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: DialogMessages;
        /**
          * When `true`, displays a scrim blocking interaction underneath the component.
         */
        "modal"?: boolean;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteDialogBeforeClose"?: (event: CalciteDialogCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteDialogBeforeOpen"?: (event: CalciteDialogCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteDialogClose"?: (event: CalciteDialogCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteDialogOpen"?: (event: CalciteDialogCustomEvent<void>) => void;
        /**
          * Fires when the content is scrolled.
         */
        "onCalciteDialogScroll"?: (event: CalciteDialogCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * When `true`, disables the closing of the component when clicked outside.
         */
        "outsideCloseDisabled"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Specifies the placement of the dialog.
         */
        "placement"?: DialogPlacement;
        /**
          * When `true`, the component is resizable.
         */
        "resizable"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the width of the component.
         */
        "widthScale"?: Scale;
    }
    interface CalciteDropdown {
        /**
          * When `true`, the component will remain open after a selection is made.  If the `selectionMode` of the selected `calcite-dropdown-item`'s containing `calcite-dropdown-group` is `"none"`, the component will always close.
         */
        "closeOnSelectDisabled"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies the component's fallback `calcite-dropdown-item` `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "flipPlacements"?: FlipPlacement[];
        /**
          * Specifies the maximum number of `calcite-dropdown-item`s to display before showing a scroller. Value must be greater than `0`, and does not include `groupTitle`'s from `calcite-dropdown-group`.
         */
        "maxItems"?: number;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteDropdownBeforeClose"?: (event: CalciteDropdownCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteDropdownBeforeOpen"?: (event: CalciteDropdownCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteDropdownClose"?: (event: CalciteDropdownCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteDropdownOpen"?: (event: CalciteDropdownCustomEvent<void>) => void;
        /**
          * Fires when a `calcite-dropdown-item`'s selection changes.
         */
        "onCalciteDropdownSelect"?: (event: CalciteDropdownCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the container element.
          * @default "bottom-start"
         */
        "placement"?: MenuPlacement;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteDropdownItemElement[];
        /**
          * Specifies the action to open the component from the container element.
         */
        "type"?: "hover" | "click";
        /**
          * Specifies the width of the component.
         */
        "widthScale"?: Scale;
    }
    interface CalciteDropdownGroup {
        /**
          * Specifies and displays a group title.
         */
        "groupTitle"?: string;
        "onCalciteInternalDropdownItemChange"?: (event: CalciteDropdownGroupCustomEvent<RequestedItem2>) => void;
        /**
          * Specifies the size of the component inherited from the parent `calcite-dropdown`, defaults to `m`.
         */
        "scale"?: Scale;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection, and  `"none"` does not allow any selections.
         */
        "selectionMode"?: Extract<"none" | "single" | "multiple", SelectionMode>;
    }
    interface CalciteDropdownItem {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.  Determines if the component will render as an anchor.
         */
        "href"?: string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: IconNameOrString;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Fires when the component is selected.
         */
        "onCalciteDropdownItemSelect"?: (event: CalciteDropdownItemCustomEvent<void>) => void;
        "onCalciteInternalDropdownCloseRequest"?: (event: CalciteDropdownItemCustomEvent<void>) => void;
        "onCalciteInternalDropdownItemKeyEvent"?: (event: CalciteDropdownItemCustomEvent<ItemKeyboardEvent>) => void;
        "onCalciteInternalDropdownItemSelect"?: (event: CalciteDropdownItemCustomEvent<RequestedItem2>) => void;
        /**
          * Specifies the relationship to the linked document defined in `href`.
         */
        "rel"?: string;
        /**
          * Specifies the size of the component inherited from `calcite-dropdown`, defaults to `m`.
         */
        "scale"?: Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * Specifies the selection mode inherited from `calcite-dropdown-group`, defaults to `single`: - `multiple` allows any number of selected items, - `single` allows only one selection (default), - `none` doesn't allow for any selection.
         */
        "selectionMode"?: Extract<"none" | "single" | "multiple", SelectionMode>;
        /**
          * Specifies the frame or window to open the linked document.
         */
        "target"?: string;
    }
    interface CalciteFab {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance"?: Extract<"solid" | "outline-fill", Appearance>;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies an icon to display.
          * @default "plus"
         */
        "icon"?: IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the kind of the component, which will apply to border and background.
         */
        "kind"?: Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies text to accompany the component's icon.
         */
        "text"?: string;
        /**
          * When `true`, displays the `text` value in the component.
         */
        "textEnabled"?: boolean;
    }
    interface CalciteFilter {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies the properties to match against when filtering. This will only apply when `value` is an object. If not set, all properties will be matched.
         */
        "filterProps"?: string[];
        /**
          * The component's resulting items after filtering.
          * @readonly
         */
        "filteredItems"?: object[];
        /**
          * Defines the items to filter. The component uses the values as the starting point, and returns items  that contain the string entered in the input, using a partial match and recursive search.  This property is needed to conduct filtering.
         */
        "items"?: object[];
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<FilterMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: FilterMessages;
        /**
          * Fires when the filter text changes.
         */
        "onCalciteFilterChange"?: (event: CalciteFilterCustomEvent<void>) => void;
        /**
          * Specifies placeholder text for the input element.
         */
        "placeholder"?: string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The component's value.
         */
        "value"?: string;
    }
    interface CalciteFlow {
        /**
          * This property enables the component to consider other custom elements implementing flow-item's interface.
         */
        "customItemSelectors"?: string;
    }
    interface CalciteFlowItem {
        /**
          * When provided, the method will be called before it is removed from its parent `calcite-flow`.
         */
        "beforeBack"?: () => Promise<void>;
        /**
          * Passes a function to run before the component closes.
         */
        "beforeClose"?: () => Promise<void>;
        /**
          * When `true`, displays a close button in the trailing side of the component's header.
         */
        "closable"?: boolean;
        /**
          * When `true`, the component will be hidden.
         */
        "closed"?: boolean;
        /**
          * Specifies the direction of the collapse.
         */
        "collapseDirection"?: CollapseDirection;
        /**
          * When `true`, hides the component's content area.
         */
        "collapsed"?: boolean;
        /**
          * When `true`, the component is collapsible.
         */
        "collapsible"?: boolean;
        /**
          * A description for the component.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * When `true`, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<FlowItemMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: FlowItemMessages;
        /**
          * Fires when the back button is clicked.
         */
        "onCalciteFlowItemBack"?: (event: CalciteFlowItemCustomEvent<void>) => void;
        /**
          * Fires when the close button is clicked.
         */
        "onCalciteFlowItemClose"?: (event: CalciteFlowItemCustomEvent<void>) => void;
        /**
          * Fires when the content is scrolled.
         */
        "onCalciteFlowItemScroll"?: (event: CalciteFlowItemCustomEvent<void>) => void;
        /**
          * Fires when the collapse button is clicked.
         */
        "onCalciteFlowItemToggle"?: (event: CalciteFlowItemCustomEvent<void>) => void;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * When `true`, displays a back button in the component's header.
         */
        "showBackButton"?: boolean;
    }
    interface CalciteGraph {
        /**
          * Array of values describing a single color stop ([offset, color, opacity]) These color stops should be sorted by offset value.
         */
        "colorStops"?: ColorStop[];
        /**
          * Array of tuples describing a single data point ([x, y]) These data points should be sorted by x-axis value.
         */
        "data"?: DataSeries;
        /**
          * End of highlight color if highlighting range.
         */
        "highlightMax"?: number;
        /**
          * Start of highlight color if highlighting range.
         */
        "highlightMin"?: number;
        /**
          * Highest point of the range.
         */
        "max": number;
        /**
          * Lowest point of the range.
         */
        "min": number;
    }
    interface CalciteHandle {
        /**
          * When `true`, disables unselecting the component when blurred.
         */
        "blurUnselectDisabled"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Value for the button title attribute.
         */
        "dragHandle"?: string;
        "label"?: string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<HandleMessages>;
        /**
          * Made into a prop for testing purposes only.
          * @readonly
         */
        "messages"?: HandleMessages;
        /**
          * Fires whenever the component is selected or unselected.
         */
        "onCalciteHandleChange"?: (event: CalciteHandleCustomEvent<void>) => void;
        /**
          * Fires when the handle is selected and the up or down arrow key is pressed.
         */
        "onCalciteHandleNudge"?: (event: CalciteHandleCustomEvent<HandleNudge>) => void;
        /**
          * Fires when the assistive text has changed.
         */
        "onCalciteInternalAssistiveTextChange"?: (event: CalciteHandleCustomEvent<HandleChange>) => void;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        "setPosition"?: number;
        "setSize"?: number;
    }
    interface CalciteIcon {
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "flipRtl"?: boolean;
        /**
          * Displays a specific icon.
          * @see [Icons](https://esri.github.io/calcite-ui-icons)
         */
        "icon"?: IconNameOrString;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Accessible name for the component.  It is recommended to set this value if your icon is semantic.
         */
        "textLabel"?: string;
    }
    interface CalciteInlineEditable {
        /**
          * Specifies a callback to be executed prior to disabling editing via the controls. When provided, the component's loading state will be handled automatically.
         */
        "afterConfirm"?: () => Promise<void>;
        /**
          * When `true` and `editingEnabled` is `true`, displays save and cancel controls on the component.
         */
        "controls"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, inline editing is enabled on the component.
         */
        "editingEnabled"?: boolean;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<InlineEditableMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: InlineEditableMessages;
        /**
          * Emits when the component's "cancel editing" button is pressed.
         */
        "onCalciteInlineEditableEditCancel"?: (event: CalciteInlineEditableCustomEvent<void>) => void;
        /**
          * Emits when the component's "confirm edits" button is pressed.
         */
        "onCalciteInlineEditableEditConfirm"?: (event: CalciteInlineEditableCustomEvent<void>) => void;
        "onCalciteInternalInlineEditableEnableEditingChange"?: (event: CalciteInlineEditableCustomEvent<void>) => void;
        /**
          * Specifies the size of the component. Defaults to the scale of the wrapped `calcite-input` or the scale of the closest wrapping component with a set scale.
         */
        "scale"?: Scale;
    }
    interface CalciteInput {
        /**
          * Specifies a comma separated list of unique file type specifiers for limiting accepted file types. This property only has an effect when `type` is "file". Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "accept"?: string;
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment"?: Extract<"start" | "end", Alignment>;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete"?: string;
        /**
          * Adds global prop, missing from Stencil's `HTMLElement` type, see https://github.com/ionic-team/stencil/issues/5726
          * @ignore
         */
        "autofocus"?: boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value. The clear button shows by default for `"search"`, `"time"`, and `"date"` types, and will not display for the `"textarea"` type.
         */
        "clearable"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled"?: boolean;
        "editingEnabled"?: boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "enterKeyHint"?: string;
        /**
          * When `type` is `"file"`, specifies the component's selected files.
          * @mdn https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/files
         */
        "files"?: FileList | undefined;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon"?: IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "inputMode"?: string;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * When `true`, uses locale formatting for numbers.
         */
        "localeFormat"?: boolean;
        /**
          * Specifies the maximum value for type "number".
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max"?: number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength"?: number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<InputMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: InputMessages;
        /**
          * Specifies the minimum value for `type="number"`.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min"?: number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength"?: number;
        /**
          * When `true`, the component can accept more than one value. This property only has an effect when `type` is "email" or "file". Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple)
         */
        "multiple"?: boolean;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name"?: string;
        /**
          * Specifies the placement of the buttons for `type="number"`.
         */
        "numberButtonType"?: InputPlacement;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires each time a new `value` is typed and committed.
         */
        "onCalciteInputChange"?: (event: CalciteInputCustomEvent<void>) => void;
        /**
          * Fires each time a new `value` is typed.
         */
        "onCalciteInputInput"?: (event: CalciteInputCustomEvent<void>) => void;
        "onCalciteInternalInputBlur"?: (event: CalciteInputCustomEvent<void>) => void;
        "onCalciteInternalInputFocus"?: (event: CalciteInputCustomEvent<void>) => void;
        /**
          * Specifies a regex pattern the component's `value` must match for validation. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "pattern"?: string;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder"?: string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText"?: string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the granularity the component's `value` must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step"?: number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText"?: string;
        /**
          * Specifies the component type.  Note that the following `type`s add type-specific icons by default: `"date"`, `"email"`, `"password"`, `"search"`, `"tel"`, `"time"`.
         */
        "type"?: | "color"
    | "date"
    | "datetime-local"
    | "email"
    | "file"
    | "image"
    | "month"
    | "number"
    | "password"
    | "search"
    | "tel"
    | "text"
    | "textarea"
    | "time"
    | "url"
    | "week";
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon"?: IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage"?: string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity"?: MutableValidityState;
        /**
          * The component's value.
         */
        "value"?: string;
    }
    interface CalciteInputDatePicker {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies the component's fallback `calcite-date-picker` `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "flipPlacements"?: FlipPlacement[];
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled"?: boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Defines the layout of the component.
         */
        "layout"?: "horizontal" | "vertical";
        /**
          * Specifies the latest allowed date ("yyyy-mm-dd").
         */
        "max"?: string;
        /**
          * Specifies the latest allowed date as a full date object.
         */
        "maxAsDate"?: Date;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<InputDatePickerMessages & DatePickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: InputDatePickerMessages;
        /**
          * Specifies the earliest allowed date ("yyyy-mm-dd").
         */
        "min"?: string;
        /**
          * Specifies the earliest allowed date as a full date object.
         */
        "minAsDate"?: Date;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Specifies the Unicode numeral system used by the component for localization. This property cannot be dynamically changed.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteInputDatePickerBeforeClose"?: (event: CalciteInputDatePickerCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteInputDatePickerBeforeOpen"?: (event: CalciteInputDatePickerCustomEvent<void>) => void;
        /**
          * Fires when the component's `value` changes.
         */
        "onCalciteInputDatePickerChange"?: (event: CalciteInputDatePickerCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteInputDatePickerClose"?: (event: CalciteInputDatePickerCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteInputDatePickerOpen"?: (event: CalciteInputDatePickerCustomEvent<void>) => void;
        /**
          * When `true`, displays the `calcite-date-picker` component.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Specifies the placement of the `calcite-date-picker` relative to the component.
          * @default "bottom-start"
         */
        "placement"?: MenuPlacement;
        /**
          * When `true`, disables the default behavior on the third click of narrowing or extending the range. Instead starts a new range.
         */
        "proximitySelectionDisabled"?: boolean;
        /**
          * When `true`, activates a range for the component.
         */
        "range"?: boolean;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon"?: IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage"?: string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity"?: MutableValidityState;
        /**
          * Selected date as a string in ISO format (`"yyyy-mm-dd"`).
         */
        "value"?: string | string[];
        /**
          * The component's value as a full date object.
         */
        "valueAsDate"?: Date | Date[];
    }
    interface CalciteInputMessage {
        /**
          * Specifies an icon to display.
         */
        "icon"?: IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
    }
    interface CalciteInputNumber {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment"?: Extract<"start" | "end", Alignment>;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete"?: string;
        /**
          * Adds global prop, missing from Stencil's `HTMLElement` type, see https://github.com/ionic-team/stencil/issues/5726
          * @ignore
         */
        "autofocus"?: boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value.
         */
        "clearable"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled"?: boolean;
        "editingEnabled"?: boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "enterKeyHint"?: string;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * Specifies an icon to display.
          * @futureBreaking Remove boolean type as it is not supported.
         */
        "icon"?: IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "inputMode"?: string;
        /**
          * When `true`, restricts the component to integer numbers only and disables exponential notation.
         */
        "integer"?: boolean;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label"?: string;
        /**
          * When `true`, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading"?: boolean;
        /**
          * Toggles locale formatting for numbers.
         */
        "localeFormat"?: boolean;
        /**
          * Specifies the maximum value.
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max"?: number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
          * @deprecated This property has no effect on the component.
         */
        "maxLength"?: number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<InputNumberMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: InputNumberMessages;
        /**
          * Specifies the minimum value.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min"?: number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
          * @deprecated This property has no effect on the component.
         */
        "minLength"?: number;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name"?: string;
        /**
          * Specifies the placement of the buttons.
         */
        "numberButtonType"?: InputPlacement;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires each time a new value is typed and committed.
         */
        "onCalciteInputNumberChange"?: (event: CalciteInputNumberCustomEvent<void>) => void;
        /**
          * Fires each time a new value is typed.
         */
        "onCalciteInputNumberInput"?: (event: CalciteInputNumberCustomEvent<void>) => void;
        "onCalciteInternalInputNumberBlur"?: (event: CalciteInputNumberCustomEvent<void>) => void;
        "onCalciteInternalInputNumberFocus"?: (event: CalciteInputNumberCustomEvent<void>) => void;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder"?: string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText"?: string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the granularity that the component's value must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step"?: number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText"?: string;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon"?: IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage"?: string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity"?: MutableValidityState;
        /**
          * The component's value.
         */
        "value"?: string;
    }
    interface CalciteInputText {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment"?: Extract<"start" | "end", Alignment>;
        /**
          * Specifies the type of content to autocomplete, for use in forms. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)
         */
        "autocomplete"?: string;
        /**
          * Adds global prop, missing from Stencil's `HTMLElement` type, see https://github.com/ionic-team/stencil/issues/5726
          * @ignore
         */
        "autofocus"?: boolean;
        /**
          * When `true`, a clear button is displayed when the component has a value.
         */
        "clearable"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled"?: boolean;
        "editingEnabled"?: boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "enterKeyHint"?: string;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * Specifies an icon to display.
          * @futureBreaking Remove boolean type as it is not supported.
         */
        "icon"?: IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123
          * @futureBreaking kebab-cased attribute will not be supported in a future release
         */
        "inputMode"?: string;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label"?: string;
        /**
          * When `true`, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading"?: boolean;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength"?: number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<InputTextMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: InputTextMessages;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength"?: number;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name"?: string;
        /**
          * Fires each time a new value is typed and committed.
         */
        "onCalciteInputTextChange"?: (event: CalciteInputTextCustomEvent<void>) => void;
        /**
          * Fires each time a new value is typed.
         */
        "onCalciteInputTextInput"?: (event: CalciteInputTextCustomEvent<void>) => void;
        "onCalciteInternalInputTextBlur"?: (event: CalciteInputTextCustomEvent<{ element: HTMLInputElement; value: string }>) => void;
        "onCalciteInternalInputTextFocus"?: (event: CalciteInputTextCustomEvent<{
    element: HTMLInputElement;
    value: string;
  }>) => void;
        /**
          * Specifies a regex pattern the component's `value` must match for validation. Read the native attribute's documentation on MDN for more info.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)
         */
        "pattern"?: string;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder"?: string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText"?: string;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Adds text to the end of the component.
         */
        "suffixText"?: string;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon"?: IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage"?: string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity"?: MutableValidityState;
        /**
          * The component's value.
         */
        "value"?: string;
    }
    interface CalciteInputTimePicker {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled"?: boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * Specifies the maximum value.
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#max)
         */
        "max"?: string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<InputTimePickerMessages & TimePickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: InputTimePickerMessages;
        /**
          * Specifies the minimum value.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#min)
         */
        "min"?: string;
        /**
          * Specifies the name of the component on form submission.
         */
        "name"?: string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteInputTimePickerBeforeClose"?: (event: CalciteInputTimePickerCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteInputTimePickerBeforeOpen"?: (event: CalciteInputTimePickerCustomEvent<void>) => void;
        /**
          * Fires when the component's `value` is changes.
         */
        "onCalciteInputTimePickerChange"?: (event: CalciteInputTimePickerCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteInputTimePickerClose"?: (event: CalciteInputTimePickerCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteInputTimePickerOpen"?: (event: CalciteInputTimePickerCustomEvent<void>) => void;
        /**
          * When `true`, displays the `calcite-time-picker` component.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the popover will be positioned relative to the input.
         */
        "placement"?: LogicalPlacement;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the granularity the component's `value` must adhere to (in seconds).
         */
        "step"?: number;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon"?: IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage"?: string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity"?: MutableValidityState;
        /**
          * The time value in ISO (24-hour) format.
         */
        "value"?: string;
    }
    interface CalciteInputTimeZone {
        /**
          * When `true`, an empty value (`null`) will be allowed as a `value`.  When `false`, an offset or name value is enforced, and clearing the input or blurring will restore the last valid `value`.
         */
        "clearable"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * Specifies the component's maximum number of options to display before displaying a scrollbar.
         */
        "maxItems"?: number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<InputTimeZoneMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: InputTimeZoneMessages;
        /**
          * This specifies the type of `value` and the associated options presented to the user:  Using `"offset"` will provide options that show timezone offsets.  Using `"name"` will provide options that show the IANA time zone names.
          * @default "offset"
         */
        "mode"?: TimeZoneMode;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Specifies how the offset will be displayed, where  `"user"` uses `UTC` or `GMT` depending on the user's locale, `"gmt"` always uses `GMT`, and `"utc"` always uses `UTC`.  This only applies to the `offset` mode.
          * @default "user"
         */
        "offsetStyle"?: OffsetStyle;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteInputTimeZoneBeforeClose"?: (event: CalciteInputTimeZoneCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteInputTimeZoneBeforeOpen"?: (event: CalciteInputTimeZoneCustomEvent<void>) => void;
        /**
          * Fires when the component's `value` changes.
         */
        "onCalciteInputTimeZoneChange"?: (event: CalciteInputTimeZoneCustomEvent<void>) => void;
        /**
          * Fires after the component is closed and animation is complete.
         */
        "onCalciteInputTimeZoneClose"?: (event: CalciteInputTimeZoneCustomEvent<void>) => void;
        /**
          * Fires after the component is opened and animation is complete.
         */
        "onCalciteInputTimeZoneOpen"?: (event: CalciteInputTimeZoneCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * When `true`, the component's value can be read, but controls are not accessible and the value cannot be modified.
         */
        "readOnly"?: boolean;
        /**
          * This `date` will be used as a reference to Daylight Savings Time when creating time zone item groups.  It can be either a Date instance or a string in ISO format (`"YYYY-MM-DD"`, `"YYYY-MM-DDTHH:MM:SS.SSSZ"`).
          * @see [Date.prototype.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
         */
        "referenceDate"?: Date | string;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon"?: IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage"?: string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity"?: MutableValidityState;
        /**
          * The component's value, where the value is the time zone offset or the difference, in minutes, between the selected time zone and UTC.  If no value is provided, the user's time zone offset will be selected by default.
          * @see https://www.w3.org/International/core/2005/09/timezone.html#:~:text=What%20is%20a%20%22zone%20offset,or%20%22%2D%22%20from%20UTC.
         */
        "value"?: string;
    }
    interface CalciteLabel {
        /**
          * Specifies the text alignment of the component.
         */
        "alignment"?: Alignment;
        /**
          * Specifies the `id` of the component the label is bound to. Use when the component the label is bound to does not reside within the component.
         */
        "for"?: string;
        /**
          * Defines the layout of the label in relation to the component. Use `"inline"` positions to wrap the label and component on the same line.
         */
        "layout"?: "inline" | "inline-space-between" | "default";
        "onCalciteInternalLabelClick"?: (event: CalciteLabelCustomEvent<{
    sourceEvent: MouseEvent;
  }>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
    }
    interface CalciteLink {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value: Without a value, the browser will suggest a filename/extension See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download.
         */
        "download"?: string | boolean;
        /**
          * Specifies the URL of the linked resource, which can be set as an absolute or relative path.
         */
        "href"?: string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: IconNameOrString;
        /**
          * Specifies the relationship to the linked document defined in `href`.
         */
        "rel"?: string;
        /**
          * Specifies the frame or window to open the linked document.
         */
        "target"?: string;
    }
    /**
     * A general purpose list that enables users to construct list items that conform to Calcite styling.
     */
    interface CalciteList {
        /**
          * When provided, the method will be called to determine whether the element can  move from the list.
         */
        "canPull"?: (detail: ListDragDetail) => boolean;
        /**
          * When provided, the method will be called to determine whether the element can be added from another list.
         */
        "canPut"?: (detail: ListDragDetail) => boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, `calcite-list-item`s are sortable via a draggable button.
         */
        "dragEnabled"?: boolean;
        /**
          * When `true`, an input appears at the top of the component that can be used by end users to filter `calcite-list-item`s.
         */
        "filterEnabled"?: boolean;
        /**
          * Placeholder text for the component's filter input field.
         */
        "filterPlaceholder"?: string;
        /**
          * Specifies the properties to match against when filtering. If not set, all properties will be matched (label, description, metadata, value).
         */
        "filterProps"?: string[];
        /**
          * Text for the component's filter input field.
         */
        "filterText"?: string;
        /**
          * The currently filtered `calcite-list-item` data.
          * @readonly
         */
        "filteredData"?: ItemData;
        /**
          * The currently filtered `calcite-list-item`s.
          * @readonly
         */
        "filteredItems"?: HTMLCalciteListItemElement[];
        /**
          * The list's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * Specifies an accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ListMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ListMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the default slot has changes in order to notify parent lists.
         */
        "onCalciteInternalListDefaultSlotChange"?: (event: CalciteListCustomEvent<void>) => void;
        /**
          * Fires when the component's selected items have changed.
         */
        "onCalciteListChange"?: (event: CalciteListCustomEvent<void>) => void;
        /**
          * Fires when the component's dragging has ended.
         */
        "onCalciteListDragEnd"?: (event: CalciteListCustomEvent<ListDragDetail>) => void;
        /**
          * Fires when the component's dragging has started.
         */
        "onCalciteListDragStart"?: (event: CalciteListCustomEvent<ListDragDetail>) => void;
        /**
          * Fires when the component's filter has changed.
         */
        "onCalciteListFilter"?: (event: CalciteListCustomEvent<void>) => void;
        /**
          * Fires when the component's item order changes.
         */
        "onCalciteListOrderChange"?: (event: CalciteListCustomEvent<ListDragDetail>) => void;
        /**
          * One of the items within the list can be opened.
         */
        "openable"?: boolean;
        /**
          * The currently selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteListItemElement[];
        /**
          * Specifies the selection appearance - `"icon"` (displays a checkmark or dot) or `"border"` (displays a border).
         */
        "selectionAppearance"?: SelectionAppearance;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection,  `"single-persist"` allows one selection and prevents de-selection, and  `"none"` does not allow any selections.
         */
        "selectionMode"?: Extract<
    "none" | "multiple" | "single" | "single-persist",
    SelectionMode
  >;
    }
    interface CalciteListItem {
        /**
          * Sets the item as focusable. Only one item should be focusable within a list.
         */
        "active"?: boolean;
        /**
          * Sets the item to display a border.
         */
        "bordered"?: boolean;
        /**
          * When `true`, a close button is added to the component.
         */
        "closable"?: boolean;
        /**
          * When `true`, hides the component.
         */
        "closed"?: boolean;
        /**
          * A description for the component. Displays below the label text.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, the item is not draggable.
         */
        "dragDisabled"?: boolean;
        /**
          * When `true`, the component displays a draggable button.
         */
        "dragHandle"?: boolean;
        /**
          * When `true`, the component's drag handle is selected.
         */
        "dragSelected"?: boolean;
        /**
          * Hides the component when filtered.
         */
        "filterHidden"?: boolean;
        /**
          * The label text of the component. Displays above the description text.
         */
        "label"?: string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ListItemMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ListItemMessages;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent `calcite-list`.
         */
        "metadata"?: Record<string, unknown>;
        "onCalciteInternalFocusPreviousItem"?: (event: CalciteListItemCustomEvent<void>) => void;
        "onCalciteInternalListItemActive"?: (event: CalciteListItemCustomEvent<void>) => void;
        "onCalciteInternalListItemChange"?: (event: CalciteListItemCustomEvent<void>) => void;
        "onCalciteInternalListItemSelect"?: (event: CalciteListItemCustomEvent<void>) => void;
        "onCalciteInternalListItemSelectMultiple"?: (event: CalciteListItemCustomEvent<{
    selectMultiple: boolean;
  }>) => void;
        "onCalciteInternalListItemToggle"?: (event: CalciteListItemCustomEvent<void>) => void;
        /**
          * Fires when the close button is clicked.
         */
        "onCalciteListItemClose"?: (event: CalciteListItemCustomEvent<void>) => void;
        /**
          * Fires when the drag handle is selected.
         */
        "onCalciteListItemDragHandleChange"?: (event: CalciteListItemCustomEvent<void>) => void;
        /**
          * Fires when the component is selected.
         */
        "onCalciteListItemSelect"?: (event: CalciteListItemCustomEvent<void>) => void;
        /**
          * Fires when the open button is clicked.
         */
        "onCalciteListItemToggle"?: (event: CalciteListItemCustomEvent<void>) => void;
        /**
          * When `true`, the item is open to show child components.
         */
        "open"?: boolean;
        /**
          * When `true` and the parent `calcite-list`'s `selectionMode` is `"single"`, `"single-persist"', or `"multiple"`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * Specifies the selection appearance - `"icon"` (displays a checkmark or dot) or `"border"` (displays a border).
         */
        "selectionAppearance"?: SelectionAppearance;
        /**
          * Specifies the selection mode - `"multiple"` (allow any number of selected items), `"single"` (allow one selected item), `"single-persist"` (allow one selected item and prevent de-selection), or `"none"` (no selected items).
         */
        "selectionMode"?: Extract<
    "none" | "multiple" | "single" | "single-persist",
    SelectionMode
  >;
        /**
          * Used to specify the aria-posinset attribute to define the number or position in the current set of list items for accessibility.
         */
        "setPosition"?: number;
        /**
          * Used to specify the aria-setsize attribute to define the number of items in the current set of list for accessibility.
         */
        "setSize"?: number;
        /**
          * When `true`, the component's content appears inactive.
         */
        "unavailable"?: boolean;
        /**
          * The component's value.
         */
        "value"?: any;
    }
    interface CalciteListItemGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Hides the component when filtered.
         */
        "filterHidden"?: boolean;
        /**
          * The header text for all nested `calcite-list-item` rows.
         */
        "heading"?: string;
        /**
          * Fires when changes occur in the default slot, notifying parent lists of the changes.
         */
        "onCalciteInternalListItemGroupDefaultSlotChange"?: (event: CalciteListItemGroupCustomEvent<void>) => void;
    }
    interface CalciteLoader {
        /**
          * Indicates whether the component is in a loading state.
         */
        "complete"?: boolean;
        /**
          * When `true`, displays smaller and appears to the left of the text.
         */
        "inline"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Text that displays under the component's indicator.
         */
        "text"?: string;
        /**
          * Specifies the component type.  Use `"indeterminate"` if finding actual progress value is impossible. Otherwise, use `"determinate"` to have the value indicate the progress or `"determinate-value"` to have the value label displayed along the progress.
         */
        "type"?: "indeterminate" | "determinate" | "determinate-value";
        /**
          * The component's value. Valid only for `"determinate"` indicators. Percent complete of 100.
         */
        "value"?: number;
    }
    interface CalciteMenu {
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the layout of the component.
         */
        "layout"?: Layout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<MenuMessages>;
        /**
          * Made into a prop for testing purposes only.
         */
        "messages"?: MenuMessages;
    }
    interface CalciteMenuItem {
        /**
          * When `true`, the component is highlighted.
         */
        "active"?: boolean;
        /**
          * When `true`, the component displays a breadcrumb trail for use as a navigational aid.
         */
        "breadcrumb"?: boolean;
        /**
          * Specifies the URL destination of the component, which can be set as an absolute or relative path.
         */
        "href"?: string;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: IconNameOrString;
        "isTopLevelItem"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        "layout"?: Layout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<MenuItemMessages>;
        /**
          * Made into a prop for testing purposes only.
         */
        "messages"?: MenuItemMessages;
        "onCalciteInternalMenuItemKeyEvent"?: (event: CalciteMenuItemCustomEvent<MenuItemCustomEvent>) => void;
        /**
          * Emits when the component is selected.
         */
        "onCalciteMenuItemSelect"?: (event: CalciteMenuItemCustomEvent<void>) => void;
        /**
          * When `true`, the component will display any slotted `calcite-menu-item` in an open overflow menu.
         */
        "open"?: boolean;
        /**
          * Defines the relationship between the `href` value and the current document.
          * @mdn [rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)
         */
        "rel"?: string;
        /**
          * Specifies where to open the linked document defined in the `href` property.
          * @mdn [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)
         */
        "target"?: string;
        /**
          * Specifies the text to display.
         */
        "text"?: string;
        "topLevelMenuLayout"?: Layout;
    }
    interface CalciteMeter {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance"?: Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies the component's display, where `"single"` displays a single color and `"range"` displays a range of colors based on provided `low`, `high`, `min` or `max` values.
         */
        "fillType"?: MeterFillType;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * Specifies a high value.  When `fillType` is `"range"`, displays a different color when above the specified threshold.
         */
        "high"?: number;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies a low value.  When `fillType` is `"range"`, displays a different color when above the specified threshold.
         */
        "low"?: number;
        /**
          * Specifies the highest allowed value of the component.
         */
        "max"?: number;
        /**
          * Specifies the lowest allowed value of the component.
         */
        "min"?: number;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * When `rangeLabels` is `true`, specifies the format of displayed labels.
         */
        "rangeLabelType"?: MeterLabelType;
        /**
          * When `true`, displays the values of `high`, `low`, `min`, and `max`.
         */
        "rangeLabels"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * When `rangeLabelType` is `"units"` and either `valueLabel` or `rangeLabels` are `true`, displays beside the `value` and/or  `min` values.
         */
        "unitLabel"?: string;
        /**
          * Specifies the current value of the component.
         */
        "value"?: number;
        /**
          * When `true`, displays the current value.
         */
        "valueLabel"?: boolean;
        /**
          * When `valueLabel` is `true`, specifies the format of displayed label.
         */
        "valueLabelType"?: MeterLabelType;
    }
    /**
     * @deprecated Use the `calcite-dialog` component instead.
     */
    interface CalciteModal {
        /**
          * Passes a function to run before the component closes.
         */
        "beforeClose"?: (el: HTMLCalciteModalElement) => Promise<void>;
        /**
          * When `true`, disables the component's close button.
         */
        "closeButtonDisabled"?: boolean;
        /**
          * When `true`, prevents the component from expanding to the entire screen on mobile devices.
         */
        "docked"?: boolean;
        /**
          * This internal property, managed by a containing calcite-shell, is used to inform the component if special configuration or styles are needed
         */
        "embedded"?: boolean;
        /**
          * When `true`, disables the default close on escape behavior.
         */
        "escapeDisabled"?: boolean;
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled"?: boolean;
        /**
          * Sets the component to always be fullscreen. Overrides `widthScale` and `--calcite-modal-width` / `--calcite-modal-height`.
         */
        "fullscreen"?: boolean;
        /**
          * Specifies the kind of the component, which will apply to top border.
         */
        "kind"?: Extract<"brand" | "danger" | "info" | "success" | "warning", Kind>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ModalMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ModalMessages;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteModalBeforeClose"?: (event: CalciteModalCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteModalBeforeOpen"?: (event: CalciteModalCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteModalClose"?: (event: CalciteModalCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteModalOpen"?: (event: CalciteModalCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * We use an internal property to handle styles for when a modal is actually opened, not just when the open attribute is applied. This is a property because we need to apply styles to the host element and to keep the styles present while beforeClose is.
         */
        "opened"?: boolean;
        /**
          * When `true`, disables the closing of the component when clicked outside.
         */
        "outsideCloseDisabled"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the width of the component.
         */
        "widthScale"?: Scale;
    }
    interface CalciteNavigation {
        /**
          * When `navigationAction` is `true`, specifies the label of the `calcite-action`.
         */
        "label"?: string;
        /**
          * When `true`, displays a `calcite-action` and emits a `calciteNavActionSelect` event on selection change.
         */
        "navigationAction"?: boolean;
        /**
          * When `navigationAction` is `true`, emits when the displayed action selection changes.
         */
        "onCalciteNavigationActionSelect"?: (event: CalciteNavigationCustomEvent<void>) => void;
    }
    interface CalciteNavigationLogo {
        /**
          * When `true`, the component is highlighted.
         */
        "active"?: boolean;
        /**
          * A description for the component, which displays below the `heading`.
         */
        "description"?: string;
        /**
          * Specifies heading text for the component, such as a product or organization name.
         */
        "heading"?: string;
        /**
          * Specifies the heading level of the component's heading for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Specifies the URL destination of the component, which can be set as an absolute or relative path.
         */
        "href"?: string;
        /**
          * Specifies an icon to display.
         */
        "icon"?: IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Describes the appearance or function of the `thumbnail`. If no label is provided, context will not be provided to assistive technologies.
         */
        "label"?: string;
        /**
          * Defines the relationship between the `href` value and the current document.
          * @mdn [rel](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)
         */
        "rel"?: string;
        /**
          * Specifies where to open the linked document defined in the `href` property.
          * @mdn [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target)
         */
        "target"?: string;
        /**
          * Specifies the `src` to an image.
         */
        "thumbnail"?: string;
    }
    interface CalciteNavigationUser {
        /**
          * When `true`, the component is highlighted.
         */
        "active"?: boolean;
        /**
          * Specifies the full name of the user.
         */
        "fullName"?: string;
        /**
          * Describes the appearance of the avatar. If no label is provided, context will not be provided to assistive technologies.
         */
        "label"?: string;
        /**
          * When `true`, hides the `fullName` and `username` contents.
         */
        "textDisabled"?: boolean;
        /**
          * Specifies the `src` to an image (remember to add a token if the user is private).
         */
        "thumbnail"?: string;
        /**
          * Specifies the unique id of the user.
         */
        "userId"?: string;
        /**
          * Specifies the username of the user.
         */
        "username"?: string;
    }
    interface CalciteNotice {
        /**
          * When `true`, a close button is added to the component.
         */
        "closable"?: boolean;
        /**
          * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon"?: IconNameOrString | boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the kind of the component, which will apply to top border and icon.
         */
        "kind"?: Extract<
    "brand" | "danger" | "info" | "success" | "warning",
    Kind
  >;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<NoticeMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: NoticeMessages;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteNoticeBeforeClose"?: (event: CalciteNoticeCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteNoticeBeforeOpen"?: (event: CalciteNoticeCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteNoticeClose"?: (event: CalciteNoticeCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteNoticeOpen"?: (event: CalciteNoticeCustomEvent<void>) => void;
        /**
          * When `true`, the component is visible.
         */
        "open"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the width of the component.
         */
        "width"?: Width;
    }
    interface CalciteOption {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        "onCalciteInternalOptionChange"?: (event: CalciteOptionCustomEvent<void>) => void;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * The component's value.
         */
        "value"?: any;
    }
    interface CalciteOptionGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        "onCalciteInternalOptionGroupChange"?: (event: CalciteOptionGroupCustomEvent<void>) => void;
    }
    interface CalcitePagination {
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<PaginationMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: PaginationMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Emits when the selected page changes.
         */
        "onCalcitePaginationChange"?: (event: CalcitePaginationCustomEvent<void>) => void;
        /**
          * Specifies the number of items per page.
         */
        "pageSize"?: number;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the starting item number.
         */
        "startItem"?: number;
        /**
          * Specifies the total number of items.
         */
        "totalItems"?: number;
    }
    interface CalcitePanel {
        /**
          * Passes a function to run before the component closes.
         */
        "beforeClose"?: () => Promise<void>;
        /**
          * When `true`, displays a close button in the trailing side of the header.
         */
        "closable"?: boolean;
        /**
          * When `true`, the component will be hidden.
         */
        "closed"?: boolean;
        /**
          * Specifies the direction of the collapse.
         */
        "collapseDirection"?: CollapseDirection;
        /**
          * When `true`, hides the component's content area.
         */
        "collapsed"?: boolean;
        /**
          * When `true`, the component is collapsible.
         */
        "collapsible"?: boolean;
        /**
          * A description for the component.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "menuFlipPlacements"?: FlipPlacement[];
        /**
          * When `true`, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen"?: boolean;
        /**
          * Determines where the action menu will be positioned.
         */
        "menuPlacement"?: LogicalPlacement;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<PanelMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: PanelMessages;
        /**
          * Fires when the close button is clicked.
         */
        "onCalcitePanelClose"?: (event: CalcitePanelCustomEvent<void>) => void;
        /**
          * Fires when the content is scrolled.
         */
        "onCalcitePanelScroll"?: (event: CalcitePanelCustomEvent<void>) => void;
        /**
          * Fires when the collapse button is clicked.
         */
        "onCalcitePanelToggle"?: (event: CalcitePanelCustomEvent<void>) => void;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface CalcitePickList {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, an input appears at the top of the list that can be used by end users to filter items in the list.
         */
        "filterEnabled"?: boolean;
        /**
          * Placeholder text for the filter input field.
         */
        "filterPlaceholder"?: string;
        /**
          * Text for the filter input field.
         */
        "filterText"?: string;
        /**
          * The component's filtered data.
          * @readonly
         */
        "filteredData"?: ItemData1;
        /**
          * The component's filtered items.
          * @readonly
         */
        "filteredItems"?: HTMLCalcitePickListItemElement[];
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Similar to standard radio buttons and checkboxes. When `true`, a user can select multiple `calcite-pick-list-item`s at a time. When `false`, only a single `calcite-pick-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple"?: boolean;
        /**
          * Emits when any of the `calcite-pick-list-item` selections have changed.
         */
        "onCalciteListChange"?: (event: CalcitePickListCustomEvent<Map<string, HTMLCalcitePickListItemElement>>) => void;
        /**
          * Emits when a filter has changed.
         */
        "onCalciteListFilter"?: (event: CalcitePickListCustomEvent<void>) => void;
        /**
          * When `true` and single selection is enabled, the selection changes when navigating `calcite-pick-list-item`s via keyboard.
         */
        "selectionFollowsFocus"?: boolean;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface CalcitePickListGroup {
        /**
          * Specifies the title for all nested `calcite-pick-list-item`s.
         */
        "groupTitle"?: string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface CalcitePickListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description"?: string;
        /**
          * When `false`, the component cannot be deselected by user interaction.
         */
        "deselectDisabled"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are `"circle"`, `"square"`, `"grip"` or `null`.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-design-system/blob/dev/src/components/pick-list/resources.ts#L5)
         */
        "icon"?: ICON_TYPES | null;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<PickListItemMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: PickListItemMessages;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata"?: Record<string, unknown>;
        "nonInteractive"?: boolean;
        /**
          * Emits when the component's label, description, value, or metadata properties are modified.
         */
        "onCalciteInternalListItemPropsChange"?: (event: CalcitePickListItemCustomEvent<void>) => void;
        /**
          * Emits when the component's value property is modified.
         */
        "onCalciteInternalListItemValueChange"?: (event: CalcitePickListItemCustomEvent<{
    oldValue: any;
    newValue: any;
  }>) => void;
        /**
          * Fires when the component is selected or unselected.
         */
        "onCalciteListItemChange"?: (event: CalcitePickListItemCustomEvent<{
    item: HTMLCalcitePickListItemElement;
    value: any;
    selected: boolean;
    shiftPressed: boolean;
  }>) => void;
        /**
          * Fires when the remove button is pressed.
         */
        "onCalciteListItemRemove"?: (event: CalcitePickListItemCustomEvent<void>) => void;
        /**
          * When `true`, displays a remove action that removes the item from the list.
         */
        "removable"?: boolean;
        /**
          * When `true`, selects an item. Toggles when an item is checked/unchecked.
         */
        "selected"?: boolean;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalcitePopover {
        /**
          * When `true`, clicking outside of the component automatically closes open `calcite-popover`s.
         */
        "autoClose"?: boolean;
        /**
          * When `true`, displays a close button within the component.
         */
        "closable"?: boolean;
        /**
          * When `true`, prevents flipping the component's placement when overlapping its `referenceElement`.
         */
        "flipDisabled"?: boolean;
        /**
          * Specifies the component's fallback `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "flipPlacements"?: FlipPlacement[];
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<PopoverMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: PopoverMessages;
        /**
          * Offsets the position of the popover away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance"?: number;
        /**
          * Offsets the position of the component along the `referenceElement`.
         */
        "offsetSkidding"?: number;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalcitePopoverBeforeClose"?: (event: CalcitePopoverCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalcitePopoverBeforeOpen"?: (event: CalcitePopoverCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalcitePopoverClose"?: (event: CalcitePopoverCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalcitePopoverOpen"?: (event: CalcitePopoverCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement"?: LogicalPlacement;
        /**
          * When `true`, removes the caret pointer.
         */
        "pointerDisabled"?: boolean;
        /**
          * The `referenceElement` used to position the component according to its `placement` value. Setting to an `HTMLElement` is preferred so the component does not need to query the DOM. However, a string `id` of the reference element can also be used.
         */
        "referenceElement": ReferenceElement | string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * When `true`, disables automatically toggling the component when its `referenceElement` has been triggered.  This property can be set to `true` to manage when the component is open.
         */
        "triggerDisabled"?: boolean;
    }
    interface CalciteProgress {
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When `true` and for `"indeterminate"` progress bars, reverses the animation direction.
         */
        "reversed"?: boolean;
        /**
          * Text that displays under the component's indicator.
         */
        "text"?: string;
        /**
          * Specifies the component type.  Use `"indeterminate"` if finding actual progress value is impossible.
         */
        "type"?: "indeterminate" | "determinate";
        /**
          * When `type` is `"determinate"`, the component's progress value with a range of 0.0 - 1.0.
         */
        "value"?: number;
    }
    interface CalciteRadioButton {
        /**
          * When `true`, the component is checked.
         */
        "checked"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The focused state of the component.
         */
        "focused"?: boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * The `id` of the component. When omitted, a globally unique identifier is used.
         */
        "guid"?: string;
        /**
          * The hovered state of the component.
         */
        "hovered"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Specifies the name of the component. Can be inherited from `calcite-radio-button-group`.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the radio button is blurred.
         */
        "onCalciteInternalRadioButtonBlur"?: (event: CalciteRadioButtonCustomEvent<void>) => void;
        /**
          * Fires when the checked property changes.  This is an internal event used for styling purposes only. Use calciteRadioButtonChange or calciteRadioButtonGroupChange for responding to changes in the checked value for forms.
         */
        "onCalciteInternalRadioButtonCheckedChange"?: (event: CalciteRadioButtonCustomEvent<void>) => void;
        /**
          * Fires when the radio button is focused.
         */
        "onCalciteInternalRadioButtonFocus"?: (event: CalciteRadioButtonCustomEvent<void>) => void;
        /**
          * Fires only when the radio button is checked.  This behavior is identical to the native HTML input element. Since this event does not fire when the radio button is unchecked, it's not recommended to attach a listener for this event directly on the element, but instead either attach it to a node that contains all of the radio buttons in the group or use the `calciteRadioButtonGroupChange` event if using this with `calcite-radio-button-group`.
         */
        "onCalciteRadioButtonChange"?: (event: CalciteRadioButtonCustomEvent<void>) => void;
        /**
          * When `true`, the component must have a value selected from the `calcite-radio-button-group` in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component inherited from the `calcite-radio-button-group`.
         */
        "scale"?: Scale;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteRadioButtonGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Defines the layout of the component.
         */
        "layout"?: Extract<"horizontal" | "vertical" | "grid", Layout>;
        /**
          * Specifies the name of the component on form submission. Must be unique to other component instances.
         */
        "name": string;
        /**
          * Fires when the component has changed.
         */
        "onCalciteRadioButtonGroupChange"?: (event: CalciteRadioButtonGroupCustomEvent<void>) => void;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected item.
          * @readonly
         */
        "selectedItem"?: HTMLCalciteRadioButtonElement;
        /**
          * Specifies the status of the validation message.
         */
        "status"?: Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon"?: IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage"?: string;
    }
    interface CalciteRating {
        /**
          * Specifies a cumulative average from previous ratings to display.
         */
        "average"?: number;
        /**
          * Specifies the number of previous ratings to display.
         */
        "count"?: number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<RatingMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: RatingMessages;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the component's value changes.
         */
        "onCalciteRatingChange"?: (event: CalciteRatingCustomEvent<void>) => void;
        /**
          * When `true`, the component's value can be read, but cannot be modified.
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * When `true`, and if available, displays the `average` and/or `count` data summary in a `calcite-chip`.
         */
        "showChip"?: boolean;
        /**
          * The component's value.
         */
        "value"?: number;
    }
    interface CalciteScrim {
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ScrimMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ScrimMessages;
    }
    interface CalciteSegmentedControl {
        /**
          * Specifies the appearance style of the component.
         */
        "appearance"?: Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * Defines the layout of the component.
         */
        "layout"?: Extract<"horizontal" | "vertical", Layout>;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the `calcite-segmented-control-item` selection changes.
         */
        "onCalciteSegmentedControlChange"?: (event: CalciteSegmentedControlCustomEvent<void>) => void;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The component's selected item `HTMLElement`.
          * @readonly
         */
        "selectedItem"?: HTMLCalciteSegmentedControlItemElement;
        /**
          * Specifies the status of the validation message.
         */
        "status"?: Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon"?: IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage"?: string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity"?: MutableValidityState;
        /**
          * The component's `selectedItem` value.
         */
        "value"?: string;
        /**
          * Specifies the width of the component.
         */
        "width"?: Extract<"auto" | "full", Width>;
    }
    interface CalciteSegmentedControlItem {
        /**
          * Specifies the appearance style of the component inherited from parent `calcite-segmented-control`, defaults to `solid`.
         */
        "appearance"?: Extract<"outline" | "outline-fill" | "solid", Appearance>;
        /**
          * When `true`, the component is checked.
         */
        "checked"?: boolean;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: IconNameOrString;
        /**
          * Defines the layout of the component inherited from parent `calcite-segmented-control`, defaults to `horizontal`.
         */
        "layout"?: Extract<"horizontal" | "vertical" | "grid", Layout>;
        /**
          * Fires when the item has been selected.
         */
        "onCalciteInternalSegmentedControlItemChange"?: (event: CalciteSegmentedControlItemCustomEvent<void>) => void;
        /**
          * Specifies the size of the component inherited from the `calcite-segmented-control`, defaults to `m`.
         */
        "scale"?: Scale;
        /**
          * The component's value.
         */
        "value"?: any | null;
    }
    interface CalciteSelect {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the `selectedOption` changes.
         */
        "onCalciteSelectChange"?: (event: CalciteSelectCustomEvent<void>) => void;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The component's selected option `HTMLElement`.
          * @readonly
         */
        "selectedOption"?: HTMLCalciteOptionElement;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon"?: IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage"?: string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity"?: MutableValidityState;
        /**
          * The component's `selectedOption` value.
         */
        "value"?: string;
        /**
          * Specifies the width of the component.
         */
        "width"?: Width;
    }
    interface CalciteSheet {
        /**
          * Passes a function to run before the component closes.
          * @returns
         */
        "beforeClose"?: (el: HTMLCalciteSheetElement) => Promise<void>;
        /**
          * Specifies the display mode - `"float"` (content is separated detached), or `"overlay"` (displays on top of center content).
         */
        "displayMode"?: DisplayMode;
        /**
          * This internal property, managed by a containing calcite-shell, is used to inform the component if special configuration or styles are needed
         */
        "embedded"?: boolean;
        /**
          * When `true`, disables the default close on escape behavior.
         */
        "escapeDisabled"?: boolean;
        /**
          * When `true`, prevents focus trapping.
         */
        "focusTrapDisabled"?: boolean;
        /**
          * When `position` is `"block-start"` or `"block-end"`, specifies the height of the component.
         */
        "heightScale"?: Scale;
        /**
          * Specifies the label of the component.
         */
        "label": string;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteSheetBeforeClose"?: (event: CalciteSheetCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteSheetBeforeOpen"?: (event: CalciteSheetCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteSheetClose"?: (event: CalciteSheetCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteSheetOpen"?: (event: CalciteSheetCustomEvent<void>) => void;
        /**
          * When `true`, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * We use an internal property to handle styles for when a modal is actually opened, not just when the open attribute is applied. This is a property because we need to apply styles to the host element and to keep the styles present while beforeClose is .
         */
        "opened"?: boolean;
        /**
          * When `true`, disables the closing of the component when clicked outside.
         */
        "outsideCloseDisabled"?: boolean;
        /**
          * Determines where the component will be positioned.
         */
        "position"?: LogicalFlowPosition;
        /**
          * When `position` is `"inline-start"` or `"inline-end"`, specifies the width of the component.
         */
        "widthScale"?: Scale;
    }
    interface CalciteShell {
        /**
          * Positions the center content behind any `calcite-shell-panel`s.
         */
        "contentBehind"?: boolean;
    }
    interface CalciteShellCenterRow {
        /**
          * When `true`, the content area displays like a floating panel.
         */
        "detached"?: boolean;
        /**
          * Specifies the maximum height of the component.
         */
        "heightScale"?: Scale;
        /**
          * Specifies the component's position. Will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "position"?: Extract<"start" | "end", Position>;
    }
    interface CalciteShellPanel {
        /**
          * When `true`, hides the component's content area.
         */
        "collapsed"?: boolean;
        /**
          * When `true`, the content area displays like a floating panel.
          * @deprecated Use `displayMode` instead.
         */
        "detached"?: boolean;
        /**
          * When `displayMode` is `float-content` or `float`, specifies the maximum height of the component.
          * @deprecated Use `heightScale` instead.
         */
        "detachedHeightScale"?: Scale;
        /**
          * Specifies the display mode of the component, where:  `"dock"` displays at full height adjacent to center content,  `"overlay"` displays at full height on top of center content, and  `"float"` [Deprecated] does not display at full height with content separately detached from `calcite-action-bar` on top of center content.  `"float-content"` does not display at full height with content separately detached from `calcite-action-bar` on top of center content.  `"float-all"` detaches the `calcite-panel` and `calcite-action-bar` on top of center content.
         */
        "displayMode"?: DisplayMode1;
        /**
          * When `layout` is `horizontal`, specifies the maximum height of the component.
         */
        "heightScale"?: Scale;
        /**
          * The direction of the component.
         */
        "layout"?: Extract<"horizontal" | "vertical", Layout>;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ShellPanelMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ShellPanelMessages;
        "onCalciteInternalShellPanelResizeEnd"?: (event: CalciteShellPanelCustomEvent<void>) => void;
        "onCalciteInternalShellPanelResizeStart"?: (event: CalciteShellPanelCustomEvent<void>) => void;
        /**
          * Specifies the component's position. Will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "position"?: Extract<"start" | "end", Position>;
        /**
          * When `true` and `displayMode` is not `float-content` or `float`, the component's content area is resizable.
         */
        "resizable"?: boolean;
        /**
          * When `layout` is `vertical`, specifies the width of the component.
         */
        "widthScale"?: Scale;
    }
    interface CalciteSlider {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Used to configure where the fill is placed along the slider track in relation to the value handle.  Range mode will always display the fill between the min and max handles.
         */
        "fillPlacement"?: "start" | "none" | "end";
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * When `true`, indicates a histogram is present.
         */
        "hasHistogram"?: boolean;
        /**
          * A list of the histogram's x,y coordinates within the component's `min` and `max`. Displays above the component's track.
          * @see [DataSeries](https://github.com/Esri/calcite-design-system/blob/dev/src/components/graph/interfaces.ts#L5)
         */
        "histogram"?: DataSeries;
        /**
          * A set of single color stops for a histogram, sorted by offset ascending.
         */
        "histogramStops"?: ColorStop[];
        /**
          * When specified, allows users to customize handle labels.
         */
        "labelFormatter"?: (
    value: number,
    type: "value" | "min" | "max" | "tick",
    defaultFormatter: (value: number) => string,
  ) => string | undefined;
        /**
          * When `true`, displays label handles with their numeric value.
         */
        "labelHandles"?: boolean;
        /**
          * When `true` and `ticks` is specified, displays label tick marks with their numeric value.
         */
        "labelTicks"?: boolean;
        /**
          * The component's maximum selectable value.
         */
        "max"?: number;
        /**
          * For multiple selections, the accessible name for the second handle, such as `"Temperature, upper bound"`.
         */
        "maxLabel"?: string;
        /**
          * For multiple selections, the component's upper value.
         */
        "maxValue"?: number;
        /**
          * The component's minimum selectable value.
         */
        "min"?: number;
        /**
          * Accessible name for first (or only) handle, such as `"Temperature, lower bound"`.
         */
        "minLabel"?: string;
        /**
          * For multiple selections, the component's lower value.
         */
        "minValue"?: number;
        /**
          * When `true`, the slider will display values from high to low.  Note that this value will be ignored if the slider has an associated histogram.
         */
        "mirrored"?: boolean;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the thumb is released on the component.  Note: To constantly listen to the drag event, use `calciteSliderInput` instead.
         */
        "onCalciteSliderChange"?: (event: CalciteSliderCustomEvent<void>) => void;
        /**
          * Fires on all updates to the component.  Note: Fires frequently during drag. To perform expensive operations consider using a debounce or throttle to avoid locking up the main thread.
         */
        "onCalciteSliderInput"?: (event: CalciteSliderCustomEvent<void>) => void;
        /**
          * Specifies the interval to move with the page up, or page down keys.
         */
        "pageStep"?: number;
        /**
          * When `true`, sets a finer point for handles.
         */
        "precise"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * When `true`, enables snap selection in coordination with `step` via a mouse.
         */
        "snap"?: boolean;
        /**
          * Specifies the interval to move with the up, or down keys.
         */
        "step"?: number;
        /**
          * Displays tick marks on the number line at a specified interval.
         */
        "ticks"?: number;
        /**
          * The component's value.
         */
        "value"?: null | number | number[];
    }
    interface CalciteSortableList {
        /**
          * When provided, the method will be called to determine whether the element can  move from the list.
         */
        "canPull"?: (detail: DragDetail) => boolean;
        /**
          * When provided, the method will be called to determine whether the element can be added from another list.
         */
        "canPut"?: (detail: DragDetail) => boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * Specifies which items inside the element should be draggable.
         */
        "dragSelector"?: string;
        /**
          * The list's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * The selector for the handle elements.
         */
        "handleSelector"?: string;
        /**
          * Indicates the horizontal or vertical orientation of the component.
         */
        "layout"?: Extract<"horizontal" | "vertical" | "grid", Layout>;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Emitted when the order of the list has changed.
         */
        "onCalciteListOrderChange"?: (event: CalciteSortableListCustomEvent<void>) => void;
    }
    interface CalciteSplitButton {
        /**
          * When `true`, the component is active.
         */
        "active"?: boolean;
        /**
          * Specifies the appearance style of the component.
         */
        "appearance"?: Extract<
    "outline" | "outline-fill" | "solid" | "transparent",
    Appearance
  >;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies the icon used for the dropdown menu.
         */
        "dropdownIconType"?: DropdownIconType;
        /**
          * Accessible name for the dropdown menu.
         */
        "dropdownLabel"?: string;
        /**
          * Specifies the component's fallback slotted content `placement` when it's initial or specified `placement` has insufficient space available.
         */
        "flipPlacements"?: FlipPlacement[];
        /**
          * Specifies the kind of the component, which will apply to border and background, if applicable.
         */
        "kind"?: Extract<"brand" | "danger" | "inverse" | "neutral", Kind>;
        /**
          * When `true`, a busy indicator is displayed on the primary button.
         */
        "loading"?: boolean;
        /**
          * Fires when the primary button is clicked.
         */
        "onCalciteSplitButtonPrimaryClick"?: (event: CalciteSplitButtonCustomEvent<void>) => void;
        /**
          * Fires when the dropdown menu is clicked.
         */
        "onCalciteSplitButtonSecondaryClick"?: (event: CalciteSplitButtonCustomEvent<void>) => void;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  `"fixed"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the container element.
          * @default "bottom-end"
         */
        "placement"?: MenuPlacement;
        /**
          * Specifies an icon to display at the end of the primary button.
         */
        "primaryIconEnd"?: IconNameOrString;
        /**
          * Displays the `primaryIconStart` and/or `primaryIconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "primaryIconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the primary button.
         */
        "primaryIconStart"?: IconNameOrString;
        /**
          * Accessible name for the primary button.
         */
        "primaryLabel"?: string;
        /**
          * Text displayed in the primary button.
         */
        "primaryText"?: string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the width of the component.
         */
        "width"?: Width;
    }
    interface CalciteStack {
        /**
          * When `true`, content interaction is prevented and displayed with lower opacity.
         */
        "disabled"?: boolean;
    }
    interface CalciteStepper {
        /**
          * When `true`, displays a status icon in the `calcite-stepper-item` heading.
         */
        "icon"?: boolean;
        /**
          * Defines the layout of the component.
         */
        "layout"?: StepperLayout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<StepperMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: StepperMessages;
        /**
          * When `true`, displays the step number in the `calcite-stepper-item` heading.
         */
        "numbered"?: boolean;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires when the active `calcite-stepper-item` changes.
         */
        "onCalciteInternalStepperItemChange"?: (event: CalciteStepperCustomEvent<StepperItemChangeEventDetail>) => void;
        /**
          * Fires when the active `calcite-stepper-item` changes.
         */
        "onCalciteStepperChange"?: (event: CalciteStepperCustomEvent<void>) => void;
        /**
          * Fires when the active `calcite-stepper-item` changes.
          * @deprecated use `calciteStepperChange` instead or `calciteStepperItemChange` on items instead.
         */
        "onCalciteStepperItemChange"?: (event: CalciteStepperCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected item.
          * @readonly
         */
        "selectedItem"?: HTMLCalciteStepperItemElement;
    }
    interface CalciteStepperItem {
        /**
          * When `true`, the step has been completed.
         */
        "complete"?: boolean;
        /**
          * A description for the component. Displays below the header text.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, the component contains an error that requires resolution from the user.
         */
        "error"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * When `true`, displays a status icon in the `calcite-stepper-item` heading inherited from parent `calcite-stepper`.
         */
        "icon"?: boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Specifies the layout of the `calcite-stepper-item` inherited from parent `calcite-stepper`, defaults to `horizontal`.
         */
        "layout"?: StepperLayout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<StepperItemMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: StepperItemMessages;
        /**
          * When `true`, displays the step number in the `calcite-stepper-item` heading inherited from parent `calcite-stepper`.
         */
        "numbered"?: boolean;
        "numberingSystem"?: NumberingSystem;
        "onCalciteInternalStepperItemKeyEvent"?: (event: CalciteStepperItemCustomEvent<StepperItemKeyEventDetail>) => void;
        "onCalciteInternalStepperItemRegister"?: (event: CalciteStepperItemCustomEvent<StepperItemEventDetail>) => void;
        "onCalciteInternalStepperItemSelect"?: (event: CalciteStepperItemCustomEvent<StepperItemEventDetail>) => void;
        /**
          * Fires when the active `calcite-stepper-item` changes.
         */
        "onCalciteStepperItemSelect"?: (event: CalciteStepperItemCustomEvent<void>) => void;
        /**
          * Specifies the size of the component inherited from the `calcite-stepper`, defaults to `m`.
         */
        "scale"?: Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
    }
    interface CalciteSwitch {
        /**
          * When `true`, the component is checked.
         */
        "checked"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Specifies the name of the component.  Required to pass the component's `value` on form submission.
         */
        "name"?: string;
        /**
          * Fires when the `checked` value has changed.
         */
        "onCalciteSwitchChange"?: (event: CalciteSwitchCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * The component's value.
         */
        "value"?: any;
    }
    interface CalciteTab {
        /**
          * Specifies the size of the component inherited from the parent `calcite-tabs`, defaults to `m`.
         */
        "scale"?: Scale;
        /**
          * When `true`, the component's contents are selected.  Only one tab can be selected within the `calcite-tabs` parent.
         */
        "selected"?: boolean;
        /**
          * Specifies a unique name for the component.  When specified, use the same value on the `calcite-tab-title`.
         */
        "tab"?: string;
    }
    interface CalciteTabNav {
        "bordered"?: boolean;
        "layout"?: TabLayout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TabNavMessages>;
        /**
          * Made into a prop for testing purposes only.
         */
        "messages"?: TabNavMessages;
        "onCalciteInternalTabChange"?: (event: CalciteTabNavCustomEvent<TabChangeEventDetail>) => void;
        "onCalciteInternalTabNavSlotChange"?: (event: CalciteTabNavCustomEvent<Element[]>) => void;
        /**
          * Emits when the selected `calcite-tab` changes.
         */
        "onCalciteTabChange"?: (event: CalciteTabNavCustomEvent<void>) => void;
        /**
          * Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to, and is inherited from the parent `calcite-tabs`, defaults to `top`.
         */
        "position"?: TabPosition;
        /**
          * Specifies the size of the component inherited from the parent `calcite-tabs`, defaults to `m`.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected `calcite-tab-title`.
          * @readonly
         */
        "selectedTitle"?: HTMLCalciteTabTitleElement;
        /**
          * Specifies the name when saving selected `calcite-tab` data to `localStorage`.
         */
        "storageId"?: string;
        /**
          * Specifies text to update multiple components to keep in sync if one changes.
         */
        "syncId"?: string;
    }
    interface CalciteTabTitle {
        "bordered"?: boolean;
        /**
          * When `true`, a close button is added to the component.
         */
        "closable"?: boolean;
        /**
          * When `true`, does not display or position the component.
         */
        "closed"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies an icon to display at the end of the component.
         */
        "iconEnd"?: IconNameOrString;
        /**
          * Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: IconNameOrString;
        "layout"?: TabLayout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TabTitleMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: TabTitleMessages;
        "onCalciteInternalTabIconChanged"?: (event: CalciteTabTitleCustomEvent<void>) => void;
        "onCalciteInternalTabTitleRegister"?: (event: CalciteTabTitleCustomEvent<TabID>) => void;
        /**
          * Fires when a `calcite-tab` is selected (`event.details`).
          * @see [TabChangeEventDetail](https://github.com/Esri/calcite-design-system/blob/dev/src/components/tab/interfaces.ts#L1)
         */
        "onCalciteInternalTabsActivate"?: (event: CalciteTabTitleCustomEvent<TabChangeEventDetail>) => void;
        /**
          * Fires when `calcite-tab` is closed (`event.details`).
          * @see [TabChangeEventDetail](https://github.com/Esri/calcite-design-system/blob/dev/src/components/tab/interfaces.ts)
         */
        "onCalciteInternalTabsClose"?: (event: CalciteTabTitleCustomEvent<TabCloseEventDetail>) => void;
        "onCalciteInternalTabsFocusFirst"?: (event: CalciteTabTitleCustomEvent<void>) => void;
        "onCalciteInternalTabsFocusLast"?: (event: CalciteTabTitleCustomEvent<void>) => void;
        "onCalciteInternalTabsFocusNext"?: (event: CalciteTabTitleCustomEvent<void>) => void;
        "onCalciteInternalTabsFocusPrevious"?: (event: CalciteTabTitleCustomEvent<void>) => void;
        /**
          * Fires when a `calcite-tab` is selected.
         */
        "onCalciteTabsActivate"?: (event: CalciteTabTitleCustomEvent<void>) => void;
        /**
          * Fires when a `calcite-tab` is closed.
         */
        "onCalciteTabsClose"?: (event: CalciteTabTitleCustomEvent<void>) => void;
        /**
          * Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to, and is inherited from the parent `calcite-tabs`, defaults to `top`.
         */
        "position"?: TabPosition;
        /**
          * Specifies the size of the component inherited from the parent `calcite-tabs`, defaults to `m`.
         */
        "scale"?: Scale;
        /**
          * When `true`, the component and its respective `calcite-tab` contents are selected.  Only one tab can be selected within the `calcite-tabs` parent.
         */
        "selected"?: boolean;
        /**
          * Specifies a unique name for the component.  When specified, use the same value on the `calcite-tab`.
         */
        "tab"?: string;
    }
    interface CalciteTable {
        /**
          * When `true`, displays borders in the component.
         */
        "bordered"?: boolean;
        /**
          * Specifies an accessible title for the component.
         */
        "caption": string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * When `"interactive"`, allows focus and keyboard navigation of `table-header`s and `table-cell`s.  When `"static"`, prevents focus and keyboard navigation of `table-header`s and `table-cell`s when assistive technologies are not active. Selection affordances and slotted content within `table-cell`s remain focusable.
         */
        "interactionMode"?: TableInteractionMode;
        /**
          * Specifies the layout of the component.
         */
        "layout"?: TableLayout;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TableMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: TableMessages;
        /**
          * When `true`, displays the position of the row in numeric form.
         */
        "numbered"?: boolean;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        "onCalciteInternalTableRowFocusChange"?: (event: CalciteTableCustomEvent<TableRowFocusEvent>) => void;
        /**
          * Emits when the component's page selection changes.
         */
        "onCalciteTablePageChange"?: (event: CalciteTableCustomEvent<void>) => void;
        /**
          * Emits when the component's selected rows change.
         */
        "onCalciteTableSelect"?: (event: CalciteTableCustomEvent<void>) => void;
        /**
          * Specifies the page size of the component. When `true`, renders `calcite-pagination`.
         */
        "pageSize"?: number;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteTableRowElement[];
        /**
          * Specifies the display of the selection interface when `selection-mode` is not `"none"`. When `"none"`, content slotted the `selection-actions` slot will not be displayed.
         */
        "selectionDisplay"?: TableSelectionDisplay;
        /**
          * Specifies the selection mode of the component, where:  `"multiple"` allows any number of selections,  `"single"` allows only one selection, and  `"none"` does not allow any selections.
         */
        "selectionMode"?: Extract<"none" | "multiple" | "single", SelectionMode>;
        /**
          * When `true`, displays striped styling in the component.
         */
        "striped"?: boolean;
        /**
          * When `true`, displays striped styling in the component.
          * @deprecated Use the `striped` property instead.
         */
        "zebra"?: boolean;
    }
    interface CalciteTableCell {
        /**
          * Specifies the alignment of the component.
         */
        "alignment"?: Alignment;
        /**
          * Specifies the number of columns the component should span.
         */
        "colSpan"?: number;
        /**
          * When true, prevents user interaction.  Notes:  This prop should use the
         */
        "disabled"?: boolean;
        "interactionMode"?: TableInteractionMode;
        "lastCell"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TableCellMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: TableCellMessages;
        "numberCell"?: boolean;
        "parentRowAlignment"?: Alignment;
        "parentRowIsSelected"?: boolean;
        "parentRowPositionLocalized"?: string;
        "parentRowType"?: RowType;
        "positionInRow"?: number;
        "readCellContentsToAT"?: boolean;
        /**
          * Specifies the number of rows the component should span.
         */
        "rowSpan"?: number;
        "scale"?: Scale;
        "selectionCell"?: boolean;
    }
    interface CalciteTableHeader {
        /**
          * Specifies the alignment of the component.
         */
        "alignment"?: Alignment;
        "bodyRowCount"?: number;
        /**
          * Specifies the number of columns the component should span.
         */
        "colSpan"?: number;
        /**
          * A description to display beneath heading content.
         */
        "description"?: string;
        /**
          * A heading to display above description content.
         */
        "heading"?: string;
        "interactionMode"?: TableInteractionMode;
        "lastCell"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TableHeaderMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: TableHeaderMessages;
        "numberCell"?: boolean;
        "parentRowAlignment"?: Alignment;
        "parentRowIsSelected"?: boolean;
        "parentRowType"?: RowType;
        "positionInRow"?: number;
        /**
          * Specifies the number of rows the component should span.
         */
        "rowSpan"?: number;
        "scale"?: Scale;
        "selectedRowCount"?: number;
        "selectedRowCountLocalized"?: string;
        "selectionCell"?: boolean;
        "selectionMode"?: SelectionMode;
    }
    interface CalciteTableRow {
        /**
          * Specifies the alignment of the component.
         */
        "alignment"?: Alignment;
        "bodyRowCount"?: number;
        "cellCount"?: number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        "interactionMode"?: TableInteractionMode;
        "lastVisibleRow"?: boolean;
        "numbered"?: boolean;
        "onCalciteInternalTableRowFocusRequest"?: (event: CalciteTableRowCustomEvent<TableRowFocusEvent>) => void;
        /**
          * Fires when the selected state of the component changes.
         */
        "onCalciteTableRowSelect"?: (event: CalciteTableRowCustomEvent<void>) => void;
        "positionAll"?: number;
        "positionSection"?: number;
        "positionSectionLocalized"?: string;
        "readCellContentsToAT"?: boolean;
        "rowType"?: RowType;
        "scale"?: Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        "selectedRowCount"?: number;
        "selectedRowCountLocalized"?: string;
        "selectionMode"?: Extract<"multiple" | "single" | "none", SelectionMode>;
    }
    interface CalciteTabs {
        /**
          * When `true`, the component will display with a folder style menu.
         */
        "bordered"?: boolean;
        /**
          * Specifies the layout of the `calcite-tab-nav`, justifying the `calcite-tab-title`s to the start (`"inline"`), or across and centered (`"center"`).
         */
        "layout"?: TabLayout;
        /**
          * Specifies the position of `calcite-tab-nav` and `calcite-tab-title` components in relation to the `calcite-tabs`.
         */
        "position"?: TabPosition;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
    }
    interface CalciteTextArea {
        /**
          * Specifies the component's number of columns.
          * @mdn [cols](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols)
         */
        "columns"?: number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled"?: boolean;
        /**
          * The `id` of the form that will be associated with the component.  When not set, the component will be associated with its ancestor form element, if any.
         */
        "form"?: string;
        /**
          * When `true`, number values are displayed with a group separator corresponding to the language and country format.
         */
        "groupSeparator"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Specifies the maximum number of characters allowed.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-maxlength)
         */
        "maxLength"?: number;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TextAreaMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: TextAreaMessages;
        /**
          * Specifies the minimum number of characters allowed.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-minlength)
         */
        "minLength"?: number;
        /**
          * Specifies the name of the component.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-name)
         */
        "name"?: string;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        /**
          * Fires each time a new `value` is typed and committed.
         */
        "onCalciteTextAreaChange"?: (event: CalciteTextAreaCustomEvent<void>) => void;
        /**
          * Fires each time a new `value` is typed.
         */
        "onCalciteTextAreaInput"?: (event: CalciteTextAreaCustomEvent<void>) => void;
        /**
          * Specifies the placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-placeholder)
         */
        "placeholder"?: string;
        /**
          * When `true`, the component's `value` can be read, but cannot be modified.
          * @readonly 
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When `true`, the component must have a value in order for the form to submit.
          * @mdn [required]https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required
         */
        "required"?: boolean;
        /**
          * Specifies if the component is resizable.
         */
        "resize"?: "both" | "horizontal" | "vertical" | "none";
        /**
          * Specifies the component's number of rows.
          * @mdn [rows](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows)
         */
        "rows"?: number;
        /**
          * Specifies the size of the component.
         */
        "scale"?: "l" | "m" | "s";
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the validation icon to display under the component.
         */
        "validationIcon"?: IconNameOrString | boolean;
        /**
          * Specifies the validation message to display under the component.
         */
        "validationMessage"?: string;
        /**
          * The current validation state of the component.
          * @readonly 
          * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
         */
        "validity"?: MutableValidityState;
        /**
          * The component's value.
         */
        "value"?: string;
        /**
          * Specifies the wrapping mechanism for the text.
          * @mdn [wrap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-wrap)
         */
        "wrap"?: "soft" | "hard";
    }
    interface CalciteTile {
        /**
          * When `true`, the component is active.
          * @deprecated
         */
        "active"?: boolean;
        /**
          * Specifies the alignment of the Tile's content.
         */
        "alignment"?: Exclude<Alignment, "end">;
        /**
          * A description for the component, which displays below the heading.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The component's embed mode.  When `true`, renders without a border and padding for use by other components.
          * @deprecated No longer necessary.
         */
        "embed"?: boolean;
        /**
          * The component header text, which displays between the icon and description.
         */
        "heading"?: string;
        /**
          * When embed is `"false"`, the URL for the component.
         */
        "href"?: string;
        /**
          * Specifies an icon to display.
         */
        "icon"?: IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * When true, enables the tile to be focused, and allows the `calciteTileSelect` to emit. This is set to `true` by a parent Tile Group component.
         */
        "interactive"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * Defines the layout of the component.  Use `"horizontal"` for rows, and `"vertical"` for a single column.
         */
        "layout"?: Extract<Layout, "horizontal" | "vertical">;
        "onCalciteInternalTileKeyEvent"?: (event: CalciteTileCustomEvent<KeyboardEvent>) => void;
        /**
          * Fires when the selected state of the component changes.
         */
        "onCalciteTileSelect"?: (event: CalciteTileCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * When `true` and the parent's `selectionMode` is `"single"`, `"single-persist"', or `"multiple"`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * Specifies the selection appearance, where:  - `"icon"` (displays a checkmark or dot), or - `"border"` (displays a border).  This property is set by the parent tile-group.
         */
        "selectionAppearance"?: SelectionAppearance1;
        /**
          * Specifies the selection mode, where:  - `"multiple"` (allows any number of selected items), - `"single"` (allows only one selected item), - `"single-persist"` (allows only one selected item and prevents de-selection), - `"none"` (allows no selected items).  This property is set by the parent tile-group.
         */
        "selectionMode"?: Extract<
    "multiple" | "none" | "single" | "single-persist",
    SelectionMode
  >;
    }
    interface CalciteTileGroup {
        /**
          * Specifies the alignment of each `calcite-tile`'s content.
         */
        "alignment"?: Exclude<Alignment, "end">;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Defines the layout of the component.  Use `"horizontal"` for rows, and `"vertical"` for a single column.
         */
        "layout"?: Extract<Layout, "horizontal" | "vertical">;
        /**
          * Fires when the component's selection changes.
         */
        "onCalciteTileGroupSelect"?: (event: CalciteTileGroupCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteTileElement[];
        /**
          * Specifies the selection appearance, where:  - `"icon"` (displays a checkmark or dot), or - `"border"` (displays a border).
         */
        "selectionAppearance"?: SelectionAppearance1;
        /**
          * Specifies the selection mode, where:  - `"multiple"` (allows any number of selected items), - `"single"` (allows only one selected item), - `"single-persist"` (allows only one selected item and prevents de-selection), - `"none"` (allows no selected items).
         */
        "selectionMode"?: Extract<
    "multiple" | "none" | "single" | "single-persist",
    SelectionMode
  >;
    }
    /**
     * @deprecated Use the `calcite-tile` component instead.
     */
    interface CalciteTileSelect {
        /**
          * When `true`, the component is checked.
         */
        "checked"?: boolean;
        /**
          * A description for the component, which displays below the heading.
         */
        "description"?: string;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The component header text, which displays between the icon and description.
         */
        "heading"?: string;
        /**
          * Specifies an icon to display.
         */
        "icon"?: IconNameOrString;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * When `inputEnabled` is `true`, specifies the placement of the interactive input on the component.
         */
        "inputAlignment"?: Extract<"end" | "start", Alignment>;
        /**
          * When `true`, displays an interactive input based on the `type` property.
         */
        "inputEnabled"?: boolean;
        /**
          * Specifies the name of the component on form submission.
         */
        "name"?: any;
        /**
          * Emits a custom change event.  For checkboxes it emits when checked or unchecked.  For radios it only emits when checked.
         */
        "onCalciteTileSelectChange"?: (event: CalciteTileSelectCustomEvent<void>) => void;
        /**
          * Specifies the selection mode of the component, where:  `"radio"` is for single selection, and  `"checkbox"` is for multiple selections.
         */
        "type"?: TileSelectType;
        /**
          * The component's value.
         */
        "value"?: any;
        /**
          * Specifies the width of the component.
         */
        "width"?: Extract<"auto" | "full", Width>;
    }
    /**
     * @deprecated Use the `calcite-tile-group` component instead.
     */
    interface CalciteTileSelectGroup {
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Defines the layout of the component.  Use `"horizontal"` for rows, and `"vertical"` for a single column.
         */
        "layout"?: TileSelectGroupLayout;
    }
    interface CalciteTimePicker {
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TimePickerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: TimePickerMessages;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
         */
        "numberingSystem"?: NumberingSystem;
        "onCalciteInternalTimePickerChange"?: (event: CalciteTimePickerCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the granularity the `value` must adhere to (in seconds).
         */
        "step"?: number;
        /**
          * The component's value in UTC (always 24-hour format).
         */
        "value"?: string;
    }
    /**
     * @deprecated Use the `calcite-card`, `calcite-notice`, `calcite-panel`, or `calcite-tile` component instead.
     */
    interface CalciteTip {
        /**
          * When `true`, the close button is not present on the component.
         */
        "closeDisabled"?: boolean;
        /**
          * When `true`, the component does not display.
         */
        "closed"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TipMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: TipMessages;
        /**
          * Emits when the component has been closed.
         */
        "onCalciteTipDismiss"?: (event: CalciteTipCustomEvent<void>) => void;
        /**
          * When `true`, the component is selected if it has a parent `calcite-tip-manager`.  Only one tip can be selected within the `calcite-tip-manager` parent.
         */
        "selected"?: boolean;
    }
    /**
     * @deprecated Use the `calcite-carousel` and `calcite-carousel-item` components instead.
     */
    interface CalciteTipGroup {
        /**
          * The component header text for all nested `calcite-tip`s.
         */
        "groupTitle"?: string;
    }
    /**
     * @deprecated Use the `calcite-carousel` and `calcite-carousel-item` components instead.
     */
    interface CalciteTipManager {
        /**
          * When `true`, does not display or position the component.
         */
        "closed"?: boolean;
        /**
          * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<TipManagerMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: TipManagerMessages;
        /**
          * Emits when the component has been closed.
         */
        "onCalciteTipManagerClose"?: (event: CalciteTipManagerCustomEvent<void>) => void;
    }
    interface CalciteTooltip {
        /**
          * Closes the component when the `referenceElement` is clicked.
         */
        "closeOnClick"?: boolean;
        /**
          * Accessible name for the component.
          * @deprecated No longer necessary. Overrides the context of the component's description, which could confuse assistive technology users.
         */
        "label"?: string;
        /**
          * Offset the position of the component away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance"?: number;
        /**
          * Offset the position of the component along the `referenceElement`.
         */
        "offsetSkidding"?: number;
        /**
          * Fires when the component is requested to be closed and before the closing transition begins.
         */
        "onCalciteTooltipBeforeClose"?: (event: CalciteTooltipCustomEvent<void>) => void;
        /**
          * Fires when the component is added to the DOM but not rendered, and before the opening transition begins.
         */
        "onCalciteTooltipBeforeOpen"?: (event: CalciteTooltipCustomEvent<void>) => void;
        /**
          * Fires when the component is closed and animation is complete.
         */
        "onCalciteTooltipClose"?: (event: CalciteTooltipCustomEvent<void>) => void;
        /**
          * Fires when the component is open and animation is complete.
         */
        "onCalciteTooltipOpen"?: (event: CalciteTooltipCustomEvent<void>) => void;
        /**
          * When `true`, the component is open.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content.  Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.  The `"fixed"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `"fixed"`.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "placement"?: LogicalPlacement;
        /**
          * The `referenceElement` to position the component according to its `"placement"` value.  Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.  However, a string ID of the reference element can be used.
         */
        "referenceElement"?: ReferenceElement | string;
    }
    interface CalciteTree {
        "child"?: boolean;
        /**
          * When `true`, displays indentation guide lines.
         */
        "lines"?: boolean;
        /**
          * Fires when the user selects/deselects `calcite-tree-items`.
         */
        "onCalciteTreeSelect"?: (event: CalciteTreeCustomEvent<void>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the component's selected items.
          * @readonly
         */
        "selectedItems"?: HTMLCalciteTreeItemElement[];
        /**
          * Specifies the selection mode of the component, where:  `"ancestors"` displays with a checkbox and allows any number of selections from corresponding parent and child selections,  `"children"` allows any number of selections from one parent from corresponding parent and child selections,  `"multichildren"` allows any number of selections from corresponding parent and child selections,  `"multiple"` allows any number of selections,  `"none"` allows no selections,  `"single"` allows one selection, and  `"single-persist"` allows and requires one selection.
          * @default "single"
         */
        "selectionMode"?: SelectionMode;
    }
    interface CalciteTreeItem {
        "depth"?: number;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, the component is expanded.
         */
        "expanded"?: boolean;
        "hasChildren"?: boolean;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * Specifies an icon to display at the start of the component.
         */
        "iconStart"?: IconNameOrString;
        /**
          * In ancestor selection mode, show as indeterminate when only some children are selected.
         */
        "indeterminate"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        "lines"?: boolean;
        "onCalciteInternalTreeItemSelect"?: (event: CalciteTreeItemCustomEvent<TreeItemSelectDetail>) => void;
        "parentExpanded"?: boolean;
        "scale"?: Scale;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        "selectionMode"?: SelectionMode;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface CalciteValueList {
        /**
          * When provided, the method will be called to determine whether the element can move from the list.
         */
        "canPull"?: (detail: DragDetail) => boolean;
        /**
          * When provided, the method will be called to determine whether the element can be added from another list.
         */
        "canPut"?: (detail: DragDetail) => boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When `true`, `calcite-value-list-item`s are sortable via a draggable button.
         */
        "dragEnabled"?: boolean;
        /**
          * When `true`, an input appears at the top of the component that can be used by end users to filter list items.
         */
        "filterEnabled"?: boolean;
        /**
          * Placeholder text for the filter's input field.
         */
        "filterPlaceholder"?: string;
        /**
          * Text for the filter input field.
         */
        "filterText"?: string;
        /**
          * The currently filtered data.
          * @readonly
         */
        "filteredData"?: ItemData1;
        /**
          * The currently filtered items.
          * @readonly
         */
        "filteredItems"?: HTMLCalciteValueListItemElement[];
        /**
          * The component's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * When `true`, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Use this property to override individual strings used by the component.
         */
        "messageOverrides"?: Partial<ValueListMessages>;
        /**
          * Made into a prop for testing purposes only
         */
        "messages"?: ValueListMessages;
        /**
          * Similar to standard radio buttons and checkboxes. When `true`, a user can select multiple `calcite-value-list-item`s at a time. When `false`, only a single `calcite-value-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple"?: boolean;
        /**
          * Emits when any of the list item selections have changed.
         */
        "onCalciteListChange"?: (event: CalciteValueListCustomEvent<Map<string, HTMLCalciteValueListItemElement>>) => void;
        /**
          * Emits when a filter has changed.
         */
        "onCalciteListFilter"?: (event: CalciteValueListCustomEvent<void>) => void;
        /**
          * Emits when the order of the list has changed.
         */
        "onCalciteListOrderChange"?: (event: CalciteValueListCustomEvent<any[]>) => void;
        /**
          * When `true` and single-selection is enabled, the selection changes when navigating `calcite-value-list-item`s via keyboard.
         */
        "selectionFollowsFocus"?: boolean;
    }
    /**
     * @deprecated Use the `calcite-list` component instead.
     */
    interface CalciteValueListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description"?: string;
        "deselectDisabled"?: boolean;
        /**
          * When `true`, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        "handleActivated"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-design-system/blob/dev/src/components/pick-list/resources.ts#L5)
         */
        "icon"?: ICON_TYPES | null;
        /**
          * When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`).
         */
        "iconFlipRtl"?: boolean;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label": string;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata"?: Record<string, unknown>;
        /**
          * When `true`, prevents the content of the component from user interaction.
         */
        "nonInteractive"?: boolean;
        /**
          * Fires when the component is selected or unselected.
         */
        "onCalciteListItemChange"?: (event: CalciteValueListItemCustomEvent<{
    item: HTMLCalciteValueListItemElement;
    value: any;
    selected: boolean;
    shiftPressed: boolean;
  }>) => void;
        /**
          * Fires when the remove button is pressed.
         */
        "onCalciteListItemRemove"?: (event: CalciteValueListItemCustomEvent<void>) => void;
        "onCalciteValueListItemDragHandleBlur"?: (event: CalciteValueListItemCustomEvent<ListItemAndHandle>) => void;
        /**
          * When `true`, adds an action to remove the component.
         */
        "removable"?: boolean;
        /**
          * When `true`, the component is selected.
         */
        "selected"?: boolean;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface IntrinsicElements {
        "calcite-accordion": CalciteAccordion;
        "calcite-accordion-item": CalciteAccordionItem;
        "calcite-action": CalciteAction;
        "calcite-action-bar": CalciteActionBar;
        "calcite-action-group": CalciteActionGroup;
        "calcite-action-menu": CalciteActionMenu;
        "calcite-action-pad": CalciteActionPad;
        "calcite-alert": CalciteAlert;
        "calcite-avatar": CalciteAvatar;
        "calcite-block": CalciteBlock;
        "calcite-block-section": CalciteBlockSection;
        "calcite-button": CalciteButton;
        "calcite-card": CalciteCard;
        "calcite-card-group": CalciteCardGroup;
        "calcite-carousel": CalciteCarousel;
        "calcite-carousel-item": CalciteCarouselItem;
        "calcite-checkbox": CalciteCheckbox;
        "calcite-chip": CalciteChip;
        "calcite-chip-group": CalciteChipGroup;
        "calcite-color-picker": CalciteColorPicker;
        "calcite-color-picker-hex-input": CalciteColorPickerHexInput;
        "calcite-color-picker-swatch": CalciteColorPickerSwatch;
        "calcite-combobox": CalciteCombobox;
        "calcite-combobox-item": CalciteComboboxItem;
        "calcite-combobox-item-group": CalciteComboboxItemGroup;
        "calcite-date-picker": CalciteDatePicker;
        "calcite-date-picker-day": CalciteDatePickerDay;
        "calcite-date-picker-month": CalciteDatePickerMonth;
        "calcite-date-picker-month-header": CalciteDatePickerMonthHeader;
        "calcite-dialog": CalciteDialog;
        "calcite-dropdown": CalciteDropdown;
        "calcite-dropdown-group": CalciteDropdownGroup;
        "calcite-dropdown-item": CalciteDropdownItem;
        "calcite-fab": CalciteFab;
        "calcite-filter": CalciteFilter;
        "calcite-flow": CalciteFlow;
        "calcite-flow-item": CalciteFlowItem;
        "calcite-graph": CalciteGraph;
        "calcite-handle": CalciteHandle;
        "calcite-icon": CalciteIcon;
        "calcite-inline-editable": CalciteInlineEditable;
        "calcite-input": CalciteInput;
        "calcite-input-date-picker": CalciteInputDatePicker;
        "calcite-input-message": CalciteInputMessage;
        "calcite-input-number": CalciteInputNumber;
        "calcite-input-text": CalciteInputText;
        "calcite-input-time-picker": CalciteInputTimePicker;
        "calcite-input-time-zone": CalciteInputTimeZone;
        "calcite-label": CalciteLabel;
        "calcite-link": CalciteLink;
        "calcite-list": CalciteList;
        "calcite-list-item": CalciteListItem;
        "calcite-list-item-group": CalciteListItemGroup;
        "calcite-loader": CalciteLoader;
        "calcite-menu": CalciteMenu;
        "calcite-menu-item": CalciteMenuItem;
        "calcite-meter": CalciteMeter;
        "calcite-modal": CalciteModal;
        "calcite-navigation": CalciteNavigation;
        "calcite-navigation-logo": CalciteNavigationLogo;
        "calcite-navigation-user": CalciteNavigationUser;
        "calcite-notice": CalciteNotice;
        "calcite-option": CalciteOption;
        "calcite-option-group": CalciteOptionGroup;
        "calcite-pagination": CalcitePagination;
        "calcite-panel": CalcitePanel;
        "calcite-pick-list": CalcitePickList;
        "calcite-pick-list-group": CalcitePickListGroup;
        "calcite-pick-list-item": CalcitePickListItem;
        "calcite-popover": CalcitePopover;
        "calcite-progress": CalciteProgress;
        "calcite-radio-button": CalciteRadioButton;
        "calcite-radio-button-group": CalciteRadioButtonGroup;
        "calcite-rating": CalciteRating;
        "calcite-scrim": CalciteScrim;
        "calcite-segmented-control": CalciteSegmentedControl;
        "calcite-segmented-control-item": CalciteSegmentedControlItem;
        "calcite-select": CalciteSelect;
        "calcite-sheet": CalciteSheet;
        "calcite-shell": CalciteShell;
        "calcite-shell-center-row": CalciteShellCenterRow;
        "calcite-shell-panel": CalciteShellPanel;
        "calcite-slider": CalciteSlider;
        "calcite-sortable-list": CalciteSortableList;
        "calcite-split-button": CalciteSplitButton;
        "calcite-stack": CalciteStack;
        "calcite-stepper": CalciteStepper;
        "calcite-stepper-item": CalciteStepperItem;
        "calcite-switch": CalciteSwitch;
        "calcite-tab": CalciteTab;
        "calcite-tab-nav": CalciteTabNav;
        "calcite-tab-title": CalciteTabTitle;
        "calcite-table": CalciteTable;
        "calcite-table-cell": CalciteTableCell;
        "calcite-table-header": CalciteTableHeader;
        "calcite-table-row": CalciteTableRow;
        "calcite-tabs": CalciteTabs;
        "calcite-text-area": CalciteTextArea;
        "calcite-tile": CalciteTile;
        "calcite-tile-group": CalciteTileGroup;
        "calcite-tile-select": CalciteTileSelect;
        "calcite-tile-select-group": CalciteTileSelectGroup;
        "calcite-time-picker": CalciteTimePicker;
        "calcite-tip": CalciteTip;
        "calcite-tip-group": CalciteTipGroup;
        "calcite-tip-manager": CalciteTipManager;
        "calcite-tooltip": CalciteTooltip;
        "calcite-tree": CalciteTree;
        "calcite-tree-item": CalciteTreeItem;
        "calcite-value-list": CalciteValueList;
        "calcite-value-list-item": CalciteValueListItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "calcite-accordion": LocalJSX.CalciteAccordion & JSXBase.HTMLAttributes<HTMLCalciteAccordionElement>;
            "calcite-accordion-item": LocalJSX.CalciteAccordionItem & JSXBase.HTMLAttributes<HTMLCalciteAccordionItemElement>;
            "calcite-action": LocalJSX.CalciteAction & JSXBase.HTMLAttributes<HTMLCalciteActionElement>;
            "calcite-action-bar": LocalJSX.CalciteActionBar & JSXBase.HTMLAttributes<HTMLCalciteActionBarElement>;
            "calcite-action-group": LocalJSX.CalciteActionGroup & JSXBase.HTMLAttributes<HTMLCalciteActionGroupElement>;
            "calcite-action-menu": LocalJSX.CalciteActionMenu & JSXBase.HTMLAttributes<HTMLCalciteActionMenuElement>;
            "calcite-action-pad": LocalJSX.CalciteActionPad & JSXBase.HTMLAttributes<HTMLCalciteActionPadElement>;
            "calcite-alert": LocalJSX.CalciteAlert & JSXBase.HTMLAttributes<HTMLCalciteAlertElement>;
            "calcite-avatar": LocalJSX.CalciteAvatar & JSXBase.HTMLAttributes<HTMLCalciteAvatarElement>;
            "calcite-block": LocalJSX.CalciteBlock & JSXBase.HTMLAttributes<HTMLCalciteBlockElement>;
            "calcite-block-section": LocalJSX.CalciteBlockSection & JSXBase.HTMLAttributes<HTMLCalciteBlockSectionElement>;
            "calcite-button": LocalJSX.CalciteButton & JSXBase.HTMLAttributes<HTMLCalciteButtonElement>;
            "calcite-card": LocalJSX.CalciteCard & JSXBase.HTMLAttributes<HTMLCalciteCardElement>;
            "calcite-card-group": LocalJSX.CalciteCardGroup & JSXBase.HTMLAttributes<HTMLCalciteCardGroupElement>;
            "calcite-carousel": LocalJSX.CalciteCarousel & JSXBase.HTMLAttributes<HTMLCalciteCarouselElement>;
            "calcite-carousel-item": LocalJSX.CalciteCarouselItem & JSXBase.HTMLAttributes<HTMLCalciteCarouselItemElement>;
            "calcite-checkbox": LocalJSX.CalciteCheckbox & JSXBase.HTMLAttributes<HTMLCalciteCheckboxElement>;
            "calcite-chip": LocalJSX.CalciteChip & JSXBase.HTMLAttributes<HTMLCalciteChipElement>;
            "calcite-chip-group": LocalJSX.CalciteChipGroup & JSXBase.HTMLAttributes<HTMLCalciteChipGroupElement>;
            "calcite-color-picker": LocalJSX.CalciteColorPicker & JSXBase.HTMLAttributes<HTMLCalciteColorPickerElement>;
            "calcite-color-picker-hex-input": LocalJSX.CalciteColorPickerHexInput & JSXBase.HTMLAttributes<HTMLCalciteColorPickerHexInputElement>;
            "calcite-color-picker-swatch": LocalJSX.CalciteColorPickerSwatch & JSXBase.HTMLAttributes<HTMLCalciteColorPickerSwatchElement>;
            "calcite-combobox": LocalJSX.CalciteCombobox & JSXBase.HTMLAttributes<HTMLCalciteComboboxElement>;
            "calcite-combobox-item": LocalJSX.CalciteComboboxItem & JSXBase.HTMLAttributes<HTMLCalciteComboboxItemElement>;
            "calcite-combobox-item-group": LocalJSX.CalciteComboboxItemGroup & JSXBase.HTMLAttributes<HTMLCalciteComboboxItemGroupElement>;
            "calcite-date-picker": LocalJSX.CalciteDatePicker & JSXBase.HTMLAttributes<HTMLCalciteDatePickerElement>;
            "calcite-date-picker-day": LocalJSX.CalciteDatePickerDay & JSXBase.HTMLAttributes<HTMLCalciteDatePickerDayElement>;
            "calcite-date-picker-month": LocalJSX.CalciteDatePickerMonth & JSXBase.HTMLAttributes<HTMLCalciteDatePickerMonthElement>;
            "calcite-date-picker-month-header": LocalJSX.CalciteDatePickerMonthHeader & JSXBase.HTMLAttributes<HTMLCalciteDatePickerMonthHeaderElement>;
            "calcite-dialog": LocalJSX.CalciteDialog & JSXBase.HTMLAttributes<HTMLCalciteDialogElement>;
            "calcite-dropdown": LocalJSX.CalciteDropdown & JSXBase.HTMLAttributes<HTMLCalciteDropdownElement>;
            "calcite-dropdown-group": LocalJSX.CalciteDropdownGroup & JSXBase.HTMLAttributes<HTMLCalciteDropdownGroupElement>;
            "calcite-dropdown-item": LocalJSX.CalciteDropdownItem & JSXBase.HTMLAttributes<HTMLCalciteDropdownItemElement>;
            "calcite-fab": LocalJSX.CalciteFab & JSXBase.HTMLAttributes<HTMLCalciteFabElement>;
            "calcite-filter": LocalJSX.CalciteFilter & JSXBase.HTMLAttributes<HTMLCalciteFilterElement>;
            "calcite-flow": LocalJSX.CalciteFlow & JSXBase.HTMLAttributes<HTMLCalciteFlowElement>;
            "calcite-flow-item": LocalJSX.CalciteFlowItem & JSXBase.HTMLAttributes<HTMLCalciteFlowItemElement>;
            "calcite-graph": LocalJSX.CalciteGraph & JSXBase.HTMLAttributes<HTMLCalciteGraphElement>;
            "calcite-handle": LocalJSX.CalciteHandle & JSXBase.HTMLAttributes<HTMLCalciteHandleElement>;
            "calcite-icon": LocalJSX.CalciteIcon & JSXBase.HTMLAttributes<HTMLCalciteIconElement>;
            "calcite-inline-editable": LocalJSX.CalciteInlineEditable & JSXBase.HTMLAttributes<HTMLCalciteInlineEditableElement>;
            "calcite-input": LocalJSX.CalciteInput & JSXBase.HTMLAttributes<HTMLCalciteInputElement>;
            "calcite-input-date-picker": LocalJSX.CalciteInputDatePicker & JSXBase.HTMLAttributes<HTMLCalciteInputDatePickerElement>;
            "calcite-input-message": LocalJSX.CalciteInputMessage & JSXBase.HTMLAttributes<HTMLCalciteInputMessageElement>;
            "calcite-input-number": LocalJSX.CalciteInputNumber & JSXBase.HTMLAttributes<HTMLCalciteInputNumberElement>;
            "calcite-input-text": LocalJSX.CalciteInputText & JSXBase.HTMLAttributes<HTMLCalciteInputTextElement>;
            "calcite-input-time-picker": LocalJSX.CalciteInputTimePicker & JSXBase.HTMLAttributes<HTMLCalciteInputTimePickerElement>;
            "calcite-input-time-zone": LocalJSX.CalciteInputTimeZone & JSXBase.HTMLAttributes<HTMLCalciteInputTimeZoneElement>;
            "calcite-label": LocalJSX.CalciteLabel & JSXBase.HTMLAttributes<HTMLCalciteLabelElement>;
            "calcite-link": LocalJSX.CalciteLink & JSXBase.HTMLAttributes<HTMLCalciteLinkElement>;
            /**
             * A general purpose list that enables users to construct list items that conform to Calcite styling.
             */
            "calcite-list": LocalJSX.CalciteList & JSXBase.HTMLAttributes<HTMLCalciteListElement>;
            "calcite-list-item": LocalJSX.CalciteListItem & JSXBase.HTMLAttributes<HTMLCalciteListItemElement>;
            "calcite-list-item-group": LocalJSX.CalciteListItemGroup & JSXBase.HTMLAttributes<HTMLCalciteListItemGroupElement>;
            "calcite-loader": LocalJSX.CalciteLoader & JSXBase.HTMLAttributes<HTMLCalciteLoaderElement>;
            "calcite-menu": LocalJSX.CalciteMenu & JSXBase.HTMLAttributes<HTMLCalciteMenuElement>;
            "calcite-menu-item": LocalJSX.CalciteMenuItem & JSXBase.HTMLAttributes<HTMLCalciteMenuItemElement>;
            "calcite-meter": LocalJSX.CalciteMeter & JSXBase.HTMLAttributes<HTMLCalciteMeterElement>;
            /**
             * @deprecated Use the `calcite-dialog` component instead.
             */
            "calcite-modal": LocalJSX.CalciteModal & JSXBase.HTMLAttributes<HTMLCalciteModalElement>;
            "calcite-navigation": LocalJSX.CalciteNavigation & JSXBase.HTMLAttributes<HTMLCalciteNavigationElement>;
            "calcite-navigation-logo": LocalJSX.CalciteNavigationLogo & JSXBase.HTMLAttributes<HTMLCalciteNavigationLogoElement>;
            "calcite-navigation-user": LocalJSX.CalciteNavigationUser & JSXBase.HTMLAttributes<HTMLCalciteNavigationUserElement>;
            "calcite-notice": LocalJSX.CalciteNotice & JSXBase.HTMLAttributes<HTMLCalciteNoticeElement>;
            "calcite-option": LocalJSX.CalciteOption & JSXBase.HTMLAttributes<HTMLCalciteOptionElement>;
            "calcite-option-group": LocalJSX.CalciteOptionGroup & JSXBase.HTMLAttributes<HTMLCalciteOptionGroupElement>;
            "calcite-pagination": LocalJSX.CalcitePagination & JSXBase.HTMLAttributes<HTMLCalcitePaginationElement>;
            "calcite-panel": LocalJSX.CalcitePanel & JSXBase.HTMLAttributes<HTMLCalcitePanelElement>;
            /**
             * @deprecated Use the `calcite-list` component instead.
             */
            "calcite-pick-list": LocalJSX.CalcitePickList & JSXBase.HTMLAttributes<HTMLCalcitePickListElement>;
            /**
             * @deprecated Use the `calcite-list` component instead.
             */
            "calcite-pick-list-group": LocalJSX.CalcitePickListGroup & JSXBase.HTMLAttributes<HTMLCalcitePickListGroupElement>;
            /**
             * @deprecated Use the `calcite-list` component instead.
             */
            "calcite-pick-list-item": LocalJSX.CalcitePickListItem & JSXBase.HTMLAttributes<HTMLCalcitePickListItemElement>;
            "calcite-popover": LocalJSX.CalcitePopover & JSXBase.HTMLAttributes<HTMLCalcitePopoverElement>;
            "calcite-progress": LocalJSX.CalciteProgress & JSXBase.HTMLAttributes<HTMLCalciteProgressElement>;
            "calcite-radio-button": LocalJSX.CalciteRadioButton & JSXBase.HTMLAttributes<HTMLCalciteRadioButtonElement>;
            "calcite-radio-button-group": LocalJSX.CalciteRadioButtonGroup & JSXBase.HTMLAttributes<HTMLCalciteRadioButtonGroupElement>;
            "calcite-rating": LocalJSX.CalciteRating & JSXBase.HTMLAttributes<HTMLCalciteRatingElement>;
            "calcite-scrim": LocalJSX.CalciteScrim & JSXBase.HTMLAttributes<HTMLCalciteScrimElement>;
            "calcite-segmented-control": LocalJSX.CalciteSegmentedControl & JSXBase.HTMLAttributes<HTMLCalciteSegmentedControlElement>;
            "calcite-segmented-control-item": LocalJSX.CalciteSegmentedControlItem & JSXBase.HTMLAttributes<HTMLCalciteSegmentedControlItemElement>;
            "calcite-select": LocalJSX.CalciteSelect & JSXBase.HTMLAttributes<HTMLCalciteSelectElement>;
            "calcite-sheet": LocalJSX.CalciteSheet & JSXBase.HTMLAttributes<HTMLCalciteSheetElement>;
            "calcite-shell": LocalJSX.CalciteShell & JSXBase.HTMLAttributes<HTMLCalciteShellElement>;
            "calcite-shell-center-row": LocalJSX.CalciteShellCenterRow & JSXBase.HTMLAttributes<HTMLCalciteShellCenterRowElement>;
            "calcite-shell-panel": LocalJSX.CalciteShellPanel & JSXBase.HTMLAttributes<HTMLCalciteShellPanelElement>;
            "calcite-slider": LocalJSX.CalciteSlider & JSXBase.HTMLAttributes<HTMLCalciteSliderElement>;
            "calcite-sortable-list": LocalJSX.CalciteSortableList & JSXBase.HTMLAttributes<HTMLCalciteSortableListElement>;
            "calcite-split-button": LocalJSX.CalciteSplitButton & JSXBase.HTMLAttributes<HTMLCalciteSplitButtonElement>;
            "calcite-stack": LocalJSX.CalciteStack & JSXBase.HTMLAttributes<HTMLCalciteStackElement>;
            "calcite-stepper": LocalJSX.CalciteStepper & JSXBase.HTMLAttributes<HTMLCalciteStepperElement>;
            "calcite-stepper-item": LocalJSX.CalciteStepperItem & JSXBase.HTMLAttributes<HTMLCalciteStepperItemElement>;
            "calcite-switch": LocalJSX.CalciteSwitch & JSXBase.HTMLAttributes<HTMLCalciteSwitchElement>;
            "calcite-tab": LocalJSX.CalciteTab & JSXBase.HTMLAttributes<HTMLCalciteTabElement>;
            "calcite-tab-nav": LocalJSX.CalciteTabNav & JSXBase.HTMLAttributes<HTMLCalciteTabNavElement>;
            "calcite-tab-title": LocalJSX.CalciteTabTitle & JSXBase.HTMLAttributes<HTMLCalciteTabTitleElement>;
            "calcite-table": LocalJSX.CalciteTable & JSXBase.HTMLAttributes<HTMLCalciteTableElement>;
            "calcite-table-cell": LocalJSX.CalciteTableCell & JSXBase.HTMLAttributes<HTMLCalciteTableCellElement>;
            "calcite-table-header": LocalJSX.CalciteTableHeader & JSXBase.HTMLAttributes<HTMLCalciteTableHeaderElement>;
            "calcite-table-row": LocalJSX.CalciteTableRow & JSXBase.HTMLAttributes<HTMLCalciteTableRowElement>;
            "calcite-tabs": LocalJSX.CalciteTabs & JSXBase.HTMLAttributes<HTMLCalciteTabsElement>;
            "calcite-text-area": LocalJSX.CalciteTextArea & JSXBase.HTMLAttributes<HTMLCalciteTextAreaElement>;
            "calcite-tile": LocalJSX.CalciteTile & JSXBase.HTMLAttributes<HTMLCalciteTileElement>;
            "calcite-tile-group": LocalJSX.CalciteTileGroup & JSXBase.HTMLAttributes<HTMLCalciteTileGroupElement>;
            /**
             * @deprecated Use the `calcite-tile` component instead.
             */
            "calcite-tile-select": LocalJSX.CalciteTileSelect & JSXBase.HTMLAttributes<HTMLCalciteTileSelectElement>;
            /**
             * @deprecated Use the `calcite-tile-group` component instead.
             */
            "calcite-tile-select-group": LocalJSX.CalciteTileSelectGroup & JSXBase.HTMLAttributes<HTMLCalciteTileSelectGroupElement>;
            "calcite-time-picker": LocalJSX.CalciteTimePicker & JSXBase.HTMLAttributes<HTMLCalciteTimePickerElement>;
            /**
             * @deprecated Use the `calcite-card`, `calcite-notice`, `calcite-panel`, or `calcite-tile` component instead.
             */
            "calcite-tip": LocalJSX.CalciteTip & JSXBase.HTMLAttributes<HTMLCalciteTipElement>;
            /**
             * @deprecated Use the `calcite-carousel` and `calcite-carousel-item` components instead.
             */
            "calcite-tip-group": LocalJSX.CalciteTipGroup & JSXBase.HTMLAttributes<HTMLCalciteTipGroupElement>;
            /**
             * @deprecated Use the `calcite-carousel` and `calcite-carousel-item` components instead.
             */
            "calcite-tip-manager": LocalJSX.CalciteTipManager & JSXBase.HTMLAttributes<HTMLCalciteTipManagerElement>;
            "calcite-tooltip": LocalJSX.CalciteTooltip & JSXBase.HTMLAttributes<HTMLCalciteTooltipElement>;
            "calcite-tree": LocalJSX.CalciteTree & JSXBase.HTMLAttributes<HTMLCalciteTreeElement>;
            "calcite-tree-item": LocalJSX.CalciteTreeItem & JSXBase.HTMLAttributes<HTMLCalciteTreeItemElement>;
            /**
             * @deprecated Use the `calcite-list` component instead.
             */
            "calcite-value-list": LocalJSX.CalciteValueList & JSXBase.HTMLAttributes<HTMLCalciteValueListElement>;
            /**
             * @deprecated Use the `calcite-list` component instead.
             */
            "calcite-value-list-item": LocalJSX.CalciteValueListItem & JSXBase.HTMLAttributes<HTMLCalciteValueListItemElement>;
        }
    }
}
